
H755NucleoTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08009c90  08009c90  0000ac90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d9c  08009d9c  0000b08c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d9c  08009d9c  0000ad9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009da4  08009da4  0000b08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009da4  08009da4  0000ada4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009da8  08009da8  0000ada8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  24000000  08009dac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2400008c  08009e38  0000b08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400038c  08009e38  0000b38c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018263  00000000  00000000  0000b0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e50  00000000  00000000  0002331d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00026170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd8  00000000  00000000  00027358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bc1a  00000000  00000000  00028130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0c4  00000000  00000000  00063d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00183a37  00000000  00000000  0007de0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00201845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005350  00000000  00000000  00201888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00206bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009c78 	.word	0x08009c78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	08009c78 	.word	0x08009c78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <SystemInit+0x12c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <SystemInit+0x12c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <SystemInit+0x12c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a44      	ldr	r2, [pc, #272]	@ (800079c <SystemInit+0x12c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <SystemInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <SystemInit+0x130>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a3e      	ldr	r2, [pc, #248]	@ (80007a0 <SystemInit+0x130>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <SystemInit+0x134>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3c      	ldr	r2, [pc, #240]	@ (80007a4 <SystemInit+0x134>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <SystemInit+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <SystemInit+0x134>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4938      	ldr	r1, [pc, #224]	@ (80007a4 <SystemInit+0x134>)
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <SystemInit+0x138>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <SystemInit+0x130>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <SystemInit+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <SystemInit+0x130>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <SystemInit+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemInit+0x134>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemInit+0x134>)
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <SystemInit+0x13c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemInit+0x134>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemInit+0x140>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemInit+0x134>)
 8000706:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemInit+0x144>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <SystemInit+0x134>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x134>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <SystemInit+0x144>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x134>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x134>)
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemInit+0x144>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <SystemInit+0x134>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemInit+0x148>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <SystemInit+0x148>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemInit+0x14c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x150>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemInit+0x154>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x134>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d113      	bne.n	8000790 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x134>)
 800076a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800076e:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SystemInit+0x134>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <SystemInit+0x158>)
 800077a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800077e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <SystemInit+0x134>)
 8000782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <SystemInit+0x134>)
 8000788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800078c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d6:	f023 0302 	bic.w	r3, r3, #2
 80007da:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007dc:	bf00      	nop
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <HAL_I2C_ListenCpltCallback>:
//}



void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    printf("Listen Complete\n");
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <HAL_I2C_ListenCpltCallback+0x1c>)
 8000806:	f008 fba1 	bl	8008f4c <puts>
    HAL_I2C_EnableListen_IT(hi2c);  // Re-enable listening mode
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f002 f80c 	bl	8002828 <HAL_I2C_EnableListen_IT>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08009c90 	.word	0x08009c90

0800081c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c,
                          uint8_t TransferDirection,
                          uint16_t AddrMatchCode)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
 8000828:	4613      	mov	r3, r2
 800082a:	803b      	strh	r3, [r7, #0]
    if (hi2c->Instance == I2C4) // or match your slave address
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <HAL_I2C_AddrCallback+0x48>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d111      	bne.n	800085a <HAL_I2C_AddrCallback+0x3e>
    {
        if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d107      	bne.n	800084c <HAL_I2C_AddrCallback+0x30>
        {
            // Master is writing data to us
            // Prepare to receive. E.g.:
            HAL_I2C_Slave_Seq_Receive_IT(hi2c, rx_buffer, 4,
 800083c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000840:	2204      	movs	r2, #4
 8000842:	4909      	ldr	r1, [pc, #36]	@ (8000868 <HAL_I2C_AddrCallback+0x4c>)
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f001 ff3d 	bl	80026c4 <HAL_I2C_Slave_Seq_Receive_IT>
//    	    else  // Master is reading from slave
//    	    {
//    	        HAL_I2C_Slave_Transmit_IT(hi2c, tx_buffer, sizeof(tx_buffer));
//    	    }
    }
}
 800084a:	e006      	b.n	800085a <HAL_I2C_AddrCallback+0x3e>
            HAL_I2C_Slave_Seq_Transmit_IT(hi2c, tx_buffer, 4,
 800084c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000850:	2204      	movs	r2, #4
 8000852:	4906      	ldr	r1, [pc, #24]	@ (800086c <HAL_I2C_AddrCallback+0x50>)
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f001 fe83 	bl	8002560 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58001c00 	.word	0x58001c00
 8000868:	24000194 	.word	0x24000194
 800086c:	24000008 	.word	0x24000008

08000870 <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    printf("Tx Complete\n");
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 800087a:	f008 fb67 	bl	8008f4c <puts>
    HAL_I2C_EnableListen_IT(hi2c);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f001 ffd2 	bl	8002828 <HAL_I2C_EnableListen_IT>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	08009ca0 	.word	0x08009ca0

08000890 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    printf("Rx Complete\n");
 8000898:	480e      	ldr	r0, [pc, #56]	@ (80008d4 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800089a:	f008 fb57 	bl	8008f4c <puts>

    for (int i = 0; i < 4; ++i) {
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	e00a      	b.n	80008ba <HAL_I2C_SlaveRxCpltCallback+0x2a>
        	printf("%d, ", rx_buffer[i]);
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	480b      	ldr	r0, [pc, #44]	@ (80008dc <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80008b0:	f008 fadc 	bl	8008e6c <iprintf>
    for (int i = 0; i < 4; ++i) {
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	ddf1      	ble.n	80008a4 <HAL_I2C_SlaveRxCpltCallback+0x14>
        }

        printf("\n");
 80008c0:	200a      	movs	r0, #10
 80008c2:	f008 fae5 	bl	8008e90 <putchar>

    HAL_I2C_EnableListen_IT(hi2c);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f001 ffae 	bl	8002828 <HAL_I2C_EnableListen_IT>

}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08009cac 	.word	0x08009cac
 80008d8:	24000194 	.word	0x24000194
 80008dc:	08009cb8 	.word	0x08009cb8

080008e0 <HAL_I2C_ErrorCallback>:

// Also handle error:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
//    printf("error\n");
    // Optionally inspect hi2c->ErrorCode for details
	  printf("I2C ErrorCallback: ErrorCode = 0x%lX\r\n", hi2c->ErrorCode);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <HAL_I2C_ErrorCallback+0x24>)
 80008f0:	f008 fabc 	bl	8008e6c <iprintf>
	// Clear errors or re-init as needed
    HAL_I2C_EnableListen_IT(hi2c);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f001 ff97 	bl	8002828 <HAL_I2C_EnableListen_IT>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	08009cc0 	.word	0x08009cc0

08000908 <HAL_SPI_RxCpltCallback>:
//        HAL_SPIEx_HalfDuplex_Receive_IT(hspi, rx_buffer, 3);
//    }
//}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI3)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_SPI_RxCpltCallback+0x30>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d109      	bne.n	800092e <HAL_SPI_RxCpltCallback+0x26>
    {
        // After receiving, send back data
        HAL_SPI_Transmit_IT(hspi, tx_buffer, sizeof(tx_buffer));
 800091a:	2204      	movs	r2, #4
 800091c:	4907      	ldr	r1, [pc, #28]	@ (800093c <HAL_SPI_RxCpltCallback+0x34>)
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f006 fc52 	bl	80071c8 <HAL_SPI_Transmit_IT>
        HAL_SPI_Receive_IT(&hspi3, rx_buffer, sizeof(rx_buffer));
 8000924:	2204      	movs	r2, #4
 8000926:	4906      	ldr	r1, [pc, #24]	@ (8000940 <HAL_SPI_RxCpltCallback+0x38>)
 8000928:	4806      	ldr	r0, [pc, #24]	@ (8000944 <HAL_SPI_RxCpltCallback+0x3c>)
 800092a:	f006 fcf7 	bl	800731c <HAL_SPI_Receive_IT>
    }
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40003c00 	.word	0x40003c00
 800093c:	24000008 	.word	0x24000008
 8000940:	24000194 	.word	0x24000194
 8000944:	2400010c 	.word	0x2400010c

08000948 <HAL_SPI_TxCpltCallback>:



void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI3)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <HAL_SPI_TxCpltCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d102      	bne.n	8000960 <HAL_SPI_TxCpltCallback+0x18>
    {
        printf("SPI TX complete.\r\n");
 800095a:	4804      	ldr	r0, [pc, #16]	@ (800096c <HAL_SPI_TxCpltCallback+0x24>)
 800095c:	f008 faf6 	bl	8008f4c <puts>
        // If you need to send new data on the next transaction, update spiTxBuf here.
        // For continuous full-duplex transactions, you may call:

//        HAL_SPI_TransmitReceive_IT(hspi, spiTxBuf, spiRxBuf, SPI_RX_BUF_SIZE);
    }
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40003c00 	.word	0x40003c00
 800096c:	08009ce8 	.word	0x08009ce8

08000970 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a09      	ldr	r2, [pc, #36]	@ (80009a4 <HAL_SPI_ErrorCallback+0x34>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d10b      	bne.n	800099a <HAL_SPI_ErrorCallback+0x2a>
    {
        printf("SPI Error occurred. Error Code: 0x%lX\r\n", hspi->ErrorCode);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000988:	4619      	mov	r1, r3
 800098a:	4807      	ldr	r0, [pc, #28]	@ (80009a8 <HAL_SPI_ErrorCallback+0x38>)
 800098c:	f008 fa6e 	bl	8008e6c <iprintf>
        // Optionally, abort the current operation and re-start:
        HAL_SPI_Receive_IT(hspi, rx_buffer, 3);
 8000990:	2203      	movs	r2, #3
 8000992:	4906      	ldr	r1, [pc, #24]	@ (80009ac <HAL_SPI_ErrorCallback+0x3c>)
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f006 fcc1 	bl	800731c <HAL_SPI_Receive_IT>
    }
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40003800 	.word	0x40003800
 80009a8:	08009cfc 	.word	0x08009cfc
 80009ac:	24000194 	.word	0x24000194

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fe7b 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f877 	bl	8000aac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009be:	4b35      	ldr	r3, [pc, #212]	@ (8000a94 <main+0xe4>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	4a33      	ldr	r2, [pc, #204]	@ (8000a94 <main+0xe4>)
 80009c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <main+0xe4>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009dc:	2000      	movs	r0, #0
 80009de:	f001 fcf5 	bl	80023cc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f001 fd0b 	bl	8002400 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ee:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009f0:	bf00      	nop
 80009f2:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <main+0xe4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d104      	bne.n	8000a08 <main+0x58>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	dcf4      	bgt.n	80009f2 <main+0x42>
if ( timeout < 0 )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da01      	bge.n	8000a12 <main+0x62>
{
Error_Handler();
 8000a0e:	f000 fa13 	bl	8000e38 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 f959 	bl	8000cc8 <MX_GPIO_Init>
  MX_I2C4_Init();
 8000a16:	f000 f8c5 	bl	8000ba4 <MX_I2C4_Init>
  MX_SPI3_Init();
 8000a1a:	f000 f903 	bl	8000c24 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_I2C_Slave_Receive_IT(&hi2c4 ,(uint8_t *)RX_Buffer, 1); //Receiving in Interrupt mode
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 fc38 	bl	8001294 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 fc35 	bl	8001294 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f000 fc32 	bl	8001294 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a30:	2101      	movs	r1, #1
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 fcce 	bl	80013d4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <main+0xe8>)
 8000a3a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a3e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <main+0xe8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <main+0xe8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <main+0xe8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <main+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a58:	490f      	ldr	r1, [pc, #60]	@ (8000a98 <main+0xe8>)
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 fd4a 	bl	80014f4 <BSP_COM_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <main+0xba>
  {
    Error_Handler();
 8000a66:	f000 f9e7 	bl	8000e38 <Error_Handler>
  }

  HAL_I2C_EnableListen_IT(&hi2c4);
 8000a6a:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <main+0xec>)
 8000a6c:	f001 fedc 	bl	8002828 <HAL_I2C_EnableListen_IT>
  // Initialize SPI2 as a half-duplex slave via CubeMX or your initialization code.
//  HAL_SPIEx_HalfDuplex_Receive_IT(&hspi3, rx_buffer, 3);

  HAL_SPI_Receive_IT(&hspi3, rx_buffer, sizeof(rx_buffer));
 8000a70:	2204      	movs	r2, #4
 8000a72:	490b      	ldr	r1, [pc, #44]	@ (8000aa0 <main+0xf0>)
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <main+0xf4>)
 8000a76:	f006 fc51 	bl	800731c <HAL_SPI_Receive_IT>
  printf("testing code \n");
 8000a7a:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <main+0xf8>)
 8000a7c:	f008 fa66 	bl	8008f4c <puts>
//				  BSP_LED_Toggle(LED_GREEN);
//		  	  }
//
//	      }
//	  HAL_I2C_Slave_Receive_IT(&hi2c4 ,(uint8_t *)RX_Buffer, 1); //Receiving in Interrupt mode
	  BSP_LED_Toggle(LED_GREEN);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 fc7d 	bl	8001380 <BSP_LED_Toggle>
//	          {
//	              printf("Re-enabling listen mode\n");
//	              HAL_I2C_EnableListen_IT(&hi2c4);
//	              lastTime = currentTime;
//	          }
	          HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a8a:	f000 fea3 	bl	80017d4 <HAL_Delay>
	  BSP_LED_Toggle(LED_GREEN);
 8000a8e:	bf00      	nop
 8000a90:	e7f6      	b.n	8000a80 <main+0xd0>
 8000a92:	bf00      	nop
 8000a94:	58024400 	.word	0x58024400
 8000a98:	240000a8 	.word	0x240000a8
 8000a9c:	240000b8 	.word	0x240000b8
 8000aa0:	24000194 	.word	0x24000194
 8000aa4:	2400010c 	.word	0x2400010c
 8000aa8:	08009d24 	.word	0x08009d24

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09c      	sub	sp, #112	@ 0x70
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	224c      	movs	r2, #76	@ 0x4c
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f008 fa4e 	bl	8008f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 fa48 	bl	8008f5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000acc:	2004      	movs	r0, #4
 8000ace:	f003 fbeb 	bl	80042a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b31      	ldr	r3, [pc, #196]	@ (8000b9c <SystemClock_Config+0xf0>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	4a30      	ldr	r2, [pc, #192]	@ (8000b9c <SystemClock_Config+0xf0>)
 8000adc:	f023 0301 	bic.w	r3, r3, #1
 8000ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <SystemClock_Config+0xf0>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <SystemClock_Config+0xf4>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000af4:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba0 <SystemClock_Config+0xf4>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b28      	ldr	r3, [pc, #160]	@ (8000ba0 <SystemClock_Config+0xf4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b08:	bf00      	nop
 8000b0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <SystemClock_Config+0xf4>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b16:	d1f8      	bne.n	8000b0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	2340      	movs	r3, #64	@ 0x40
 8000b22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b30:	230a      	movs	r3, #10
 8000b32:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b40:	230c      	movs	r3, #12
 8000b42:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b44:	2302      	movs	r3, #2
 8000b46:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fc03 	bl	800435c <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b5c:	f000 f96c 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	233f      	movs	r3, #63	@ 0x3f
 8000b62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b7c:	2340      	movs	r3, #64	@ 0x40
 8000b7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2101      	movs	r1, #1
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 f843 	bl	8004c10 <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b90:	f000 f952 	bl	8000e38 <Error_Handler>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3770      	adds	r7, #112	@ 0x70
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58000400 	.word	0x58000400
 8000ba0:	58024800 	.word	0x58024800

08000ba4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c1c <MX_I2C4_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00300F38;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <MX_I2C4_Init+0x7c>)
 8000bb2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 64;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bb6:	2240      	movs	r2, #64	@ 0x40
 8000bb8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000bde:	480e      	ldr	r0, [pc, #56]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000be0:	f001 fc22 	bl	8002428 <HAL_I2C_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bea:	f000 f925 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000bf2:	f003 fac1 	bl	8004178 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000bfc:	f000 f91c 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_I2C4_Init+0x74>)
 8000c04:	f003 fb03 	bl	800420e <HAL_I2CEx_ConfigDigitalFilter>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f000 f913 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	240000b8 	.word	0x240000b8
 8000c1c:	58001c00 	.word	0x58001c00
 8000c20:	00300f38 	.word	0x00300f38

08000c24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c28:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c2a:	4a26      	ldr	r2, [pc, #152]	@ (8000cc4 <MX_SPI3_Init+0xa0>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c36:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000c3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c3e:	2203      	movs	r2, #3
 8000c40:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c50:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c54:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c62:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_SPI3_Init+0x9c>)
 8000cac:	f006 f968 	bl	8006f80 <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI3_Init+0x96>
  {
    Error_Handler();
 8000cb6:	f000 f8bf 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2400010c 	.word	0x2400010c
 8000cc4:	40003c00 	.word	0x40003c00

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b51      	ldr	r3, [pc, #324]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cee:	4b4d      	ldr	r3, [pc, #308]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b49      	ldr	r3, [pc, #292]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	4a48      	ldr	r2, [pc, #288]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0c:	4b45      	ldr	r3, [pc, #276]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1a:	4b42      	ldr	r3, [pc, #264]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	4a40      	ldr	r2, [pc, #256]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	f003 0320 	and.w	r3, r3, #32
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	4a39      	ldr	r2, [pc, #228]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d48:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d56:	4b33      	ldr	r3, [pc, #204]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <MX_GPIO_Init+0x15c>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d74:	2332      	movs	r3, #50	@ 0x32
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d84:	230b      	movs	r3, #11
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4826      	ldr	r0, [pc, #152]	@ (8000e28 <MX_GPIO_Init+0x160>)
 8000d90:	f001 f938 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d94:	2386      	movs	r3, #134	@ 0x86
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da4:	230b      	movs	r3, #11
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	481f      	ldr	r0, [pc, #124]	@ (8000e2c <MX_GPIO_Init+0x164>)
 8000db0:	f001 f928 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000db4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc6:	230b      	movs	r3, #11
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4817      	ldr	r0, [pc, #92]	@ (8000e30 <MX_GPIO_Init+0x168>)
 8000dd2:	f001 f917 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000dd6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000de8:	230a      	movs	r3, #10
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <MX_GPIO_Init+0x164>)
 8000df4:	f001 f906 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000df8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <MX_GPIO_Init+0x16c>)
 8000e16:	f001 f8f5 	bl	8002004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020000 	.word	0x58020000
 8000e30:	58020400 	.word	0x58020400
 8000e34:	58021800 	.word	0x58021800

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <Error_Handler+0x8>

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <HAL_MspInit+0x30>)
 8000e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e50:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <HAL_MspInit+0x30>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_MspInit+0x30>)
 8000e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	22c0      	movs	r2, #192	@ 0xc0
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f008 f85f 	bl	8008f5c <memset>
  if(hi2c->Instance==I2C4)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8000f60 <HAL_I2C_MspInit+0xe8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d156      	bne.n	8000f56 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ea8:	f04f 0210 	mov.w	r2, #16
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 fa32 	bl	8005328 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000eca:	f7ff ffb5 	bl	8000e38 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ece:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <HAL_I2C_MspInit+0xec>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed4:	4a23      	ldr	r2, [pc, #140]	@ (8000f64 <HAL_I2C_MspInit+0xec>)
 8000ed6:	f043 0320 	orr.w	r3, r3, #32
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ede:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <HAL_I2C_MspInit+0xec>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee4:	f003 0320 	and.w	r3, r3, #32
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000eec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ef0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f06:	2304      	movs	r3, #4
 8000f08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4815      	ldr	r0, [pc, #84]	@ (8000f68 <HAL_I2C_MspInit+0xf0>)
 8000f14:	f001 f876 	bl	8002004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_I2C_MspInit+0xec>)
 8000f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f1e:	4a11      	ldr	r2, [pc, #68]	@ (8000f64 <HAL_I2C_MspInit+0xec>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_I2C_MspInit+0xec>)
 8000f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	205f      	movs	r0, #95	@ 0x5f
 8000f3c:	f000 fd55 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000f40:	205f      	movs	r0, #95	@ 0x5f
 8000f42:	f000 fd6c 	bl	8001a1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2060      	movs	r0, #96	@ 0x60
 8000f4c:	f000 fd4d 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8000f50:	2060      	movs	r0, #96	@ 0x60
 8000f52:	f000 fd64 	bl	8001a1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000f56:	bf00      	nop
 8000f58:	37e8      	adds	r7, #232	@ 0xe8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	58001c00 	.word	0x58001c00
 8000f64:	58024400 	.word	0x58024400
 8000f68:	58021400 	.word	0x58021400

08000f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	22c0      	movs	r2, #192	@ 0xc0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 ffe5 	bl	8008f5c <memset>
  if(hspi->Instance==SPI3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a2a      	ldr	r2, [pc, #168]	@ (8001040 <HAL_SPI_MspInit+0xd4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d14d      	bne.n	8001038 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000f9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 f9b9 	bl	8005328 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000fbc:	f7ff ff3c 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc0:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_SPI_MspInit+0xd8>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ffc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001000:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001016:	2306      	movs	r3, #6
 8001018:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001020:	4619      	mov	r1, r3
 8001022:	4809      	ldr	r0, [pc, #36]	@ (8001048 <HAL_SPI_MspInit+0xdc>)
 8001024:	f000 ffee 	bl	8002004 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2033      	movs	r0, #51	@ 0x33
 800102e:	f000 fcdc 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001032:	2033      	movs	r0, #51	@ 0x33
 8001034:	f000 fcf3 	bl	8001a1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001038:	bf00      	nop
 800103a:	37e8      	adds	r7, #232	@ 0xe8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40003c00 	.word	0x40003c00
 8001044:	58024400 	.word	0x58024400
 8001048:	58020800 	.word	0x58020800

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 fb77 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}

080010aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 fa02 	bl	80014b8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <SPI3_IRQHandler+0x10>)
 80010be:	f006 f9d7 	bl	8007470 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2400010c 	.word	0x2400010c

080010cc <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <I2C4_EV_IRQHandler+0x10>)
 80010d2:	f001 fbc9 	bl	8002868 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	240000b8 	.word	0x240000b8

080010e0 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <I2C4_ER_IRQHandler+0x10>)
 80010e6:	f001 fbd9 	bl	800289c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	240000b8 	.word	0x240000b8

080010f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	e00a      	b.n	800111c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001106:	f3af 8000 	nop.w
 800110a:	4601      	mov	r1, r0
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	60ba      	str	r2, [r7, #8]
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf0      	blt.n	8001106 <_read+0x12>
  }

  return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	e009      	b.n	8001154 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60ba      	str	r2, [r7, #8]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fa35 	bl	80015b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf1      	blt.n	8001140 <_write+0x12>
  }
  return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_close>:

int _close(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800118e:	605a      	str	r2, [r3, #4]
  return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_isatty>:

int _isatty(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	@ (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f007 feb4 	bl	8008f6c <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <_sbrk+0x64>)
 8001220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	24080000 	.word	0x24080000
 8001230:	00000400 	.word	0x00000400
 8001234:	24000198 	.word	0x24000198
 8001238:	24000390 	.word	0x24000390

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001278 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001240:	f7ff fac4 	bl	80007cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001244:	f7ff fa14 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	@ (8001280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	@ (800128c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f007 fe83 	bl	8008f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff fb9d 	bl	80009b0 <main>
  bx  lr
 8001276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800127c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001280:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8001284:	08009dac 	.word	0x08009dac
  ldr r2, =_sbss
 8001288:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 800128c:	2400038c 	.word	0x2400038c

08001290 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC3_IRQHandler>
	...

08001294 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	@ 0x30
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d009      	beq.n	80012bc <BSP_LED_Init+0x28>
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d006      	beq.n	80012bc <BSP_LED_Init+0x28>
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d003      	beq.n	80012bc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012b4:	f06f 0301 	mvn.w	r3, #1
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ba:	e055      	b.n	8001368 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80012c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001374 <BSP_LED_Init+0xe0>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001374 <BSP_LED_Init+0xe0>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d2:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <BSP_LED_Init+0xe0>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	e021      	b.n	8001326 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d10f      	bne.n	8001308 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <BSP_LED_Init+0xe0>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <BSP_LED_Init+0xe0>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <BSP_LED_Init+0xe0>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	e00e      	b.n	8001326 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <BSP_LED_Init+0xe0>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <BSP_LED_Init+0xe0>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <BSP_LED_Init+0xe0>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <BSP_LED_Init+0xe4>)
 800132a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <BSP_LED_Init+0xe8>)
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	f107 0218 	add.w	r2, r7, #24
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fe5a 	bl	8002004 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <BSP_LED_Init+0xe8>)
 8001354:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4a07      	ldr	r2, [pc, #28]	@ (8001378 <BSP_LED_Init+0xe4>)
 800135c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	f000 fffe 	bl	8002364 <HAL_GPIO_WritePin>
  }

  return ret;
 8001368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800136a:	4618      	mov	r0, r3
 800136c:	3730      	adds	r7, #48	@ 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	58024400 	.word	0x58024400
 8001378:	08009d44 	.word	0x08009d44
 800137c:	24000010 	.word	0x24000010

08001380 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <BSP_LED_Toggle+0x28>
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d006      	beq.n	80013a8 <BSP_LED_Toggle+0x28>
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d003      	beq.n	80013a8 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013a0:	f06f 0301 	mvn.w	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e00b      	b.n	80013c0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <BSP_LED_Toggle+0x4c>)
 80013ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4907      	ldr	r1, [pc, #28]	@ (80013d0 <BSP_LED_Toggle+0x50>)
 80013b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f000 ffeb 	bl	8002396 <HAL_GPIO_TogglePin>
  }

  return ret;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24000010 	.word	0x24000010
 80013d0:	08009d44 	.word	0x08009d44

080013d4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80013e4:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <BSP_PB_Init+0xcc>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	4a2d      	ldr	r2, [pc, #180]	@ (80014a0 <BSP_PB_Init+0xcc>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f4:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <BSP_PB_Init+0xcc>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001402:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001406:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001408:	2302      	movs	r3, #2
 800140a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a21      	ldr	r2, [pc, #132]	@ (80014a4 <BSP_PB_Init+0xd0>)
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fdeb 	bl	8002004 <HAL_GPIO_Init>
 800142e:	e031      	b.n	8001494 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001430:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001434:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4a1a      	ldr	r2, [pc, #104]	@ (80014a4 <BSP_PB_Init+0xd0>)
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	f107 020c 	add.w	r2, r7, #12
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fddd 	bl	8002004 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4a16      	ldr	r2, [pc, #88]	@ (80014a8 <BSP_PB_Init+0xd4>)
 8001450:	441a      	add	r2, r3
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4915      	ldr	r1, [pc, #84]	@ (80014ac <BSP_PB_Init+0xd8>)
 8001456:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800145a:	4619      	mov	r1, r3
 800145c:	4610      	mov	r0, r2
 800145e:	f000 fd80 	bl	8001f62 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <BSP_PB_Init+0xd4>)
 8001468:	1898      	adds	r0, r3, r2
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	4a10      	ldr	r2, [pc, #64]	@ (80014b0 <BSP_PB_Init+0xdc>)
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	461a      	mov	r2, r3
 8001474:	2100      	movs	r1, #0
 8001476:	f000 fd55 	bl	8001f24 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800147a:	2028      	movs	r0, #40	@ 0x28
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <BSP_PB_Init+0xe0>)
 8001480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	f000 faaf 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800148c:	2328      	movs	r3, #40	@ 0x28
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fac5 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	58024400 	.word	0x58024400
 80014a4:	2400001c 	.word	0x2400001c
 80014a8:	2400019c 	.word	0x2400019c
 80014ac:	08009d4c 	.word	0x08009d4c
 80014b0:	24000020 	.word	0x24000020
 80014b4:	24000024 	.word	0x24000024

080014b8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <BSP_PB_IRQHandler+0x20>)
 80014c8:	4413      	add	r3, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fd5e 	bl	8001f8c <HAL_EXTI_IRQHandler>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2400019c 	.word	0x2400019c

080014dc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800150a:	f06f 0301 	mvn.w	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e018      	b.n	8001544 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2294      	movs	r2, #148	@ 0x94
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <BSP_COM_Init+0x5c>)
 800151c:	4413      	add	r3, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f86e 	bl	8001600 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2294      	movs	r2, #148	@ 0x94
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <BSP_COM_Init+0x5c>)
 800152e:	4413      	add	r3, r2
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f80e 	bl	8001554 <MX_USART3_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800153e:	f06f 0303 	mvn.w	r3, #3
 8001542:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	240001a4 	.word	0x240001a4

08001554 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <MX_USART3_Init+0x60>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	220c      	movs	r2, #12
 8001572:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	895b      	ldrh	r3, [r3, #10]
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	891b      	ldrh	r3, [r3, #8]
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	899b      	ldrh	r3, [r3, #12]
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015a0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f006 fb2f 	bl	8007c06 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2400000c 	.word	0x2400000c

080015b8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80015c0:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <__io_putchar+0x30>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	2394      	movs	r3, #148	@ 0x94
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <__io_putchar+0x34>)
 80015ce:	1898      	adds	r0, r3, r2
 80015d0:	1d39      	adds	r1, r7, #4
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	2201      	movs	r2, #1
 80015d8:	f006 fb6f 	bl	8007cba <HAL_UART_Transmit>
  return ch;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	24000238 	.word	0x24000238
 80015ec:	240001a4 	.word	0x240001a4

080015f0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff ff71 	bl	80014dc <BSP_PB_Callback>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001608:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <COM1_MspInit+0xa8>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160e:	4a26      	ldr	r2, [pc, #152]	@ (80016a8 <COM1_MspInit+0xa8>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001618:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <COM1_MspInit+0xa8>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <COM1_MspInit+0xa8>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	4a1e      	ldr	r2, [pc, #120]	@ (80016a8 <COM1_MspInit+0xa8>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001636:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <COM1_MspInit+0xa8>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <COM1_MspInit+0xa8>)
 8001646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800164a:	4a17      	ldr	r2, [pc, #92]	@ (80016a8 <COM1_MspInit+0xa8>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001650:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <COM1_MspInit+0xa8>)
 8001656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800165a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001666:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800166c:	2302      	movs	r3, #2
 800166e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001674:	2307      	movs	r3, #7
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	480b      	ldr	r0, [pc, #44]	@ (80016ac <COM1_MspInit+0xac>)
 8001680:	f000 fcc0 	bl	8002004 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001684:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001688:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800168e:	2307      	movs	r3, #7
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <COM1_MspInit+0xac>)
 800169a:	f000 fcb3 	bl	8002004 <HAL_GPIO_Init>
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	@ 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58020c00 	.word	0x58020c00

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b6:	2003      	movs	r0, #3
 80016b8:	f000 f98c 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016bc:	f003 fc5e 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_Init+0x68>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	4913      	ldr	r1, [pc, #76]	@ (800171c <HAL_Init+0x6c>)
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <HAL_Init+0x68>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <HAL_Init+0x6c>)
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
 80016f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001720 <HAL_Init+0x70>)
 80016f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <HAL_Init+0x74>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 f814 	bl	8001728 <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e002      	b.n	8001710 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800170a:	f7ff fb9b 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	58024400 	.word	0x58024400
 800171c:	08009d34 	.word	0x08009d34
 8001720:	24000004 	.word	0x24000004
 8001724:	24000000 	.word	0x24000000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_InitTick+0x60>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e021      	b.n	8001780 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <HAL_InitTick+0x64>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <HAL_InitTick+0x60>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f971 	bl	8001a3a <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001770:	f000 f93b 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	@ (8001790 <HAL_InitTick+0x68>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2400002c 	.word	0x2400002c
 800178c:	24000000 	.word	0x24000000
 8001790:	24000028 	.word	0x24000028

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	2400002c 	.word	0x2400002c
 80017b8:	2400023c 	.word	0x2400023c

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2400023c 	.word	0x2400023c

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2400002c 	.word	0x2400002c

0800181c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetREVID+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0c1b      	lsrs	r3, r3, #16
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	5c001000 	.word	0x5c001000

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <__NVIC_SetPriorityGrouping+0x40>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	4313      	orrs	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <__NVIC_SetPriorityGrouping+0x40>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00
 8001878:	05fa0000 	.word	0x05fa0000

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	@ (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	@ (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	@ (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	@ 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	@ 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff40 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff90 	bl	8001928 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5f 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff33 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa4 	bl	8001990 <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <HAL_GetCurrentCPUID+0x24>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	2b07      	cmp	r3, #7
 8001a64:	d101      	bne.n	8001a6a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e000      	b.n	8001a6c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001a6a:	2301      	movs	r3, #1
  }
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e237      	b.n	8001efe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d004      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2280      	movs	r2, #128	@ 0x80
 8001a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e22c      	b.n	8001efe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a5c      	ldr	r2, [pc, #368]	@ (8001c1c <HAL_DMA_Abort_IT+0x1a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d04a      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c20 <HAL_DMA_Abort_IT+0x1a4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d045      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a59      	ldr	r2, [pc, #356]	@ (8001c24 <HAL_DMA_Abort_IT+0x1a8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d040      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a58      	ldr	r2, [pc, #352]	@ (8001c28 <HAL_DMA_Abort_IT+0x1ac>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d03b      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a56      	ldr	r2, [pc, #344]	@ (8001c2c <HAL_DMA_Abort_IT+0x1b0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d036      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a55      	ldr	r2, [pc, #340]	@ (8001c30 <HAL_DMA_Abort_IT+0x1b4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d031      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a53      	ldr	r2, [pc, #332]	@ (8001c34 <HAL_DMA_Abort_IT+0x1b8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d02c      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a52      	ldr	r2, [pc, #328]	@ (8001c38 <HAL_DMA_Abort_IT+0x1bc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d027      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a50      	ldr	r2, [pc, #320]	@ (8001c3c <HAL_DMA_Abort_IT+0x1c0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d022      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4f      	ldr	r2, [pc, #316]	@ (8001c40 <HAL_DMA_Abort_IT+0x1c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d01d      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c44 <HAL_DMA_Abort_IT+0x1c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d018      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a4c      	ldr	r2, [pc, #304]	@ (8001c48 <HAL_DMA_Abort_IT+0x1cc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d013      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a4a      	ldr	r2, [pc, #296]	@ (8001c4c <HAL_DMA_Abort_IT+0x1d0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00e      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a49      	ldr	r2, [pc, #292]	@ (8001c50 <HAL_DMA_Abort_IT+0x1d4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d009      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a47      	ldr	r2, [pc, #284]	@ (8001c54 <HAL_DMA_Abort_IT+0x1d8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_DMA_Abort_IT+0xc8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a46      	ldr	r2, [pc, #280]	@ (8001c58 <HAL_DMA_Abort_IT+0x1dc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_DMA_Abort_IT+0xcc>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_DMA_Abort_IT+0xce>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8086 	beq.w	8001c5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2204      	movs	r2, #4
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c1c <HAL_DMA_Abort_IT+0x1a0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d04a      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2e      	ldr	r2, [pc, #184]	@ (8001c20 <HAL_DMA_Abort_IT+0x1a4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d045      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2c      	ldr	r2, [pc, #176]	@ (8001c24 <HAL_DMA_Abort_IT+0x1a8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d040      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001c28 <HAL_DMA_Abort_IT+0x1ac>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d03b      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a29      	ldr	r2, [pc, #164]	@ (8001c2c <HAL_DMA_Abort_IT+0x1b0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d036      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a28      	ldr	r2, [pc, #160]	@ (8001c30 <HAL_DMA_Abort_IT+0x1b4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d031      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a26      	ldr	r2, [pc, #152]	@ (8001c34 <HAL_DMA_Abort_IT+0x1b8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02c      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a25      	ldr	r2, [pc, #148]	@ (8001c38 <HAL_DMA_Abort_IT+0x1bc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d027      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <HAL_DMA_Abort_IT+0x1c0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d022      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a22      	ldr	r2, [pc, #136]	@ (8001c40 <HAL_DMA_Abort_IT+0x1c4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d01d      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a20      	ldr	r2, [pc, #128]	@ (8001c44 <HAL_DMA_Abort_IT+0x1c8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d018      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1f      	ldr	r2, [pc, #124]	@ (8001c48 <HAL_DMA_Abort_IT+0x1cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d013      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c4c <HAL_DMA_Abort_IT+0x1d0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <HAL_DMA_Abort_IT+0x1d4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c54 <HAL_DMA_Abort_IT+0x1d8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0x17c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <HAL_DMA_Abort_IT+0x1dc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d108      	bne.n	8001c0a <HAL_DMA_Abort_IT+0x18e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e178      	b.n	8001efc <HAL_DMA_Abort_IT+0x480>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e16f      	b.n	8001efc <HAL_DMA_Abort_IT+0x480>
 8001c1c:	40020010 	.word	0x40020010
 8001c20:	40020028 	.word	0x40020028
 8001c24:	40020040 	.word	0x40020040
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	40020070 	.word	0x40020070
 8001c30:	40020088 	.word	0x40020088
 8001c34:	400200a0 	.word	0x400200a0
 8001c38:	400200b8 	.word	0x400200b8
 8001c3c:	40020410 	.word	0x40020410
 8001c40:	40020428 	.word	0x40020428
 8001c44:	40020440 	.word	0x40020440
 8001c48:	40020458 	.word	0x40020458
 8001c4c:	40020470 	.word	0x40020470
 8001c50:	40020488 	.word	0x40020488
 8001c54:	400204a0 	.word	0x400204a0
 8001c58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020e 	bic.w	r2, r2, #14
 8001c6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6c      	ldr	r2, [pc, #432]	@ (8001e24 <HAL_DMA_Abort_IT+0x3a8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04a      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6b      	ldr	r2, [pc, #428]	@ (8001e28 <HAL_DMA_Abort_IT+0x3ac>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d045      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a69      	ldr	r2, [pc, #420]	@ (8001e2c <HAL_DMA_Abort_IT+0x3b0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d040      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a68      	ldr	r2, [pc, #416]	@ (8001e30 <HAL_DMA_Abort_IT+0x3b4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d03b      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a66      	ldr	r2, [pc, #408]	@ (8001e34 <HAL_DMA_Abort_IT+0x3b8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a65      	ldr	r2, [pc, #404]	@ (8001e38 <HAL_DMA_Abort_IT+0x3bc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d031      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a63      	ldr	r2, [pc, #396]	@ (8001e3c <HAL_DMA_Abort_IT+0x3c0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02c      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a62      	ldr	r2, [pc, #392]	@ (8001e40 <HAL_DMA_Abort_IT+0x3c4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d027      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a60      	ldr	r2, [pc, #384]	@ (8001e44 <HAL_DMA_Abort_IT+0x3c8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d022      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a5f      	ldr	r2, [pc, #380]	@ (8001e48 <HAL_DMA_Abort_IT+0x3cc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d01d      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e4c <HAL_DMA_Abort_IT+0x3d0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d018      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a5c      	ldr	r2, [pc, #368]	@ (8001e50 <HAL_DMA_Abort_IT+0x3d4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8001e54 <HAL_DMA_Abort_IT+0x3d8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a59      	ldr	r2, [pc, #356]	@ (8001e58 <HAL_DMA_Abort_IT+0x3dc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a57      	ldr	r2, [pc, #348]	@ (8001e5c <HAL_DMA_Abort_IT+0x3e0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x290>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a56      	ldr	r2, [pc, #344]	@ (8001e60 <HAL_DMA_Abort_IT+0x3e4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d108      	bne.n	8001d1e <HAL_DMA_Abort_IT+0x2a2>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e007      	b.n	8001d2e <HAL_DMA_Abort_IT+0x2b2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a3c      	ldr	r2, [pc, #240]	@ (8001e24 <HAL_DMA_Abort_IT+0x3a8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d072      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e28 <HAL_DMA_Abort_IT+0x3ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d06d      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a39      	ldr	r2, [pc, #228]	@ (8001e2c <HAL_DMA_Abort_IT+0x3b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d068      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a37      	ldr	r2, [pc, #220]	@ (8001e30 <HAL_DMA_Abort_IT+0x3b4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d063      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a36      	ldr	r2, [pc, #216]	@ (8001e34 <HAL_DMA_Abort_IT+0x3b8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a34      	ldr	r2, [pc, #208]	@ (8001e38 <HAL_DMA_Abort_IT+0x3bc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d059      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a33      	ldr	r2, [pc, #204]	@ (8001e3c <HAL_DMA_Abort_IT+0x3c0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d054      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a31      	ldr	r2, [pc, #196]	@ (8001e40 <HAL_DMA_Abort_IT+0x3c4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d04f      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a30      	ldr	r2, [pc, #192]	@ (8001e44 <HAL_DMA_Abort_IT+0x3c8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d04a      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e48 <HAL_DMA_Abort_IT+0x3cc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d045      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2d      	ldr	r2, [pc, #180]	@ (8001e4c <HAL_DMA_Abort_IT+0x3d0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d040      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e50 <HAL_DMA_Abort_IT+0x3d4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d03b      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2a      	ldr	r2, [pc, #168]	@ (8001e54 <HAL_DMA_Abort_IT+0x3d8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d036      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <HAL_DMA_Abort_IT+0x3dc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d031      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <HAL_DMA_Abort_IT+0x3e0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d02c      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a25      	ldr	r2, [pc, #148]	@ (8001e60 <HAL_DMA_Abort_IT+0x3e4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d027      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a24      	ldr	r2, [pc, #144]	@ (8001e64 <HAL_DMA_Abort_IT+0x3e8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d022      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a22      	ldr	r2, [pc, #136]	@ (8001e68 <HAL_DMA_Abort_IT+0x3ec>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01d      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a21      	ldr	r2, [pc, #132]	@ (8001e6c <HAL_DMA_Abort_IT+0x3f0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d018      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e70 <HAL_DMA_Abort_IT+0x3f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <HAL_DMA_Abort_IT+0x3f8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00e      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <HAL_DMA_Abort_IT+0x3fc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e7c <HAL_DMA_Abort_IT+0x400>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x3a2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_DMA_Abort_IT+0x404>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d132      	bne.n	8001e84 <HAL_DMA_Abort_IT+0x408>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e031      	b.n	8001e86 <HAL_DMA_Abort_IT+0x40a>
 8001e22:	bf00      	nop
 8001e24:	40020010 	.word	0x40020010
 8001e28:	40020028 	.word	0x40020028
 8001e2c:	40020040 	.word	0x40020040
 8001e30:	40020058 	.word	0x40020058
 8001e34:	40020070 	.word	0x40020070
 8001e38:	40020088 	.word	0x40020088
 8001e3c:	400200a0 	.word	0x400200a0
 8001e40:	400200b8 	.word	0x400200b8
 8001e44:	40020410 	.word	0x40020410
 8001e48:	40020428 	.word	0x40020428
 8001e4c:	40020440 	.word	0x40020440
 8001e50:	40020458 	.word	0x40020458
 8001e54:	40020470 	.word	0x40020470
 8001e58:	40020488 	.word	0x40020488
 8001e5c:	400204a0 	.word	0x400204a0
 8001e60:	400204b8 	.word	0x400204b8
 8001e64:	58025408 	.word	0x58025408
 8001e68:	5802541c 	.word	0x5802541c
 8001e6c:	58025430 	.word	0x58025430
 8001e70:	58025444 	.word	0x58025444
 8001e74:	58025458 	.word	0x58025458
 8001e78:	5802546c 	.word	0x5802546c
 8001e7c:	58025480 	.word	0x58025480
 8001e80:	58025494 	.word	0x58025494
 8001e84:	2300      	movs	r3, #0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d028      	beq.n	8001edc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001eb8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ecc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ed0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001eda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f16:	b2db      	uxtb	r3, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e00a      	b.n	8001f56 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	605a      	str	r2, [r3, #4]
      break;
 8001f4c:	e002      	b.n	8001f54 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
      break;
 8001f52:	bf00      	nop
  }

  return status;
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e003      	b.n	8001f7e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2201      	movs	r2, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001fb0:	f7ff fd50 	bl	8001a54 <HAL_GetCurrentCPUID>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d105      	bne.n	8001fc6 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	011a      	lsls	r2, r3, #4
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_EXTI_IRQHandler+0x70>)
 8001fc0:	4413      	add	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e004      	b.n	8001fd0 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	011a      	lsls	r2, r3, #4
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_EXTI_IRQHandler+0x74>)
 8001fcc:	4413      	add	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4798      	blx	r3
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	58000088 	.word	0x58000088
 8002000:	580000c8 	.word	0x580000c8

08002004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	@ 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002012:	4b89      	ldr	r3, [pc, #548]	@ (8002238 <HAL_GPIO_Init+0x234>)
 8002014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002016:	e194      	b.n	8002342 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8186 	beq.w	800233c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d005      	beq.n	8002048 <HAL_GPIO_Init+0x44>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d130      	bne.n	80020aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800207e:	2201      	movs	r2, #1
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 0201 	and.w	r2, r3, #1
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d017      	beq.n	80020e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d123      	bne.n	800213a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	08da      	lsrs	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	69b9      	ldr	r1, [r7, #24]
 8002136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2203      	movs	r2, #3
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0203 	and.w	r2, r3, #3
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80e0 	beq.w	800233c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217c:	4b2f      	ldr	r3, [pc, #188]	@ (800223c <HAL_GPIO_Init+0x238>)
 800217e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002182:	4a2e      	ldr	r2, [pc, #184]	@ (800223c <HAL_GPIO_Init+0x238>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800218c:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <HAL_GPIO_Init+0x238>)
 800218e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219a:	4a29      	ldr	r2, [pc, #164]	@ (8002240 <HAL_GPIO_Init+0x23c>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a20      	ldr	r2, [pc, #128]	@ (8002244 <HAL_GPIO_Init+0x240>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d052      	beq.n	800226c <HAL_GPIO_Init+0x268>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002248 <HAL_GPIO_Init+0x244>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d031      	beq.n	8002232 <HAL_GPIO_Init+0x22e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <HAL_GPIO_Init+0x248>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d02b      	beq.n	800222e <HAL_GPIO_Init+0x22a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <HAL_GPIO_Init+0x24c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d025      	beq.n	800222a <HAL_GPIO_Init+0x226>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002254 <HAL_GPIO_Init+0x250>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01f      	beq.n	8002226 <HAL_GPIO_Init+0x222>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002258 <HAL_GPIO_Init+0x254>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_GPIO_Init+0x21e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1a      	ldr	r2, [pc, #104]	@ (800225c <HAL_GPIO_Init+0x258>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x21a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a19      	ldr	r2, [pc, #100]	@ (8002260 <HAL_GPIO_Init+0x25c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x216>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a18      	ldr	r2, [pc, #96]	@ (8002264 <HAL_GPIO_Init+0x260>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x212>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_GPIO_Init+0x264>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x20e>
 800220e:	2309      	movs	r3, #9
 8002210:	e02d      	b.n	800226e <HAL_GPIO_Init+0x26a>
 8002212:	230a      	movs	r3, #10
 8002214:	e02b      	b.n	800226e <HAL_GPIO_Init+0x26a>
 8002216:	2308      	movs	r3, #8
 8002218:	e029      	b.n	800226e <HAL_GPIO_Init+0x26a>
 800221a:	2307      	movs	r3, #7
 800221c:	e027      	b.n	800226e <HAL_GPIO_Init+0x26a>
 800221e:	2306      	movs	r3, #6
 8002220:	e025      	b.n	800226e <HAL_GPIO_Init+0x26a>
 8002222:	2305      	movs	r3, #5
 8002224:	e023      	b.n	800226e <HAL_GPIO_Init+0x26a>
 8002226:	2304      	movs	r3, #4
 8002228:	e021      	b.n	800226e <HAL_GPIO_Init+0x26a>
 800222a:	2303      	movs	r3, #3
 800222c:	e01f      	b.n	800226e <HAL_GPIO_Init+0x26a>
 800222e:	2302      	movs	r3, #2
 8002230:	e01d      	b.n	800226e <HAL_GPIO_Init+0x26a>
 8002232:	2301      	movs	r3, #1
 8002234:	e01b      	b.n	800226e <HAL_GPIO_Init+0x26a>
 8002236:	bf00      	nop
 8002238:	58000080 	.word	0x58000080
 800223c:	58024400 	.word	0x58024400
 8002240:	58000400 	.word	0x58000400
 8002244:	58020000 	.word	0x58020000
 8002248:	58020400 	.word	0x58020400
 800224c:	58020800 	.word	0x58020800
 8002250:	58020c00 	.word	0x58020c00
 8002254:	58021000 	.word	0x58021000
 8002258:	58021400 	.word	0x58021400
 800225c:	58021800 	.word	0x58021800
 8002260:	58021c00 	.word	0x58021c00
 8002264:	58022000 	.word	0x58022000
 8002268:	58022400 	.word	0x58022400
 800226c:	2300      	movs	r3, #0
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	f002 0203 	and.w	r2, r2, #3
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	4093      	lsls	r3, r2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227e:	4938      	ldr	r1, [pc, #224]	@ (8002360 <HAL_GPIO_Init+0x35c>)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3302      	adds	r3, #2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	3301      	adds	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f ae63 	bne.w	8002018 <HAL_GPIO_Init+0x14>
  }
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	3724      	adds	r7, #36	@ 0x24
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	58000400 	.word	0x58000400

08002364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002380:	e003      	b.n	800238a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002396:	b480      	push	{r7}
 8002398:	b085      	sub	sp, #20
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	041a      	lsls	r2, r3, #16
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	400b      	ands	r3, r1
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80023d4:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <HAL_HSEM_FastTake+0x2c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3320      	adds	r3, #32
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	4a07      	ldr	r2, [pc, #28]	@ (80023fc <HAL_HSEM_FastTake+0x30>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	58026400 	.word	0x58026400
 80023fc:	80000300 	.word	0x80000300

08002400 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800240a:	4906      	ldr	r1, [pc, #24]	@ (8002424 <HAL_HSEM_Release+0x24>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	58026400 	.word	0x58026400

08002428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e08b      	b.n	8002552 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fd12 	bl	8000e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2224      	movs	r2, #36	@ 0x24
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002478:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002488:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d107      	bne.n	80024a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e006      	b.n	80024b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80024ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d108      	bne.n	80024ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	e007      	b.n	80024da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <HAL_I2C_Init+0x134>)
 80024e6:	430b      	orrs	r3, r1
 80024e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69d9      	ldr	r1, [r3, #28]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	02008000 	.word	0x02008000

08002560 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800257c:	2b28      	cmp	r3, #40	@ 0x28
 800257e:	f040 8098 	bne.w	80026b2 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e08c      	b.n	80026b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800259a:	f248 0101 	movw	r1, #32769	@ 0x8001
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f001 fd8c 	bl	80040bc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e080      	b.n	80026b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80025c4:	d12a      	bne.n	800261c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025c6:	2102      	movs	r1, #2
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f001 fd77 	bl	80040bc <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025dc:	d11e      	bne.n	800261c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025ec:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fa:	4a30      	ldr	r2, [pc, #192]	@ (80026bc <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80025fc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fa3a 	bl	8001a7c <HAL_DMA_Abort_IT>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002618:	4610      	mov	r0, r2
 800261a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2229      	movs	r2, #41	@ 0x29
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002640:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a17      	ldr	r2, [pc, #92]	@ (80026c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8002662:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b08      	cmp	r3, #8
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d106      	bne.n	800269c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2208      	movs	r2, #8
 800269a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80026a4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f001 fc83 	bl	8003fb4 <I2C_Enable_IRQ>

    return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	08003f13 	.word	0x08003f13
 80026c0:	080029b7 	.word	0x080029b7

080026c4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80026e0:	2b28      	cmp	r3, #40	@ 0x28
 80026e2:	f040 8098 	bne.w	8002816 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e08c      	b.n	8002818 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80026fe:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f001 fcda 	bl	80040bc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8002712:	2302      	movs	r3, #2
 8002714:	e080      	b.n	8002818 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b29      	cmp	r3, #41	@ 0x29
 8002728:	d12a      	bne.n	8002780 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800272a:	2101      	movs	r1, #1
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f001 fcc5 	bl	80040bc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800273c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002740:	d11e      	bne.n	8002780 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002750:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002756:	2b00      	cmp	r3, #0
 8002758:	d012      	beq.n	8002780 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275e:	4a30      	ldr	r2, [pc, #192]	@ (8002820 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8002760:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff f988 	bl	8001a7c <HAL_DMA_Abort_IT>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800277c:	4610      	mov	r0, r2
 800277e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	222a      	movs	r2, #42	@ 0x2a
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027a4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2208      	movs	r2, #8
 80027fe:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002808:	f248 0102 	movw	r1, #32770	@ 0x8002
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f001 fbd1 	bl	8003fb4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	08003f13 	.word	0x08003f13
 8002824:	080029b7 	.word	0x080029b7

08002828 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	d10d      	bne.n	8002858 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2228      	movs	r2, #40	@ 0x28
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <HAL_I2C_EnableListen_IT+0x3c>)
 8002848:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800284a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f001 fbb0 	bl	8003fb4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	080029b7 	.word	0x080029b7

08002868 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
  }
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00f      	beq.n	80028de <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028dc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00f      	beq.n	8002908 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f043 0208 	orr.w	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002906:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00f      	beq.n	8002932 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002920:	f043 0202 	orr.w	r2, r3, #2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002930:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 030b 	and.w	r3, r3, #11
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002942:	68f9      	ldr	r1, [r7, #12]
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f001 f9a9 	bl	8003c9c <I2C_ITError>
  }
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <I2C_Slave_ISR_IT+0x24>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0e2      	b.n	8002ba0 <I2C_Slave_ISR_IT+0x1ea>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80029f6:	6939      	ldr	r1, [r7, #16]
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fea7 	bl	800374c <I2C_ITSlaveCplt>
 80029fe:	e0ca      	b.n	8002b96 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d04b      	beq.n	8002aa2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d046      	beq.n	8002aa2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d128      	bne.n	8002a70 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b28      	cmp	r3, #40	@ 0x28
 8002a28:	d108      	bne.n	8002a3c <I2C_Slave_ISR_IT+0x86>
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a30:	d104      	bne.n	8002a3c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a32:	6939      	ldr	r1, [r7, #16]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f001 f8dd 	bl	8003bf4 <I2C_ITListenCplt>
 8002a3a:	e031      	b.n	8002aa0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b29      	cmp	r3, #41	@ 0x29
 8002a46:	d10e      	bne.n	8002a66 <I2C_Slave_ISR_IT+0xb0>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a4e:	d00a      	beq.n	8002a66 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f001 fa36 	bl	8003eca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fd4f 	bl	8003502 <I2C_ITSlaveSeqCplt>
 8002a64:	e01c      	b.n	8002aa0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002a6e:	e08f      	b.n	8002b90 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2210      	movs	r2, #16
 8002a76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	f043 0204 	orr.w	r2, r3, #4
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <I2C_Slave_ISR_IT+0xdc>
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a90:	d17e      	bne.n	8002b90 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	4619      	mov	r1, r3
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f001 f8ff 	bl	8003c9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a9e:	e077      	b.n	8002b90 <I2C_Slave_ISR_IT+0x1da>
 8002aa0:	e076      	b.n	8002b90 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d02f      	beq.n	8002b0c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d02a      	beq.n	8002b0c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d018      	beq.n	8002af2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d14b      	bne.n	8002b94 <I2C_Slave_ISR_IT+0x1de>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b02:	d047      	beq.n	8002b94 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fcfc 	bl	8003502 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b0a:	e043      	b.n	8002b94 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b20:	6939      	ldr	r1, [r7, #16]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fc2c 	bl	8003380 <I2C_ITAddrCplt>
 8002b28:	e035      	b.n	8002b96 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d030      	beq.n	8002b96 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d02b      	beq.n	8002b96 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b78:	e00d      	b.n	8002b96 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b80:	d002      	beq.n	8002b88 <I2C_Slave_ISR_IT+0x1d2>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fcba 	bl	8003502 <I2C_ITSlaveSeqCplt>
 8002b8e:	e002      	b.n	8002b96 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002b90:	bf00      	nop
 8002b92:	e000      	b.n	8002b96 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002b94:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <I2C_Master_ISR_DMA+0x1a>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0d9      	b.n	8002d76 <I2C_Master_ISR_DMA+0x1ce>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d016      	beq.n	8002c02 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2210      	movs	r2, #16
 8002be4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	f043 0204 	orr.w	r2, r3, #4
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f001 f9dd 	bl	8003fb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f001 f965 	bl	8003eca <I2C_Flush_TXDR>
 8002c00:	e0b4      	b.n	8002d6c <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d071      	beq.n	8002cf0 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d06c      	beq.n	8002cf0 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c24:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d04e      	beq.n	8002cce <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c3c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2bff      	cmp	r3, #255	@ 0xff
 8002c46:	d906      	bls.n	8002c56 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	22ff      	movs	r2, #255	@ 0xff
 8002c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002c4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e010      	b.n	8002c78 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c68:	d003      	beq.n	8002c72 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e002      	b.n	8002c78 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002c72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c76:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	8a79      	ldrh	r1, [r7, #18]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f001 f962 	bl	8003f50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b22      	cmp	r3, #34	@ 0x22
 8002ca8:	d108      	bne.n	8002cbc <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cb8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002cba:	e057      	b.n	8002d6c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ccc:	e04e      	b.n	8002d6c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cdc:	d003      	beq.n	8002ce6 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fbd2 	bl	8003488 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002ce4:	e042      	b.n	8002d6c <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ce6:	2140      	movs	r1, #64	@ 0x40
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 ffd7 	bl	8003c9c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002cee:	e03d      	b.n	8002d6c <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d028      	beq.n	8002d4c <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d023      	beq.n	8002d4c <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d119      	bne.n	8002d42 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d1c:	d025      	beq.n	8002d6a <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d26:	d108      	bne.n	8002d3a <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d36:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002d38:	e017      	b.n	8002d6a <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fba4 	bl	8003488 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002d40:	e013      	b.n	8002d6a <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d42:	2140      	movs	r1, #64	@ 0x40
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 ffa9 	bl	8003c9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d4a:	e00e      	b.n	8002d6a <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fc2a 	bl	80035bc <I2C_ITMasterCplt>
 8002d68:	e000      	b.n	8002d6c <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002d6a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002d8c:	4b8d      	ldr	r3, [pc, #564]	@ (8002fc4 <I2C_Mem_ISR_DMA+0x244>)
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <I2C_Mem_ISR_DMA+0x1e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e10e      	b.n	8002fbc <I2C_Mem_ISR_DMA+0x23c>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d016      	beq.n	8002dde <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d011      	beq.n	8002dde <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	f043 0204 	orr.w	r2, r3, #4
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002dce:	2120      	movs	r1, #32
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f001 f8ef 	bl	8003fb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f001 f877 	bl	8003eca <I2C_Flush_TXDR>
 8002ddc:	e0e9      	b.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00e      	beq.n	8002e06 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dfa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e02:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e04:	e0d5      	b.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d05f      	beq.n	8002ed0 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d05a      	beq.n	8002ed0 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f001 f94d 	bl	80040bc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002e22:	2110      	movs	r1, #16
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f001 f8c5 	bl	8003fb4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d048      	beq.n	8002ec6 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2bff      	cmp	r3, #255	@ 0xff
 8002e3c:	d910      	bls.n	8002e60 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22ff      	movs	r2, #255	@ 0xff
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e48:	b299      	uxth	r1, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	2300      	movs	r3, #0
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f001 f879 	bl	8003f50 <I2C_TransferConfig>
 8002e5e:	e011      	b.n	8002e84 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6e:	b299      	uxth	r1, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 f866 	bl	8003f50 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b22      	cmp	r3, #34	@ 0x22
 8002ea0:	d108      	bne.n	8002eb4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002eb2:	e07e      	b.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ec2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ec4:	e075      	b.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ec6:	2140      	movs	r1, #64	@ 0x40
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fee7 	bl	8003c9c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ece:	e070      	b.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d05d      	beq.n	8002f96 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d058      	beq.n	8002f96 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f001 f8e8 	bl	80040bc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002eec:	2110      	movs	r1, #16
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f001 f860 	bl	8003fb4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b22      	cmp	r3, #34	@ 0x22
 8002efe:	d101      	bne.n	8002f04 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002f00:	4b31      	ldr	r3, [pc, #196]	@ (8002fc8 <I2C_Mem_ISR_DMA+0x248>)
 8002f02:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2bff      	cmp	r3, #255	@ 0xff
 8002f0c:	d910      	bls.n	8002f30 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	22ff      	movs	r2, #255	@ 0xff
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f18:	b299      	uxth	r1, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f001 f811 	bl	8003f50 <I2C_TransferConfig>
 8002f2e:	e011      	b.n	8002f54 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3e:	b299      	uxth	r1, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fffe 	bl	8003f50 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b22      	cmp	r3, #34	@ 0x22
 8002f70:	d108      	bne.n	8002f84 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f80:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f82:	e016      	b.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f92:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f94:	e00d      	b.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fb05 	bl	80035bc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	80002000 	.word	0x80002000
 8002fc8:	80002400 	.word	0x80002400

08002fcc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <I2C_Slave_ISR_DMA+0x24>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e1c2      	b.n	8003376 <I2C_Slave_ISR_DMA+0x3aa>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fb9c 	bl	800374c <I2C_ITSlaveCplt>
 8003014:	e1aa      	b.n	800336c <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8197 	beq.w	8003350 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8191 	beq.w	8003350 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 817f 	beq.w	8003342 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d07b      	beq.n	8003144 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d076      	beq.n	8003144 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a74      	ldr	r2, [pc, #464]	@ (8003230 <I2C_Slave_ISR_DMA+0x264>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d059      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a72      	ldr	r2, [pc, #456]	@ (8003234 <I2C_Slave_ISR_DMA+0x268>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d053      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a70      	ldr	r2, [pc, #448]	@ (8003238 <I2C_Slave_ISR_DMA+0x26c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d04d      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6e      	ldr	r2, [pc, #440]	@ (800323c <I2C_Slave_ISR_DMA+0x270>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d047      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6c      	ldr	r2, [pc, #432]	@ (8003240 <I2C_Slave_ISR_DMA+0x274>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d041      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6a      	ldr	r2, [pc, #424]	@ (8003244 <I2C_Slave_ISR_DMA+0x278>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d03b      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a68      	ldr	r2, [pc, #416]	@ (8003248 <I2C_Slave_ISR_DMA+0x27c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d035      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a66      	ldr	r2, [pc, #408]	@ (800324c <I2C_Slave_ISR_DMA+0x280>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d02f      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a64      	ldr	r2, [pc, #400]	@ (8003250 <I2C_Slave_ISR_DMA+0x284>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d029      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a62      	ldr	r2, [pc, #392]	@ (8003254 <I2C_Slave_ISR_DMA+0x288>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d023      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a60      	ldr	r2, [pc, #384]	@ (8003258 <I2C_Slave_ISR_DMA+0x28c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01d      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5e      	ldr	r2, [pc, #376]	@ (800325c <I2C_Slave_ISR_DMA+0x290>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d017      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003260 <I2C_Slave_ISR_DMA+0x294>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d011      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003264 <I2C_Slave_ISR_DMA+0x298>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a58      	ldr	r2, [pc, #352]	@ (8003268 <I2C_Slave_ISR_DMA+0x29c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d005      	beq.n	8003116 <I2C_Slave_ISR_DMA+0x14a>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a56      	ldr	r2, [pc, #344]	@ (800326c <I2C_Slave_ISR_DMA+0x2a0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d109      	bne.n	800312a <I2C_Slave_ISR_DMA+0x15e>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	e008      	b.n	800313c <I2C_Slave_ISR_DMA+0x170>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8003140:	2301      	movs	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 809e 	beq.w	800328a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8098 	beq.w	800328a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a33      	ldr	r2, [pc, #204]	@ (8003230 <I2C_Slave_ISR_DMA+0x264>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d059      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a31      	ldr	r2, [pc, #196]	@ (8003234 <I2C_Slave_ISR_DMA+0x268>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d053      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2f      	ldr	r2, [pc, #188]	@ (8003238 <I2C_Slave_ISR_DMA+0x26c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d04d      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2d      	ldr	r2, [pc, #180]	@ (800323c <I2C_Slave_ISR_DMA+0x270>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d047      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2b      	ldr	r2, [pc, #172]	@ (8003240 <I2C_Slave_ISR_DMA+0x274>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d041      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a29      	ldr	r2, [pc, #164]	@ (8003244 <I2C_Slave_ISR_DMA+0x278>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03b      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a27      	ldr	r2, [pc, #156]	@ (8003248 <I2C_Slave_ISR_DMA+0x27c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d035      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a25      	ldr	r2, [pc, #148]	@ (800324c <I2C_Slave_ISR_DMA+0x280>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02f      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a23      	ldr	r2, [pc, #140]	@ (8003250 <I2C_Slave_ISR_DMA+0x284>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d029      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <I2C_Slave_ISR_DMA+0x288>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d023      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003258 <I2C_Slave_ISR_DMA+0x28c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <I2C_Slave_ISR_DMA+0x290>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d017      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003260 <I2C_Slave_ISR_DMA+0x294>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d011      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a19      	ldr	r2, [pc, #100]	@ (8003264 <I2C_Slave_ISR_DMA+0x298>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00b      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a17      	ldr	r2, [pc, #92]	@ (8003268 <I2C_Slave_ISR_DMA+0x29c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d005      	beq.n	800321a <I2C_Slave_ISR_DMA+0x24e>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	@ (800326c <I2C_Slave_ISR_DMA+0x2a0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d12a      	bne.n	8003270 <I2C_Slave_ISR_DMA+0x2a4>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e029      	b.n	8003282 <I2C_Slave_ISR_DMA+0x2b6>
 800322e:	bf00      	nop
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8003286:	2301      	movs	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d128      	bne.n	80032e2 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b28      	cmp	r3, #40	@ 0x28
 800329a:	d108      	bne.n	80032ae <I2C_Slave_ISR_DMA+0x2e2>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032a2:	d104      	bne.n	80032ae <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fca4 	bl	8003bf4 <I2C_ITListenCplt>
 80032ac:	e048      	b.n	8003340 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b29      	cmp	r3, #41	@ 0x29
 80032b8:	d10e      	bne.n	80032d8 <I2C_Slave_ISR_DMA+0x30c>
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032c0:	d00a      	beq.n	80032d8 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fdfd 	bl	8003eca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f916 	bl	8003502 <I2C_ITSlaveSeqCplt>
 80032d6:	e033      	b.n	8003340 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2210      	movs	r2, #16
 80032de:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80032e0:	e034      	b.n	800334c <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2210      	movs	r2, #16
 80032e8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <I2C_Slave_ISR_DMA+0x340>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800330a:	d11f      	bne.n	800334c <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b21      	cmp	r3, #33	@ 0x21
 8003310:	d002      	beq.n	8003318 <I2C_Slave_ISR_DMA+0x34c>
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b29      	cmp	r3, #41	@ 0x29
 8003316:	d103      	bne.n	8003320 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2221      	movs	r2, #33	@ 0x21
 800331c:	631a      	str	r2, [r3, #48]	@ 0x30
 800331e:	e008      	b.n	8003332 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b22      	cmp	r3, #34	@ 0x22
 8003324:	d002      	beq.n	800332c <I2C_Slave_ISR_DMA+0x360>
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	2b2a      	cmp	r3, #42	@ 0x2a
 800332a:	d102      	bne.n	8003332 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2222      	movs	r2, #34	@ 0x22
 8003330:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	4619      	mov	r1, r3
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fcaf 	bl	8003c9c <I2C_ITError>
      if (treatdmanack == 1U)
 800333e:	e005      	b.n	800334c <I2C_Slave_ISR_DMA+0x380>
 8003340:	e004      	b.n	800334c <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2210      	movs	r2, #16
 8003348:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800334a:	e00f      	b.n	800336c <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800334c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800334e:	e00d      	b.n	800336c <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f80a 	bl	8003380 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop

08003380 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003396:	2b28      	cmp	r3, #40	@ 0x28
 8003398:	d16a      	bne.n	8003470 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80033b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80033d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d138      	bne.n	8003450 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80033de:	897b      	ldrh	r3, [r7, #10]
 80033e0:	09db      	lsrs	r3, r3, #7
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	89bb      	ldrh	r3, [r7, #12]
 80033e6:	4053      	eors	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f003 0306 	and.w	r3, r3, #6
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d11c      	bne.n	800342c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80033f2:	897b      	ldrh	r3, [r7, #10]
 80033f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003404:	2b02      	cmp	r3, #2
 8003406:	d13b      	bne.n	8003480 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2208      	movs	r2, #8
 8003414:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800341e:	89ba      	ldrh	r2, [r7, #12]
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	4619      	mov	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fd f9f9 	bl	800081c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800342a:	e029      	b.n	8003480 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800342c:	893b      	ldrh	r3, [r7, #8]
 800342e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003430:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fe41 	bl	80040bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003442:	89ba      	ldrh	r2, [r7, #12]
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fd f9e7 	bl	800081c <HAL_I2C_AddrCallback>
}
 800344e:	e017      	b.n	8003480 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003450:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fe31 	bl	80040bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003462:	89ba      	ldrh	r2, [r7, #12]
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7fd f9d7 	bl	800081c <HAL_I2C_AddrCallback>
}
 800346e:	e007      	b.n	8003480 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2208      	movs	r2, #8
 8003476:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b21      	cmp	r3, #33	@ 0x21
 80034a2:	d115      	bne.n	80034d0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2211      	movs	r2, #17
 80034b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034b8:	2101      	movs	r1, #1
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fdfe 	bl	80040bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fa42 	bl	8002952 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034ce:	e014      	b.n	80034fa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2212      	movs	r2, #18
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034e4:	2102      	movs	r1, #2
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fde8 	bl	80040bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fa36 	bl	8002966 <HAL_I2C_MasterRxCpltCallback>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e00c      	b.n	8003550 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800354e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b29      	cmp	r3, #41	@ 0x29
 800355a:	d112      	bne.n	8003582 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2228      	movs	r2, #40	@ 0x28
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2221      	movs	r2, #33	@ 0x21
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800356a:	2101      	movs	r1, #1
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fda5 	bl	80040bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd f978 	bl	8000870 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003580:	e017      	b.n	80035b2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b2a      	cmp	r3, #42	@ 0x2a
 800358c:	d111      	bne.n	80035b2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2228      	movs	r2, #40	@ 0x28
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2222      	movs	r2, #34	@ 0x22
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800359c:	2102      	movs	r1, #2
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fd8c 	bl	80040bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fd f96f 	bl	8000890 <HAL_I2C_SlaveRxCpltCallback>
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2220      	movs	r2, #32
 80035d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b21      	cmp	r3, #33	@ 0x21
 80035dc:	d107      	bne.n	80035ee <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035de:	2101      	movs	r1, #1
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fd6b 	bl	80040bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2211      	movs	r2, #17
 80035ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80035ec:	e00c      	b.n	8003608 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b22      	cmp	r3, #34	@ 0x22
 80035f8:	d106      	bne.n	8003608 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80035fa:	2102      	movs	r1, #2
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fd5d 	bl	80040bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2212      	movs	r2, #18
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b4c      	ldr	r3, [pc, #304]	@ (8003744 <I2C_ITMasterCplt+0x188>)
 8003614:	400b      	ands	r3, r1
 8003616:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a49      	ldr	r2, [pc, #292]	@ (8003748 <I2C_ITMasterCplt+0x18c>)
 8003622:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2210      	movs	r2, #16
 8003634:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	f043 0204 	orr.w	r2, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b60      	cmp	r3, #96	@ 0x60
 800364c:	d10a      	bne.n	8003664 <I2C_ITMasterCplt+0xa8>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	b2db      	uxtb	r3, r3
 8003660:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003662:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fc30 	bl	8003eca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b60      	cmp	r3, #96	@ 0x60
 800367a:	d002      	beq.n	8003682 <I2C_ITMasterCplt+0xc6>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fb07 	bl	8003c9c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800368e:	e054      	b.n	800373a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b21      	cmp	r3, #33	@ 0x21
 800369a:	d124      	bne.n	80036e6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b40      	cmp	r3, #64	@ 0x40
 80036b4:	d10b      	bne.n	80036ce <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff f957 	bl	800297a <HAL_I2C_MemTxCpltCallback>
}
 80036cc:	e035      	b.n	800373a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff f937 	bl	8002952 <HAL_I2C_MasterTxCpltCallback>
}
 80036e4:	e029      	b.n	800373a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b22      	cmp	r3, #34	@ 0x22
 80036f0:	d123      	bne.n	800373a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b40      	cmp	r3, #64	@ 0x40
 800370a:	d10b      	bne.n	8003724 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff f936 	bl	800298e <HAL_I2C_MemRxCpltCallback>
}
 8003722:	e00a      	b.n	800373a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff f916 	bl	8002966 <HAL_I2C_MasterRxCpltCallback>
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	fe00e800 	.word	0xfe00e800
 8003748:	ffff0000 	.word	0xffff0000

0800374c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800376e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2220      	movs	r2, #32
 8003776:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003778:	7afb      	ldrb	r3, [r7, #11]
 800377a:	2b21      	cmp	r3, #33	@ 0x21
 800377c:	d002      	beq.n	8003784 <I2C_ITSlaveCplt+0x38>
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	2b29      	cmp	r3, #41	@ 0x29
 8003782:	d108      	bne.n	8003796 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003784:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fc97 	bl	80040bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2221      	movs	r2, #33	@ 0x21
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30
 8003794:	e019      	b.n	80037ca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003796:	7afb      	ldrb	r3, [r7, #11]
 8003798:	2b22      	cmp	r3, #34	@ 0x22
 800379a:	d002      	beq.n	80037a2 <I2C_ITSlaveCplt+0x56>
 800379c:	7afb      	ldrb	r3, [r7, #11]
 800379e:	2b2a      	cmp	r3, #42	@ 0x2a
 80037a0:	d108      	bne.n	80037b4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80037a2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fc88 	bl	80040bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2222      	movs	r2, #34	@ 0x22
 80037b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80037b2:	e00a      	b.n	80037ca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	2b28      	cmp	r3, #40	@ 0x28
 80037b8:	d107      	bne.n	80037ca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80037ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fc7c 	bl	80040bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b7f      	ldr	r3, [pc, #508]	@ (80039e4 <I2C_ITSlaveCplt+0x298>)
 80037e6:	400b      	ands	r3, r1
 80037e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fb6d 	bl	8003eca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d07a      	beq.n	80038f0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003808:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8111 	beq.w	8003a36 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a73      	ldr	r2, [pc, #460]	@ (80039e8 <I2C_ITSlaveCplt+0x29c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d059      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a71      	ldr	r2, [pc, #452]	@ (80039ec <I2C_ITSlaveCplt+0x2a0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d053      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6f      	ldr	r2, [pc, #444]	@ (80039f0 <I2C_ITSlaveCplt+0x2a4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d04d      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6d      	ldr	r2, [pc, #436]	@ (80039f4 <I2C_ITSlaveCplt+0x2a8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d047      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6b      	ldr	r2, [pc, #428]	@ (80039f8 <I2C_ITSlaveCplt+0x2ac>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d041      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a69      	ldr	r2, [pc, #420]	@ (80039fc <I2C_ITSlaveCplt+0x2b0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d03b      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a67      	ldr	r2, [pc, #412]	@ (8003a00 <I2C_ITSlaveCplt+0x2b4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d035      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a65      	ldr	r2, [pc, #404]	@ (8003a04 <I2C_ITSlaveCplt+0x2b8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d02f      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a63      	ldr	r2, [pc, #396]	@ (8003a08 <I2C_ITSlaveCplt+0x2bc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d029      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a61      	ldr	r2, [pc, #388]	@ (8003a0c <I2C_ITSlaveCplt+0x2c0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d023      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5f      	ldr	r2, [pc, #380]	@ (8003a10 <I2C_ITSlaveCplt+0x2c4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01d      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5d      	ldr	r2, [pc, #372]	@ (8003a14 <I2C_ITSlaveCplt+0x2c8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d017      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003a18 <I2C_ITSlaveCplt+0x2cc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d011      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a59      	ldr	r2, [pc, #356]	@ (8003a1c <I2C_ITSlaveCplt+0x2d0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a57      	ldr	r2, [pc, #348]	@ (8003a20 <I2C_ITSlaveCplt+0x2d4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d005      	beq.n	80038d4 <I2C_ITSlaveCplt+0x188>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a55      	ldr	r2, [pc, #340]	@ (8003a24 <I2C_ITSlaveCplt+0x2d8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d105      	bne.n	80038e0 <I2C_ITSlaveCplt+0x194>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	e004      	b.n	80038ea <I2C_ITSlaveCplt+0x19e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80038ee:	e0a2      	b.n	8003a36 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 809d 	beq.w	8003a36 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800390a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8090 	beq.w	8003a36 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a32      	ldr	r2, [pc, #200]	@ (80039e8 <I2C_ITSlaveCplt+0x29c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d059      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a30      	ldr	r2, [pc, #192]	@ (80039ec <I2C_ITSlaveCplt+0x2a0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d053      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2e      	ldr	r2, [pc, #184]	@ (80039f0 <I2C_ITSlaveCplt+0x2a4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d04d      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2c      	ldr	r2, [pc, #176]	@ (80039f4 <I2C_ITSlaveCplt+0x2a8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d047      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2a      	ldr	r2, [pc, #168]	@ (80039f8 <I2C_ITSlaveCplt+0x2ac>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d041      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a28      	ldr	r2, [pc, #160]	@ (80039fc <I2C_ITSlaveCplt+0x2b0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d03b      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a26      	ldr	r2, [pc, #152]	@ (8003a00 <I2C_ITSlaveCplt+0x2b4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d035      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <I2C_ITSlaveCplt+0x2b8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d02f      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a22      	ldr	r2, [pc, #136]	@ (8003a08 <I2C_ITSlaveCplt+0x2bc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d029      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a20      	ldr	r2, [pc, #128]	@ (8003a0c <I2C_ITSlaveCplt+0x2c0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d023      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1e      	ldr	r2, [pc, #120]	@ (8003a10 <I2C_ITSlaveCplt+0x2c4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01d      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a14 <I2C_ITSlaveCplt+0x2c8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d017      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003a18 <I2C_ITSlaveCplt+0x2cc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d011      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a18      	ldr	r2, [pc, #96]	@ (8003a1c <I2C_ITSlaveCplt+0x2d0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <I2C_ITSlaveCplt+0x2d4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d005      	beq.n	80039d6 <I2C_ITSlaveCplt+0x28a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <I2C_ITSlaveCplt+0x2d8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d128      	bne.n	8003a28 <I2C_ITSlaveCplt+0x2dc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	e027      	b.n	8003a32 <I2C_ITSlaveCplt+0x2e6>
 80039e2:	bf00      	nop
 80039e4:	fe00e800 	.word	0xfe00e800
 80039e8:	40020010 	.word	0x40020010
 80039ec:	40020028 	.word	0x40020028
 80039f0:	40020040 	.word	0x40020040
 80039f4:	40020058 	.word	0x40020058
 80039f8:	40020070 	.word	0x40020070
 80039fc:	40020088 	.word	0x40020088
 8003a00:	400200a0 	.word	0x400200a0
 8003a04:	400200b8 	.word	0x400200b8
 8003a08:	40020410 	.word	0x40020410
 8003a0c:	40020428 	.word	0x40020428
 8003a10:	40020440 	.word	0x40020440
 8003a14:	40020458 	.word	0x40020458
 8003a18:	40020470 	.word	0x40020470
 8003a1c:	40020488 	.word	0x40020488
 8003a20:	400204a0 	.word	0x400204a0
 8003a24:	400204b8 	.word	0x400204b8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0304 	bic.w	r3, r3, #4
 8003a46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00c      	beq.n	8003a82 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d049      	beq.n	8003b36 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d044      	beq.n	8003b36 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d128      	bne.n	8003b08 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b28      	cmp	r3, #40	@ 0x28
 8003ac0:	d108      	bne.n	8003ad4 <I2C_ITSlaveCplt+0x388>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac8:	d104      	bne.n	8003ad4 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f891 	bl	8003bf4 <I2C_ITListenCplt>
 8003ad2:	e030      	b.n	8003b36 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b29      	cmp	r3, #41	@ 0x29
 8003ade:	d10e      	bne.n	8003afe <I2C_ITSlaveCplt+0x3b2>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ae6:	d00a      	beq.n	8003afe <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2210      	movs	r2, #16
 8003aee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f9ea 	bl	8003eca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fd03 	bl	8003502 <I2C_ITSlaveSeqCplt>
 8003afc:	e01b      	b.n	8003b36 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2210      	movs	r2, #16
 8003b04:	61da      	str	r2, [r3, #28]
 8003b06:	e016      	b.n	8003b36 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b14:	f043 0204 	orr.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <I2C_ITSlaveCplt+0x3de>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b28:	d105      	bne.n	8003b36 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8b3 	bl	8003c9c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8a2 	bl	8003c9c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b28      	cmp	r3, #40	@ 0x28
 8003b62:	d141      	bne.n	8003be8 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b64:	6979      	ldr	r1, [r7, #20]
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f844 	bl	8003bf4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b6c:	e03c      	b.n	8003be8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b76:	d014      	beq.n	8003ba2 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fcc2 	bl	8003502 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf0 <I2C_ITSlaveCplt+0x4a4>)
 8003b82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fc fe2e 	bl	80007fc <HAL_I2C_ListenCpltCallback>
}
 8003ba0:	e022      	b.n	8003be8 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b22      	cmp	r3, #34	@ 0x22
 8003bac:	d10e      	bne.n	8003bcc <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fc fe63 	bl	8000890 <HAL_I2C_SlaveRxCpltCallback>
}
 8003bca:	e00d      	b.n	8003be8 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fc fe44 	bl	8000870 <HAL_I2C_SlaveTxCpltCallback>
}
 8003be8:	bf00      	nop
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	ffff0000 	.word	0xffff0000

08003bf4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a25      	ldr	r2, [pc, #148]	@ (8003c98 <I2C_ITListenCplt+0xa4>)
 8003c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d022      	beq.n	8003c70 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d012      	beq.n	8003c70 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c68:	f043 0204 	orr.w	r2, r3, #4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c70:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fa21 	bl	80040bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fc fdb6 	bl	80007fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	ffff0000 	.word	0xffff0000

08003c9c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a6d      	ldr	r2, [pc, #436]	@ (8003e70 <I2C_ITError+0x1d4>)
 8003cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b28      	cmp	r3, #40	@ 0x28
 8003cd2:	d005      	beq.n	8003ce0 <I2C_ITError+0x44>
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b29      	cmp	r3, #41	@ 0x29
 8003cd8:	d002      	beq.n	8003ce0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cde:	d10b      	bne.n	8003cf8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ce0:	2103      	movs	r1, #3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9ea 	bl	80040bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2228      	movs	r2, #40	@ 0x28
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a60      	ldr	r2, [pc, #384]	@ (8003e74 <I2C_ITError+0x1d8>)
 8003cf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cf6:	e030      	b.n	8003d5a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cf8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f9dd 	bl	80040bc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8e1 	bl	8003eca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b60      	cmp	r3, #96	@ 0x60
 8003d12:	d01f      	beq.n	8003d54 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d114      	bne.n	8003d54 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d109      	bne.n	8003d4c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d44:	f043 0204 	orr.w	r2, r3, #4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2220      	movs	r2, #32
 8003d52:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d039      	beq.n	8003ddc <I2C_ITError+0x140>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b11      	cmp	r3, #17
 8003d6c:	d002      	beq.n	8003d74 <I2C_ITError+0xd8>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b21      	cmp	r3, #33	@ 0x21
 8003d72:	d133      	bne.n	8003ddc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d82:	d107      	bne.n	8003d94 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d92:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe f8b5 	bl	8001f08 <HAL_DMA_GetState>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d017      	beq.n	8003dd4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da8:	4a33      	ldr	r2, [pc, #204]	@ (8003e78 <I2C_ITError+0x1dc>)
 8003daa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd fe5f 	bl	8001a7c <HAL_DMA_Abort_IT>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04d      	beq.n	8003e60 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dd2:	e045      	b.n	8003e60 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f851 	bl	8003e7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dda:	e041      	b.n	8003e60 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d039      	beq.n	8003e58 <I2C_ITError+0x1bc>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b12      	cmp	r3, #18
 8003de8:	d002      	beq.n	8003df0 <I2C_ITError+0x154>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b22      	cmp	r3, #34	@ 0x22
 8003dee:	d133      	bne.n	8003e58 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dfe:	d107      	bne.n	8003e10 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e0e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe f877 	bl	8001f08 <HAL_DMA_GetState>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d017      	beq.n	8003e50 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	4a14      	ldr	r2, [pc, #80]	@ (8003e78 <I2C_ITError+0x1dc>)
 8003e26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fd fe21 	bl	8001a7c <HAL_DMA_Abort_IT>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d011      	beq.n	8003e64 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e4e:	e009      	b.n	8003e64 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f813 	bl	8003e7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e56:	e005      	b.n	8003e64 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f80f 	bl	8003e7c <I2C_TreatErrorCallback>
  }
}
 8003e5e:	e002      	b.n	8003e66 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e60:	bf00      	nop
 8003e62:	e000      	b.n	8003e66 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e64:	bf00      	nop
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	ffff0000 	.word	0xffff0000
 8003e74:	080029b7 	.word	0x080029b7
 8003e78:	08003f13 	.word	0x08003f13

08003e7c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b60      	cmp	r3, #96	@ 0x60
 8003e8e:	d10e      	bne.n	8003eae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fe fd7b 	bl	80029a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003eac:	e009      	b.n	8003ec2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fc fd0f 	bl	80008e0 <HAL_I2C_ErrorCallback>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d103      	bne.n	8003ee8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d007      	beq.n	8003f06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	619a      	str	r2, [r3, #24]
  }
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff ff9b 	bl	8003e7c <I2C_TreatErrorCallback>
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	817b      	strh	r3, [r7, #10]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f68:	7a7b      	ldrb	r3, [r7, #9]
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f70:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f7e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	0d5b      	lsrs	r3, r3, #21
 8003f8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f8e:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <I2C_TransferConfig+0x60>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	43db      	mvns	r3, r3
 8003f94:	ea02 0103 	and.w	r1, r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	03ff63ff 	.word	0x03ff63ff

08003fb4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc8:	4a39      	ldr	r2, [pc, #228]	@ (80040b0 <I2C_Enable_IRQ+0xfc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d032      	beq.n	8004034 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003fd2:	4a38      	ldr	r2, [pc, #224]	@ (80040b4 <I2C_Enable_IRQ+0x100>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d02d      	beq.n	8004034 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003fdc:	4a36      	ldr	r2, [pc, #216]	@ (80040b8 <I2C_Enable_IRQ+0x104>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d028      	beq.n	8004034 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da03      	bge.n	8003ff2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ff0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004002:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004014:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	2b10      	cmp	r3, #16
 800401a:	d103      	bne.n	8004024 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004022:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004024:	887b      	ldrh	r3, [r7, #2]
 8004026:	2b20      	cmp	r3, #32
 8004028:	d133      	bne.n	8004092 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004032:	e02e      	b.n	8004092 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004034:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004038:	2b00      	cmp	r3, #0
 800403a:	da03      	bge.n	8004044 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004042:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004054:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004056:	887b      	ldrh	r3, [r7, #2]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004066:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	2b10      	cmp	r3, #16
 800406c:	d103      	bne.n	8004076 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004074:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004076:	887b      	ldrh	r3, [r7, #2]
 8004078:	2b20      	cmp	r3, #32
 800407a:	d103      	bne.n	8004084 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004082:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004084:	887b      	ldrh	r3, [r7, #2]
 8004086:	2b40      	cmp	r3, #64	@ 0x40
 8004088:	d103      	bne.n	8004092 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004090:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6819      	ldr	r1, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	08002ba9 	.word	0x08002ba9
 80040b4:	08002fcd 	.word	0x08002fcd
 80040b8:	08002d81 	.word	0x08002d81

080040bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00f      	beq.n	80040f6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80040dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040ea:	2b28      	cmp	r3, #40	@ 0x28
 80040ec:	d003      	beq.n	80040f6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80040f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80040f6:	887b      	ldrh	r3, [r7, #2]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00f      	beq.n	8004120 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004106:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004114:	2b28      	cmp	r3, #40	@ 0x28
 8004116:	d003      	beq.n	8004120 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800411e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004120:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004124:	2b00      	cmp	r3, #0
 8004126:	da03      	bge.n	8004130 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800412e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	2b10      	cmp	r3, #16
 8004134:	d103      	bne.n	800413e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	2b20      	cmp	r3, #32
 8004142:	d103      	bne.n	800414c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f043 0320 	orr.w	r3, r3, #32
 800414a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	2b40      	cmp	r3, #64	@ 0x40
 8004150:	d103      	bne.n	800415a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004158:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	43da      	mvns	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	400a      	ands	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	d138      	bne.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004198:	2302      	movs	r3, #2
 800419a:	e032      	b.n	8004202 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	@ 0x24
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	d139      	bne.n	8004298 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800422e:	2302      	movs	r3, #2
 8004230:	e033      	b.n	800429a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2224      	movs	r2, #36	@ 0x24
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004260:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80042b0:	4b29      	ldr	r3, [pc, #164]	@ (8004358 <HAL_PWREx_ConfigSupply+0xb0>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d00a      	beq.n	80042d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042bc:	4b26      	ldr	r3, [pc, #152]	@ (8004358 <HAL_PWREx_ConfigSupply+0xb0>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e040      	b.n	8004350 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e03e      	b.n	8004350 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042d2:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <HAL_PWREx_ConfigSupply+0xb0>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80042da:	491f      	ldr	r1, [pc, #124]	@ (8004358 <HAL_PWREx_ConfigSupply+0xb0>)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042e2:	f7fd fa6b 	bl	80017bc <HAL_GetTick>
 80042e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042e8:	e009      	b.n	80042fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042ea:	f7fd fa67 	bl	80017bc <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042f8:	d901      	bls.n	80042fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e028      	b.n	8004350 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042fe:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <HAL_PWREx_ConfigSupply+0xb0>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430a:	d1ee      	bne.n	80042ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b1e      	cmp	r3, #30
 8004310:	d008      	beq.n	8004324 <HAL_PWREx_ConfigSupply+0x7c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b2e      	cmp	r3, #46	@ 0x2e
 8004316:	d005      	beq.n	8004324 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b1d      	cmp	r3, #29
 800431c:	d002      	beq.n	8004324 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b2d      	cmp	r3, #45	@ 0x2d
 8004322:	d114      	bne.n	800434e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004324:	f7fd fa4a 	bl	80017bc <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800432a:	e009      	b.n	8004340 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800432c:	f7fd fa46 	bl	80017bc <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800433a:	d901      	bls.n	8004340 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e007      	b.n	8004350 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_PWREx_ConfigSupply+0xb0>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800434c:	d1ee      	bne.n	800432c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	58024800 	.word	0x58024800

0800435c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	@ 0x30
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f000 bc48 	b.w	8004c00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8088 	beq.w	800448e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437e:	4b99      	ldr	r3, [pc, #612]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004388:	4b96      	ldr	r3, [pc, #600]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800438e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004390:	2b10      	cmp	r3, #16
 8004392:	d007      	beq.n	80043a4 <HAL_RCC_OscConfig+0x48>
 8004394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004396:	2b18      	cmp	r3, #24
 8004398:	d111      	bne.n	80043be <HAL_RCC_OscConfig+0x62>
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d10c      	bne.n	80043be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	4b8f      	ldr	r3, [pc, #572]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d06d      	beq.n	800448c <HAL_RCC_OscConfig+0x130>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d169      	bne.n	800448c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f000 bc21 	b.w	8004c00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x7a>
 80043c8:	4b86      	ldr	r3, [pc, #536]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a85      	ldr	r2, [pc, #532]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80043ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e02e      	b.n	8004434 <HAL_RCC_OscConfig+0xd8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x9c>
 80043de:	4b81      	ldr	r3, [pc, #516]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a80      	ldr	r2, [pc, #512]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b7e      	ldr	r3, [pc, #504]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a7d      	ldr	r2, [pc, #500]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80043f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xd8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0xc0>
 8004402:	4b78      	ldr	r3, [pc, #480]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a77      	ldr	r2, [pc, #476]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b75      	ldr	r3, [pc, #468]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a74      	ldr	r2, [pc, #464]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xd8>
 800441c:	4b71      	ldr	r3, [pc, #452]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a70      	ldr	r2, [pc, #448]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b6e      	ldr	r3, [pc, #440]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a6d      	ldr	r2, [pc, #436]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd f9be 	bl	80017bc <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fd f9ba 	bl	80017bc <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	@ 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e3d4      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004456:	4b63      	ldr	r3, [pc, #396]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xe8>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fd f9aa 	bl	80017bc <HAL_GetTick>
 8004468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446c:	f7fd f9a6 	bl	80017bc <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	@ 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e3c0      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800447e:	4b59      	ldr	r3, [pc, #356]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x110>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80ca 	beq.w	8004630 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449c:	4b51      	ldr	r3, [pc, #324]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044a6:	4b4f      	ldr	r3, [pc, #316]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <HAL_RCC_OscConfig+0x166>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2b18      	cmp	r3, #24
 80044b6:	d156      	bne.n	8004566 <HAL_RCC_OscConfig+0x20a>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d151      	bne.n	8004566 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c2:	4b48      	ldr	r3, [pc, #288]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCC_OscConfig+0x17e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e392      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044da:	4b42      	ldr	r3, [pc, #264]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 0219 	bic.w	r2, r3, #25
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	493f      	ldr	r1, [pc, #252]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd f966 	bl	80017bc <HAL_GetTick>
 80044f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fd f962 	bl	80017bc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e37c      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004506:	4b37      	ldr	r3, [pc, #220]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	f7fd f983 	bl	800181c <HAL_GetREVID>
 8004516:	4603      	mov	r3, r0
 8004518:	f241 0203 	movw	r2, #4099	@ 0x1003
 800451c:	4293      	cmp	r3, r2
 800451e:	d817      	bhi.n	8004550 <HAL_RCC_OscConfig+0x1f4>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d108      	bne.n	800453a <HAL_RCC_OscConfig+0x1de>
 8004528:	4b2e      	ldr	r3, [pc, #184]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004530:	4a2c      	ldr	r2, [pc, #176]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004536:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004538:	e07a      	b.n	8004630 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b2a      	ldr	r3, [pc, #168]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	031b      	lsls	r3, r3, #12
 8004548:	4926      	ldr	r1, [pc, #152]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454e:	e06f      	b.n	8004630 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	4b24      	ldr	r3, [pc, #144]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	4921      	ldr	r1, [pc, #132]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004564:	e064      	b.n	8004630 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d047      	beq.n	80045fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800456e:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 0219 	bic.w	r2, r3, #25
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	491a      	ldr	r1, [pc, #104]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fd f91c 	bl	80017bc <HAL_GetTick>
 8004584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004588:	f7fd f918 	bl	80017bc <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e332      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800459a:	4b12      	ldr	r3, [pc, #72]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	f7fd f939 	bl	800181c <HAL_GetREVID>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d819      	bhi.n	80045e8 <HAL_RCC_OscConfig+0x28c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	d108      	bne.n	80045ce <HAL_RCC_OscConfig+0x272>
 80045bc:	4b09      	ldr	r3, [pc, #36]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80045c4:	4a07      	ldr	r2, [pc, #28]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80045c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ca:	6053      	str	r3, [r2, #4]
 80045cc:	e030      	b.n	8004630 <HAL_RCC_OscConfig+0x2d4>
 80045ce:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	031b      	lsls	r3, r3, #12
 80045dc:	4901      	ldr	r1, [pc, #4]	@ (80045e4 <HAL_RCC_OscConfig+0x288>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
 80045e2:	e025      	b.n	8004630 <HAL_RCC_OscConfig+0x2d4>
 80045e4:	58024400 	.word	0x58024400
 80045e8:	4b9a      	ldr	r3, [pc, #616]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	4997      	ldr	r1, [pc, #604]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
 80045fc:	e018      	b.n	8004630 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fe:	4b95      	ldr	r3, [pc, #596]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a94      	ldr	r2, [pc, #592]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fd f8d7 	bl	80017bc <HAL_GetTick>
 800460e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004612:	f7fd f8d3 	bl	80017bc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e2ed      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004624:	4b8b      	ldr	r3, [pc, #556]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80a9 	beq.w	8004790 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463e:	4b85      	ldr	r3, [pc, #532]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004646:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004648:	4b82      	ldr	r3, [pc, #520]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d007      	beq.n	8004664 <HAL_RCC_OscConfig+0x308>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b18      	cmp	r3, #24
 8004658:	d13a      	bne.n	80046d0 <HAL_RCC_OscConfig+0x374>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d135      	bne.n	80046d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004664:	4b7b      	ldr	r3, [pc, #492]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x320>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	2b80      	cmp	r3, #128	@ 0x80
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e2c1      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800467c:	f7fd f8ce 	bl	800181c <HAL_GetREVID>
 8004680:	4603      	mov	r3, r0
 8004682:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004686:	4293      	cmp	r3, r2
 8004688:	d817      	bhi.n	80046ba <HAL_RCC_OscConfig+0x35e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	2b20      	cmp	r3, #32
 8004690:	d108      	bne.n	80046a4 <HAL_RCC_OscConfig+0x348>
 8004692:	4b70      	ldr	r3, [pc, #448]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800469a:	4a6e      	ldr	r2, [pc, #440]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 800469c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046a2:	e075      	b.n	8004790 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	069b      	lsls	r3, r3, #26
 80046b2:	4968      	ldr	r1, [pc, #416]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046b8:	e06a      	b.n	8004790 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ba:	4b66      	ldr	r3, [pc, #408]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	4962      	ldr	r1, [pc, #392]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046ce:	e05f      	b.n	8004790 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d042      	beq.n	800475e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80046de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd f86a 	bl	80017bc <HAL_GetTick>
 80046e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046ec:	f7fd f866 	bl	80017bc <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e280      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046fe:	4b55      	ldr	r3, [pc, #340]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800470a:	f7fd f887 	bl	800181c <HAL_GetREVID>
 800470e:	4603      	mov	r3, r0
 8004710:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004714:	4293      	cmp	r3, r2
 8004716:	d817      	bhi.n	8004748 <HAL_RCC_OscConfig+0x3ec>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	2b20      	cmp	r3, #32
 800471e:	d108      	bne.n	8004732 <HAL_RCC_OscConfig+0x3d6>
 8004720:	4b4c      	ldr	r3, [pc, #304]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004728:	4a4a      	ldr	r2, [pc, #296]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 800472a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800472e:	6053      	str	r3, [r2, #4]
 8004730:	e02e      	b.n	8004790 <HAL_RCC_OscConfig+0x434>
 8004732:	4b48      	ldr	r3, [pc, #288]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	069b      	lsls	r3, r3, #26
 8004740:	4944      	ldr	r1, [pc, #272]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]
 8004746:	e023      	b.n	8004790 <HAL_RCC_OscConfig+0x434>
 8004748:	4b42      	ldr	r3, [pc, #264]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	493f      	ldr	r1, [pc, #252]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004758:	4313      	orrs	r3, r2
 800475a:	60cb      	str	r3, [r1, #12]
 800475c:	e018      	b.n	8004790 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800475e:	4b3d      	ldr	r3, [pc, #244]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3c      	ldr	r2, [pc, #240]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476a:	f7fd f827 	bl	80017bc <HAL_GetTick>
 800476e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004772:	f7fd f823 	bl	80017bc <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e23d      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004784:	4b33      	ldr	r3, [pc, #204]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f0      	bne.n	8004772 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d036      	beq.n	800480a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d019      	beq.n	80047d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80047a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fd f804 	bl	80017bc <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b8:	f7fd f800 	bl	80017bc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e21a      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047ca:	4b22      	ldr	r3, [pc, #136]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80047cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x45c>
 80047d6:	e018      	b.n	800480a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80047da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7fc ffea 	bl	80017bc <HAL_GetTick>
 80047e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ec:	f7fc ffe6 	bl	80017bc <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e200      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047fe:	4b15      	ldr	r3, [pc, #84]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d039      	beq.n	800488a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01c      	beq.n	8004858 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a0c      	ldr	r2, [pc, #48]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004824:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800482a:	f7fc ffc7 	bl	80017bc <HAL_GetTick>
 800482e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004832:	f7fc ffc3 	bl	80017bc <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e1dd      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004844:	4b03      	ldr	r3, [pc, #12]	@ (8004854 <HAL_RCC_OscConfig+0x4f8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x4d6>
 8004850:	e01b      	b.n	800488a <HAL_RCC_OscConfig+0x52e>
 8004852:	bf00      	nop
 8004854:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004858:	4b9b      	ldr	r3, [pc, #620]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a9a      	ldr	r2, [pc, #616]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 800485e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004862:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004864:	f7fc ffaa 	bl	80017bc <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800486c:	f7fc ffa6 	bl	80017bc <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e1c0      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800487e:	4b92      	ldr	r3, [pc, #584]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8081 	beq.w	800499a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004898:	4b8c      	ldr	r3, [pc, #560]	@ (8004acc <HAL_RCC_OscConfig+0x770>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a8b      	ldr	r2, [pc, #556]	@ (8004acc <HAL_RCC_OscConfig+0x770>)
 800489e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048a4:	f7fc ff8a 	bl	80017bc <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ac:	f7fc ff86 	bl	80017bc <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b64      	cmp	r3, #100	@ 0x64
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e1a0      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048be:	4b83      	ldr	r3, [pc, #524]	@ (8004acc <HAL_RCC_OscConfig+0x770>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d106      	bne.n	80048e0 <HAL_RCC_OscConfig+0x584>
 80048d2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048de:	e02d      	b.n	800493c <HAL_RCC_OscConfig+0x5e0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x5a6>
 80048e8:	4b77      	ldr	r3, [pc, #476]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ec:	4a76      	ldr	r2, [pc, #472]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f4:	4b74      	ldr	r3, [pc, #464]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f8:	4a73      	ldr	r2, [pc, #460]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80048fa:	f023 0304 	bic.w	r3, r3, #4
 80048fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004900:	e01c      	b.n	800493c <HAL_RCC_OscConfig+0x5e0>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b05      	cmp	r3, #5
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x5c8>
 800490a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	6713      	str	r3, [r2, #112]	@ 0x70
 8004916:	4b6c      	ldr	r3, [pc, #432]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491a:	4a6b      	ldr	r2, [pc, #428]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	6713      	str	r3, [r2, #112]	@ 0x70
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0x5e0>
 8004924:	4b68      	ldr	r3, [pc, #416]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	4a67      	ldr	r2, [pc, #412]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004930:	4b65      	ldr	r3, [pc, #404]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004934:	4a64      	ldr	r2, [pc, #400]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004936:	f023 0304 	bic.w	r3, r3, #4
 800493a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fc ff3a 	bl	80017bc <HAL_GetTick>
 8004948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fc ff36 	bl	80017bc <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e14e      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004962:	4b59      	ldr	r3, [pc, #356]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0ee      	beq.n	800494c <HAL_RCC_OscConfig+0x5f0>
 800496e:	e014      	b.n	800499a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fc ff24 	bl	80017bc <HAL_GetTick>
 8004974:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fc ff20 	bl	80017bc <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e138      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800498e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1ee      	bne.n	8004978 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 812d 	beq.w	8004bfe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049a4:	4b48      	ldr	r3, [pc, #288]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ac:	2b18      	cmp	r3, #24
 80049ae:	f000 80bd 	beq.w	8004b2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	f040 809e 	bne.w	8004af8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049bc:	4b42      	ldr	r3, [pc, #264]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a41      	ldr	r2, [pc, #260]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80049c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fc fef8 	bl	80017bc <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fc fef4 	bl	80017bc <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e10e      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049e2:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ee:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 80049f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049f2:	4b37      	ldr	r3, [pc, #220]	@ (8004ad0 <HAL_RCC_OscConfig+0x774>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	430a      	orrs	r2, r1
 8004a02:	4931      	ldr	r1, [pc, #196]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a16:	3b01      	subs	r3, #1
 8004a18:	025b      	lsls	r3, r3, #9
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	3b01      	subs	r3, #1
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	3b01      	subs	r3, #1
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a38:	4923      	ldr	r1, [pc, #140]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a21      	ldr	r2, [pc, #132]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4e:	4b21      	ldr	r3, [pc, #132]	@ (8004ad4 <HAL_RCC_OscConfig+0x778>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a56:	00d2      	lsls	r2, r2, #3
 8004a58:	491b      	ldr	r1, [pc, #108]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	f023 020c 	bic.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	4917      	ldr	r1, [pc, #92]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a70:	4b15      	ldr	r3, [pc, #84]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	f023 0202 	bic.w	r2, r3, #2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7c:	4912      	ldr	r1, [pc, #72]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a82:	4b11      	ldr	r3, [pc, #68]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	4a10      	ldr	r2, [pc, #64]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004aa6:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	4a07      	ldr	r2, [pc, #28]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab2:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fc fe7d 	bl	80017bc <HAL_GetTick>
 8004ac2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ac4:	e011      	b.n	8004aea <HAL_RCC_OscConfig+0x78e>
 8004ac6:	bf00      	nop
 8004ac8:	58024400 	.word	0x58024400
 8004acc:	58024800 	.word	0x58024800
 8004ad0:	fffffc0c 	.word	0xfffffc0c
 8004ad4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fc fe70 	bl	80017bc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e08a      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aea:	4b47      	ldr	r3, [pc, #284]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x77c>
 8004af6:	e082      	b.n	8004bfe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af8:	4b43      	ldr	r3, [pc, #268]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a42      	ldr	r2, [pc, #264]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fc fe5a 	bl	80017bc <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0c:	f7fc fe56 	bl	80017bc <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e070      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x7b0>
 8004b2a:	e068      	b.n	8004bfe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b2c:	4b36      	ldr	r3, [pc, #216]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b32:	4b35      	ldr	r3, [pc, #212]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d031      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f003 0203 	and.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d12a      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d122      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d11a      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	0a5b      	lsrs	r3, r3, #9
 8004b72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d111      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	0c1b      	lsrs	r3, r3, #16
 8004b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d108      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	0e1b      	lsrs	r3, r3, #24
 8004b96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e02b      	b.n	8004c00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ba8:	4b17      	ldr	r3, [pc, #92]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bac:	08db      	lsrs	r3, r3, #3
 8004bae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d01f      	beq.n	8004bfe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004bbe:	4b12      	ldr	r3, [pc, #72]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc2:	4a11      	ldr	r2, [pc, #68]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bca:	f7fc fdf7 	bl	80017bc <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004bd0:	bf00      	nop
 8004bd2:	f7fc fdf3 	bl	80017bc <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d0f9      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bde:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c0c <HAL_RCC_OscConfig+0x8b0>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bea:	00d2      	lsls	r2, r2, #3
 8004bec:	4906      	ldr	r1, [pc, #24]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004bf2:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	4a04      	ldr	r2, [pc, #16]	@ (8004c08 <HAL_RCC_OscConfig+0x8ac>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3730      	adds	r7, #48	@ 0x30
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	ffff0007 	.word	0xffff0007

08004c10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e19c      	b.n	8004f5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c24:	4b8a      	ldr	r3, [pc, #552]	@ (8004e50 <HAL_RCC_ClockConfig+0x240>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d910      	bls.n	8004c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b87      	ldr	r3, [pc, #540]	@ (8004e50 <HAL_RCC_ClockConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 020f 	bic.w	r2, r3, #15
 8004c3a:	4985      	ldr	r1, [pc, #532]	@ (8004e50 <HAL_RCC_ClockConfig+0x240>)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b83      	ldr	r3, [pc, #524]	@ (8004e50 <HAL_RCC_ClockConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e184      	b.n	8004f5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d010      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	4b7b      	ldr	r3, [pc, #492]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d908      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c70:	4b78      	ldr	r3, [pc, #480]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	4975      	ldr	r1, [pc, #468]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d010      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	4b70      	ldr	r3, [pc, #448]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d908      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	496a      	ldr	r1, [pc, #424]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d010      	beq.n	8004cde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	4b64      	ldr	r3, [pc, #400]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d908      	bls.n	8004cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ccc:	4b61      	ldr	r3, [pc, #388]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	495e      	ldr	r1, [pc, #376]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69da      	ldr	r2, [r3, #28]
 8004cee:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d908      	bls.n	8004d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cfa:	4b56      	ldr	r3, [pc, #344]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4953      	ldr	r1, [pc, #332]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d908      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d28:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f023 020f 	bic.w	r2, r3, #15
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4947      	ldr	r1, [pc, #284]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d055      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d46:	4b43      	ldr	r3, [pc, #268]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	4940      	ldr	r1, [pc, #256]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d107      	bne.n	8004d70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d60:	4b3c      	ldr	r3, [pc, #240]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d121      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0f6      	b.n	8004f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d78:	4b36      	ldr	r3, [pc, #216]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d115      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0ea      	b.n	8004f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d90:	4b30      	ldr	r3, [pc, #192]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0de      	b.n	8004f5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0d6      	b.n	8004f5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004db0:	4b28      	ldr	r3, [pc, #160]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f023 0207 	bic.w	r2, r3, #7
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4925      	ldr	r1, [pc, #148]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc2:	f7fc fcfb 	bl	80017bc <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dca:	f7fc fcf7 	bl	80017bc <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e0be      	b.n	8004f5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d1eb      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d010      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	4b14      	ldr	r3, [pc, #80]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d208      	bcs.n	8004e20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0e:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f023 020f 	bic.w	r2, r3, #15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	490e      	ldr	r1, [pc, #56]	@ (8004e54 <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <HAL_RCC_ClockConfig+0x240>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d214      	bcs.n	8004e58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <HAL_RCC_ClockConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 020f 	bic.w	r2, r3, #15
 8004e36:	4906      	ldr	r1, [pc, #24]	@ (8004e50 <HAL_RCC_ClockConfig+0x240>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <HAL_RCC_ClockConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e086      	b.n	8004f5e <HAL_RCC_ClockConfig+0x34e>
 8004e50:	52002000 	.word	0x52002000
 8004e54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d010      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	4b3f      	ldr	r3, [pc, #252]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d208      	bcs.n	8004e86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e74:	4b3c      	ldr	r3, [pc, #240]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	4939      	ldr	r1, [pc, #228]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d010      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	4b34      	ldr	r3, [pc, #208]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d208      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ea2:	4b31      	ldr	r3, [pc, #196]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	492e      	ldr	r1, [pc, #184]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	4b28      	ldr	r3, [pc, #160]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d208      	bcs.n	8004ee2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ed0:	4b25      	ldr	r3, [pc, #148]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	4922      	ldr	r1, [pc, #136]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d010      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d208      	bcs.n	8004f10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004efe:	4b1a      	ldr	r3, [pc, #104]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	4917      	ldr	r1, [pc, #92]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f10:	f000 f834 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4b14      	ldr	r3, [pc, #80]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	4912      	ldr	r1, [pc, #72]	@ (8004f6c <HAL_RCC_ClockConfig+0x35c>)
 8004f22:	5ccb      	ldrb	r3, [r1, r3]
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <HAL_RCC_ClockConfig+0x358>)
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	4a0d      	ldr	r2, [pc, #52]	@ (8004f6c <HAL_RCC_ClockConfig+0x35c>)
 8004f38:	5cd3      	ldrb	r3, [r2, r3]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	4a0a      	ldr	r2, [pc, #40]	@ (8004f70 <HAL_RCC_ClockConfig+0x360>)
 8004f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f48:	4a0a      	ldr	r2, [pc, #40]	@ (8004f74 <HAL_RCC_ClockConfig+0x364>)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <HAL_RCC_ClockConfig+0x368>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fc fbe8 	bl	8001728 <HAL_InitTick>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	08009d34 	.word	0x08009d34
 8004f70:	24000004 	.word	0x24000004
 8004f74:	24000000 	.word	0x24000000
 8004f78:	24000028 	.word	0x24000028

08004f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	@ 0x24
 8004f80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f82:	4bb3      	ldr	r3, [pc, #716]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f8a:	2b18      	cmp	r3, #24
 8004f8c:	f200 8155 	bhi.w	800523a <HAL_RCC_GetSysClockFreq+0x2be>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004ffd 	.word	0x08004ffd
 8004f9c:	0800523b 	.word	0x0800523b
 8004fa0:	0800523b 	.word	0x0800523b
 8004fa4:	0800523b 	.word	0x0800523b
 8004fa8:	0800523b 	.word	0x0800523b
 8004fac:	0800523b 	.word	0x0800523b
 8004fb0:	0800523b 	.word	0x0800523b
 8004fb4:	0800523b 	.word	0x0800523b
 8004fb8:	08005023 	.word	0x08005023
 8004fbc:	0800523b 	.word	0x0800523b
 8004fc0:	0800523b 	.word	0x0800523b
 8004fc4:	0800523b 	.word	0x0800523b
 8004fc8:	0800523b 	.word	0x0800523b
 8004fcc:	0800523b 	.word	0x0800523b
 8004fd0:	0800523b 	.word	0x0800523b
 8004fd4:	0800523b 	.word	0x0800523b
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	0800523b 	.word	0x0800523b
 8004fe0:	0800523b 	.word	0x0800523b
 8004fe4:	0800523b 	.word	0x0800523b
 8004fe8:	0800523b 	.word	0x0800523b
 8004fec:	0800523b 	.word	0x0800523b
 8004ff0:	0800523b 	.word	0x0800523b
 8004ff4:	0800523b 	.word	0x0800523b
 8004ff8:	0800502f 	.word	0x0800502f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ffc:	4b94      	ldr	r3, [pc, #592]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005008:	4b91      	ldr	r3, [pc, #580]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	4a90      	ldr	r2, [pc, #576]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800501a:	e111      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800501c:	4b8d      	ldr	r3, [pc, #564]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800501e:	61bb      	str	r3, [r7, #24]
      break;
 8005020:	e10e      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005022:	4b8d      	ldr	r3, [pc, #564]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005024:	61bb      	str	r3, [r7, #24]
      break;
 8005026:	e10b      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005028:	4b8c      	ldr	r3, [pc, #560]	@ (800525c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800502a:	61bb      	str	r3, [r7, #24]
      break;
 800502c:	e108      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800502e:	4b88      	ldr	r3, [pc, #544]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005038:	4b85      	ldr	r3, [pc, #532]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005042:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005044:	4b82      	ldr	r3, [pc, #520]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800504e:	4b80      	ldr	r3, [pc, #512]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80e1 	beq.w	8005234 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b02      	cmp	r3, #2
 8005076:	f000 8083 	beq.w	8005180 <HAL_RCC_GetSysClockFreq+0x204>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b02      	cmp	r3, #2
 800507e:	f200 80a1 	bhi.w	80051c4 <HAL_RCC_GetSysClockFreq+0x248>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_RCC_GetSysClockFreq+0x114>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d056      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x1c0>
 800508e:	e099      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005090:	4b6f      	ldr	r3, [pc, #444]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02d      	beq.n	80050f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800509c:	4b6c      	ldr	r3, [pc, #432]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	08db      	lsrs	r3, r3, #3
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	ee07 3a90 	vmov	s15, r3
 80050b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c6:	4b62      	ldr	r3, [pc, #392]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80050f6:	e087      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005264 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510a:	4b51      	ldr	r3, [pc, #324]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	ed97 6a02 	vldr	s12, [r7, #8]
 800511e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800513a:	e065      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005146:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005268 <HAL_RCC_GetSysClockFreq+0x2ec>
 800514a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514e:	4b40      	ldr	r3, [pc, #256]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005162:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800517e:	e043      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800526c <HAL_RCC_GetSysClockFreq+0x2f0>
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b2f      	ldr	r3, [pc, #188]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051c2:	e021      	b.n	8005208 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005268 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005206:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005208:	4b11      	ldr	r3, [pc, #68]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520c:	0a5b      	lsrs	r3, r3, #9
 800520e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005212:	3301      	adds	r3, #1
 8005214:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005220:	edd7 6a07 	vldr	s13, [r7, #28]
 8005224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522c:	ee17 3a90 	vmov	r3, s15
 8005230:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005232:	e005      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
      break;
 8005238:	e002      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800523a:	4b07      	ldr	r3, [pc, #28]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800523c:	61bb      	str	r3, [r7, #24]
      break;
 800523e:	bf00      	nop
  }

  return sysclockfreq;
 8005240:	69bb      	ldr	r3, [r7, #24]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3724      	adds	r7, #36	@ 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	58024400 	.word	0x58024400
 8005254:	03d09000 	.word	0x03d09000
 8005258:	003d0900 	.word	0x003d0900
 800525c:	017d7840 	.word	0x017d7840
 8005260:	46000000 	.word	0x46000000
 8005264:	4c742400 	.word	0x4c742400
 8005268:	4a742400 	.word	0x4a742400
 800526c:	4bbebc20 	.word	0x4bbebc20

08005270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005276:	f7ff fe81 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 800527a:	4602      	mov	r2, r0
 800527c:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	490f      	ldr	r1, [pc, #60]	@ (80052c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005288:	5ccb      	ldrb	r3, [r1, r3]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005294:	4b0a      	ldr	r3, [pc, #40]	@ (80052c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	4a09      	ldr	r2, [pc, #36]	@ (80052c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800529e:	5cd3      	ldrb	r3, [r2, r3]
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a07      	ldr	r2, [pc, #28]	@ (80052c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80052ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052ae:	4a07      	ldr	r2, [pc, #28]	@ (80052cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052b4:	4b04      	ldr	r3, [pc, #16]	@ (80052c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80052b6:	681b      	ldr	r3, [r3, #0]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	58024400 	.word	0x58024400
 80052c4:	08009d34 	.word	0x08009d34
 80052c8:	24000004 	.word	0x24000004
 80052cc:	24000000 	.word	0x24000000

080052d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052d4:	f7ff ffcc 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	4904      	ldr	r1, [pc, #16]	@ (80052f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052e6:	5ccb      	ldrb	r3, [r1, r3]
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	58024400 	.word	0x58024400
 80052f8:	08009d34 	.word	0x08009d34

080052fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005300:	f7ff ffb6 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	0a1b      	lsrs	r3, r3, #8
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4904      	ldr	r1, [pc, #16]	@ (8005324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800531c:	4618      	mov	r0, r3
 800531e:	bd80      	pop	{r7, pc}
 8005320:	58024400 	.word	0x58024400
 8005324:	08009d34 	.word	0x08009d34

08005328 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b0ca      	sub	sp, #296	@ 0x128
 800532e:	af00      	add	r7, sp, #0
 8005330:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005334:	2300      	movs	r3, #0
 8005336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800533a:	2300      	movs	r3, #0
 800533c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800534c:	2500      	movs	r5, #0
 800534e:	ea54 0305 	orrs.w	r3, r4, r5
 8005352:	d049      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800535a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800535e:	d02f      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005360:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005364:	d828      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800536a:	d01a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800536c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005370:	d822      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800537a:	d007      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800537c:	e01c      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537e:	4bb8      	ldr	r3, [pc, #736]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	4ab7      	ldr	r2, [pc, #732]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800538a:	e01a      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800538c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005390:	3308      	adds	r3, #8
 8005392:	2102      	movs	r1, #2
 8005394:	4618      	mov	r0, r3
 8005396:	f001 fc8f 	bl	8006cb8 <RCCEx_PLL2_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053a0:	e00f      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a6:	3328      	adds	r3, #40	@ 0x28
 80053a8:	2102      	movs	r1, #2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 fd36 	bl	8006e1c <RCCEx_PLL3_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053b6:	e004      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80053c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053ca:	4ba5      	ldr	r3, [pc, #660]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053d8:	4aa1      	ldr	r2, [pc, #644]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053da:	430b      	orrs	r3, r1
 80053dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80053de:	e003      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80053f4:	f04f 0900 	mov.w	r9, #0
 80053f8:	ea58 0309 	orrs.w	r3, r8, r9
 80053fc:	d047      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005404:	2b04      	cmp	r3, #4
 8005406:	d82a      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005408:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005425 	.word	0x08005425
 8005414:	08005433 	.word	0x08005433
 8005418:	08005449 	.word	0x08005449
 800541c:	08005467 	.word	0x08005467
 8005420:	08005467 	.word	0x08005467
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005424:	4b8e      	ldr	r3, [pc, #568]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	4a8d      	ldr	r2, [pc, #564]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800542a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800542e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005430:	e01a      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	3308      	adds	r3, #8
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f001 fc3c 	bl	8006cb8 <RCCEx_PLL2_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005446:	e00f      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544c:	3328      	adds	r3, #40	@ 0x28
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fce3 	bl	8006e1c <RCCEx_PLL3_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800545c:	e004      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005470:	4b7b      	ldr	r3, [pc, #492]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005474:	f023 0107 	bic.w	r1, r3, #7
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547e:	4a78      	ldr	r2, [pc, #480]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005480:	430b      	orrs	r3, r1
 8005482:	6513      	str	r3, [r2, #80]	@ 0x50
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800548a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800549a:	f04f 0b00 	mov.w	fp, #0
 800549e:	ea5a 030b 	orrs.w	r3, sl, fp
 80054a2:	d04c      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ae:	d030      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b4:	d829      	bhi.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054b8:	d02d      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80054ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80054bc:	d825      	bhi.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054be:	2b80      	cmp	r3, #128	@ 0x80
 80054c0:	d018      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80054c2:	2b80      	cmp	r3, #128	@ 0x80
 80054c4:	d821      	bhi.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80054ca:	2b40      	cmp	r3, #64	@ 0x40
 80054cc:	d007      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80054ce:	e01c      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d0:	4b63      	ldr	r3, [pc, #396]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	4a62      	ldr	r2, [pc, #392]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054dc:	e01c      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e2:	3308      	adds	r3, #8
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 fbe6 	bl	8006cb8 <RCCEx_PLL2_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054f2:	e011      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f8:	3328      	adds	r3, #40	@ 0x28
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 fc8d 	bl	8006e1c <RCCEx_PLL3_Config>
 8005502:	4603      	mov	r3, r0
 8005504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005508:	e006      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005510:	e002      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005520:	4b4f      	ldr	r3, [pc, #316]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005524:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552e:	4a4c      	ldr	r2, [pc, #304]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005530:	430b      	orrs	r3, r1
 8005532:	6513      	str	r3, [r2, #80]	@ 0x50
 8005534:	e003      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800553a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800554a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800554e:	2300      	movs	r3, #0
 8005550:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005554:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005558:	460b      	mov	r3, r1
 800555a:	4313      	orrs	r3, r2
 800555c:	d053      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800555e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005566:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800556a:	d035      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800556c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005570:	d82e      	bhi.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005572:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005576:	d031      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005578:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800557c:	d828      	bhi.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800557e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005582:	d01a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005584:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005588:	d822      	bhi.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800558e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005592:	d007      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005594:	e01c      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005596:	4b32      	ldr	r3, [pc, #200]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	4a31      	ldr	r2, [pc, #196]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055a2:	e01c      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a8:	3308      	adds	r3, #8
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fb83 	bl	8006cb8 <RCCEx_PLL2_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055b8:	e011      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	3328      	adds	r3, #40	@ 0x28
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f001 fc2a 	bl	8006e1c <RCCEx_PLL3_Config>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055ce:	e006      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055d6:	e002      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005612:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800561c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005620:	460b      	mov	r3, r1
 8005622:	4313      	orrs	r3, r2
 8005624:	d056      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800562e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005632:	d038      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005634:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005638:	d831      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800563a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800563e:	d034      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005640:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005644:	d82b      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800564a:	d01d      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800564c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005650:	d825      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005656:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800565c:	e01f      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800565e:	bf00      	nop
 8005660:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005664:	4ba2      	ldr	r3, [pc, #648]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	4aa1      	ldr	r2, [pc, #644]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800566a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800566e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005670:	e01c      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005676:	3308      	adds	r3, #8
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f001 fb1c 	bl	8006cb8 <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005686:	e011      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568c:	3328      	adds	r3, #40	@ 0x28
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fbc3 	bl	8006e1c <RCCEx_PLL3_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800569c:	e006      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056a4:	e002      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056a6:	bf00      	nop
 80056a8:	e000      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80056b4:	4b8e      	ldr	r3, [pc, #568]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056c4:	4a8a      	ldr	r2, [pc, #552]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056c6:	430b      	orrs	r3, r1
 80056c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80056ca:	e003      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80056e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80056ee:	460b      	mov	r3, r1
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d03a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056fa:	2b30      	cmp	r3, #48	@ 0x30
 80056fc:	d01f      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80056fe:	2b30      	cmp	r3, #48	@ 0x30
 8005700:	d819      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005702:	2b20      	cmp	r3, #32
 8005704:	d00c      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005706:	2b20      	cmp	r3, #32
 8005708:	d815      	bhi.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d019      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800570e:	2b10      	cmp	r3, #16
 8005710:	d111      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005712:	4b77      	ldr	r3, [pc, #476]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005716:	4a76      	ldr	r2, [pc, #472]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800571c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800571e:	e011      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005724:	3308      	adds	r3, #8
 8005726:	2102      	movs	r1, #2
 8005728:	4618      	mov	r0, r3
 800572a:	f001 fac5 	bl	8006cb8 <RCCEx_PLL2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005734:	e006      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800573c:	e002      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800573e:	bf00      	nop
 8005740:	e000      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800574c:	4b68      	ldr	r3, [pc, #416]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800574e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005750:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575a:	4a65      	ldr	r2, [pc, #404]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800575c:	430b      	orrs	r3, r1
 800575e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005760:	e003      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005776:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800577a:	2300      	movs	r3, #0
 800577c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005780:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005784:	460b      	mov	r3, r1
 8005786:	4313      	orrs	r3, r2
 8005788:	d051      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005790:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005794:	d035      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005796:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800579a:	d82e      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800579c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057a0:	d031      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80057a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057a6:	d828      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ac:	d01a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b2:	d822      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80057b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057bc:	d007      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80057be:	e01c      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c0:	4b4b      	ldr	r3, [pc, #300]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	4a4a      	ldr	r2, [pc, #296]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057cc:	e01c      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	3308      	adds	r3, #8
 80057d4:	2100      	movs	r1, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 fa6e 	bl	8006cb8 <RCCEx_PLL2_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057e2:	e011      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e8:	3328      	adds	r3, #40	@ 0x28
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fb15 	bl	8006e1c <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057f8:	e006      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005800:	e002      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005810:	4b37      	ldr	r3, [pc, #220]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005814:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800581e:	4a34      	ldr	r2, [pc, #208]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005820:	430b      	orrs	r3, r1
 8005822:	6513      	str	r3, [r2, #80]	@ 0x50
 8005824:	e003      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800583a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800583e:	2300      	movs	r3, #0
 8005840:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005844:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005848:	460b      	mov	r3, r1
 800584a:	4313      	orrs	r3, r2
 800584c:	d056      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005858:	d033      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800585a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800585e:	d82c      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005860:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005864:	d02f      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005866:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800586a:	d826      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800586c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005870:	d02b      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005872:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005876:	d820      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800587c:	d012      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800587e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005882:	d81a      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d022      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800588c:	d115      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	3308      	adds	r3, #8
 8005894:	2101      	movs	r1, #1
 8005896:	4618      	mov	r0, r3
 8005898:	f001 fa0e 	bl	8006cb8 <RCCEx_PLL2_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058a2:	e015      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	3328      	adds	r3, #40	@ 0x28
 80058aa:	2101      	movs	r1, #1
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fab5 	bl	8006e1c <RCCEx_PLL3_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058b8:	e00a      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c0:	e006      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058c2:	bf00      	nop
 80058c4:	e004      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058c6:	bf00      	nop
 80058c8:	e002      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058ca:	bf00      	nop
 80058cc:	e000      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058d8:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e6:	4a02      	ldr	r2, [pc, #8]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80058ee:	bf00      	nop
 80058f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800590c:	2300      	movs	r3, #0
 800590e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005912:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005916:	460b      	mov	r3, r1
 8005918:	4313      	orrs	r3, r2
 800591a:	d055      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800591c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005928:	d033      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800592a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800592e:	d82c      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005934:	d02f      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593a:	d826      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800593c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005940:	d02b      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005942:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005946:	d820      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800594c:	d012      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800594e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005952:	d81a      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d022      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800595c:	d115      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800595e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005962:	3308      	adds	r3, #8
 8005964:	2101      	movs	r1, #1
 8005966:	4618      	mov	r0, r3
 8005968:	f001 f9a6 	bl	8006cb8 <RCCEx_PLL2_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005972:	e015      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005978:	3328      	adds	r3, #40	@ 0x28
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f001 fa4d 	bl	8006e1c <RCCEx_PLL3_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005988:	e00a      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005990:	e006      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005992:	bf00      	nop
 8005994:	e004      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005996:	bf00      	nop
 8005998:	e002      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800599e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059a8:	4ba3      	ldr	r3, [pc, #652]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059b8:	4a9f      	ldr	r2, [pc, #636]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ba:	430b      	orrs	r3, r1
 80059bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059be:	e003      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80059d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	d037      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f2:	d00e      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80059f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f8:	d816      	bhi.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d018      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80059fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a02:	d111      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a04:	4b8c      	ldr	r3, [pc, #560]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	4a8b      	ldr	r2, [pc, #556]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a10:	e00f      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	3308      	adds	r3, #8
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 f94c 	bl	8006cb8 <RCCEx_PLL2_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a26:	e004      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a2e:	e000      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a48:	4a7b      	ldr	r2, [pc, #492]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a4e:	e003      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	d039      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d81c      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005a82:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005ac5 	.word	0x08005ac5
 8005a8c:	08005a99 	.word	0x08005a99
 8005a90:	08005aa7 	.word	0x08005aa7
 8005a94:	08005ac5 	.word	0x08005ac5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a98:	4b67      	ldr	r3, [pc, #412]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9c:	4a66      	ldr	r2, [pc, #408]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005aa4:	e00f      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aaa:	3308      	adds	r3, #8
 8005aac:	2102      	movs	r1, #2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 f902 	bl	8006cb8 <RCCEx_PLL2_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005aba:	e004      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ace:	4b5a      	ldr	r3, [pc, #360]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad2:	f023 0103 	bic.w	r1, r3, #3
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005adc:	4a56      	ldr	r2, [pc, #344]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005b06:	460b      	mov	r3, r1
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f000 809f 	beq.w	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a4a      	ldr	r2, [pc, #296]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b1a:	f7fb fe4f 	bl	80017bc <HAL_GetTick>
 8005b1e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b22:	e00b      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b24:	f7fb fe4a 	bl	80017bc <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b64      	cmp	r3, #100	@ 0x64
 8005b32:	d903      	bls.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b3a:	e005      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ed      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d179      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b50:	4b39      	ldr	r3, [pc, #228]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b5c:	4053      	eors	r3, r2
 8005b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d015      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b66:	4b34      	ldr	r3, [pc, #208]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b72:	4b31      	ldr	r3, [pc, #196]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b76:	4a30      	ldr	r2, [pc, #192]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b82:	4a2d      	ldr	r2, [pc, #180]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b9e:	d118      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fb fe0c 	bl	80017bc <HAL_GetTick>
 8005ba4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba8:	e00d      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005baa:	f7fb fe07 	bl	80017bc <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005bb4:	1ad2      	subs	r2, r2, r3
 8005bb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d903      	bls.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005bc4:	e005      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0eb      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d129      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bea:	d10e      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005bec:	4b12      	ldr	r3, [pc, #72]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bfc:	091a      	lsrs	r2, r3, #4
 8005bfe:	4b10      	ldr	r3, [pc, #64]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	4a0d      	ldr	r2, [pc, #52]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6113      	str	r3, [r2, #16]
 8005c08:	e005      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c14:	6113      	str	r3, [r2, #16]
 8005c16:	4b08      	ldr	r3, [pc, #32]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c26:	4a04      	ldr	r2, [pc, #16]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2c:	e00e      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005c36:	e009      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	58024800 	.word	0x58024800
 8005c40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f002 0301 	and.w	r3, r2, #1
 8005c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f000 8089 	beq.w	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c74:	2b28      	cmp	r3, #40	@ 0x28
 8005c76:	d86b      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005c78:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005d59 	.word	0x08005d59
 8005c84:	08005d51 	.word	0x08005d51
 8005c88:	08005d51 	.word	0x08005d51
 8005c8c:	08005d51 	.word	0x08005d51
 8005c90:	08005d51 	.word	0x08005d51
 8005c94:	08005d51 	.word	0x08005d51
 8005c98:	08005d51 	.word	0x08005d51
 8005c9c:	08005d51 	.word	0x08005d51
 8005ca0:	08005d25 	.word	0x08005d25
 8005ca4:	08005d51 	.word	0x08005d51
 8005ca8:	08005d51 	.word	0x08005d51
 8005cac:	08005d51 	.word	0x08005d51
 8005cb0:	08005d51 	.word	0x08005d51
 8005cb4:	08005d51 	.word	0x08005d51
 8005cb8:	08005d51 	.word	0x08005d51
 8005cbc:	08005d51 	.word	0x08005d51
 8005cc0:	08005d3b 	.word	0x08005d3b
 8005cc4:	08005d51 	.word	0x08005d51
 8005cc8:	08005d51 	.word	0x08005d51
 8005ccc:	08005d51 	.word	0x08005d51
 8005cd0:	08005d51 	.word	0x08005d51
 8005cd4:	08005d51 	.word	0x08005d51
 8005cd8:	08005d51 	.word	0x08005d51
 8005cdc:	08005d51 	.word	0x08005d51
 8005ce0:	08005d59 	.word	0x08005d59
 8005ce4:	08005d51 	.word	0x08005d51
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005d51 	.word	0x08005d51
 8005cf4:	08005d51 	.word	0x08005d51
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005d51 	.word	0x08005d51
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d51 	.word	0x08005d51
 8005d08:	08005d51 	.word	0x08005d51
 8005d0c:	08005d51 	.word	0x08005d51
 8005d10:	08005d51 	.word	0x08005d51
 8005d14:	08005d51 	.word	0x08005d51
 8005d18:	08005d51 	.word	0x08005d51
 8005d1c:	08005d51 	.word	0x08005d51
 8005d20:	08005d59 	.word	0x08005d59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d28:	3308      	adds	r3, #8
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 ffc3 	bl	8006cb8 <RCCEx_PLL2_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d38:	e00f      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3e:	3328      	adds	r3, #40	@ 0x28
 8005d40:	2101      	movs	r1, #1
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 f86a 	bl	8006e1c <RCCEx_PLL3_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d4e:	e004      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d56:	e000      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d62:	4bbf      	ldr	r3, [pc, #764]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d70:	4abb      	ldr	r2, [pc, #748]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d72:	430b      	orrs	r3, r1
 8005d74:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d76:	e003      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f002 0302 	and.w	r3, r2, #2
 8005d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d90:	2300      	movs	r3, #0
 8005d92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	d041      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d824      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005daa:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005dfd 	.word	0x08005dfd
 8005db4:	08005dc9 	.word	0x08005dc9
 8005db8:	08005ddf 	.word	0x08005ddf
 8005dbc:	08005dfd 	.word	0x08005dfd
 8005dc0:	08005dfd 	.word	0x08005dfd
 8005dc4:	08005dfd 	.word	0x08005dfd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dcc:	3308      	adds	r3, #8
 8005dce:	2101      	movs	r1, #1
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 ff71 	bl	8006cb8 <RCCEx_PLL2_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ddc:	e00f      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de2:	3328      	adds	r3, #40	@ 0x28
 8005de4:	2101      	movs	r1, #1
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 f818 	bl	8006e1c <RCCEx_PLL3_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005df2:	e004      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dfa:	e000      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e06:	4b96      	ldr	r3, [pc, #600]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	f023 0107 	bic.w	r1, r3, #7
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e14:	4a92      	ldr	r2, [pc, #584]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e16:	430b      	orrs	r3, r1
 8005e18:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e1a:	e003      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f002 0304 	and.w	r3, r2, #4
 8005e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d044      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e4c:	2b05      	cmp	r3, #5
 8005e4e:	d825      	bhi.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e50:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005ea5 	.word	0x08005ea5
 8005e5c:	08005e71 	.word	0x08005e71
 8005e60:	08005e87 	.word	0x08005e87
 8005e64:	08005ea5 	.word	0x08005ea5
 8005e68:	08005ea5 	.word	0x08005ea5
 8005e6c:	08005ea5 	.word	0x08005ea5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	3308      	adds	r3, #8
 8005e76:	2101      	movs	r1, #1
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 ff1d 	bl	8006cb8 <RCCEx_PLL2_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e84:	e00f      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	3328      	adds	r3, #40	@ 0x28
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 ffc4 	bl	8006e1c <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e9a:	e004      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eae:	4b6c      	ldr	r3, [pc, #432]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb2:	f023 0107 	bic.w	r1, r3, #7
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ebe:	4a68      	ldr	r2, [pc, #416]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f002 0320 	and.w	r3, r2, #32
 8005eda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4313      	orrs	r3, r2
 8005eec:	d055      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005efa:	d033      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f00:	d82c      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f06:	d02f      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0c:	d826      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f12:	d02b      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005f14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f18:	d820      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f1e:	d012      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f24:	d81a      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d022      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f2e:	d115      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f34:	3308      	adds	r3, #8
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 febd 	bl	8006cb8 <RCCEx_PLL2_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f44:	e015      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4a:	3328      	adds	r3, #40	@ 0x28
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 ff64 	bl	8006e1c <RCCEx_PLL3_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f62:	e006      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f64:	bf00      	nop
 8005f66:	e004      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f68:	bf00      	nop
 8005f6a:	e002      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f6c:	bf00      	nop
 8005f6e:	e000      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10b      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f7a:	4b39      	ldr	r3, [pc, #228]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8a:	4a35      	ldr	r2, [pc, #212]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f90:	e003      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005faa:	2300      	movs	r3, #0
 8005fac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d058      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005fc6:	d033      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005fc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005fcc:	d82c      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd2:	d02f      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd8:	d826      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fde:	d02b      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005fe0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fe4:	d820      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fea:	d012      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ff0:	d81a      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d022      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffa:	d115      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006000:	3308      	adds	r3, #8
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fe57 	bl	8006cb8 <RCCEx_PLL2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006010:	e015      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006016:	3328      	adds	r3, #40	@ 0x28
 8006018:	2102      	movs	r1, #2
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fefe 	bl	8006e1c <RCCEx_PLL3_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006026:	e00a      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800602e:	e006      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006030:	bf00      	nop
 8006032:	e004      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006034:	bf00      	nop
 8006036:	e002      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800603c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10e      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006056:	4a02      	ldr	r2, [pc, #8]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006058:	430b      	orrs	r3, r1
 800605a:	6593      	str	r3, [r2, #88]	@ 0x58
 800605c:	e006      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800605e:	bf00      	nop
 8006060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006082:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006086:	460b      	mov	r3, r1
 8006088:	4313      	orrs	r3, r2
 800608a:	d055      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006094:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006098:	d033      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800609a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800609e:	d82c      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a4:	d02f      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80060a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060aa:	d826      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80060b0:	d02b      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80060b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80060b6:	d820      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060bc:	d012      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80060be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060c2:	d81a      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d022      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80060c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060cc:	d115      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d2:	3308      	adds	r3, #8
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fdee 	bl	8006cb8 <RCCEx_PLL2_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060e2:	e015      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e8:	3328      	adds	r3, #40	@ 0x28
 80060ea:	2102      	movs	r1, #2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fe95 	bl	8006e1c <RCCEx_PLL3_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060f8:	e00a      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006100:	e006      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006102:	bf00      	nop
 8006104:	e004      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006106:	bf00      	nop
 8006108:	e002      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800610e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006118:	4ba1      	ldr	r3, [pc, #644]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800611a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006128:	4a9d      	ldr	r2, [pc, #628]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800612a:	430b      	orrs	r3, r1
 800612c:	6593      	str	r3, [r2, #88]	@ 0x58
 800612e:	e003      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f002 0308 	and.w	r3, r2, #8
 8006144:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006148:	2300      	movs	r3, #0
 800614a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800614e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d01e      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006164:	d10c      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	3328      	adds	r3, #40	@ 0x28
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fe54 	bl	8006e1c <RCCEx_PLL3_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006180:	4b87      	ldr	r3, [pc, #540]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006184:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006190:	4a83      	ldr	r2, [pc, #524]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006192:	430b      	orrs	r3, r1
 8006194:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f002 0310 	and.w	r3, r2, #16
 80061a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061a6:	2300      	movs	r3, #0
 80061a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80061b0:	460b      	mov	r3, r1
 80061b2:	4313      	orrs	r3, r2
 80061b4:	d01e      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061c2:	d10c      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c8:	3328      	adds	r3, #40	@ 0x28
 80061ca:	2102      	movs	r1, #2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fe25 	bl	8006e1c <RCCEx_PLL3_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061de:	4b70      	ldr	r3, [pc, #448]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061ee:	4a6c      	ldr	r2, [pc, #432]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006204:	2300      	movs	r3, #0
 8006206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800620a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800620e:	460b      	mov	r3, r1
 8006210:	4313      	orrs	r3, r2
 8006212:	d03e      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800621c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006220:	d022      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006226:	d81b      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006230:	d00b      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006232:	e015      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006238:	3308      	adds	r3, #8
 800623a:	2100      	movs	r1, #0
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fd3b 	bl	8006cb8 <RCCEx_PLL2_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006248:	e00f      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800624a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624e:	3328      	adds	r3, #40	@ 0x28
 8006250:	2102      	movs	r1, #2
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fde2 	bl	8006e1c <RCCEx_PLL3_Config>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800625e:	e004      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006266:	e000      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006272:	4b4b      	ldr	r3, [pc, #300]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006282:	4a47      	ldr	r2, [pc, #284]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006284:	430b      	orrs	r3, r1
 8006286:	6593      	str	r3, [r2, #88]	@ 0x58
 8006288:	e003      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800629e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062a0:	2300      	movs	r3, #0
 80062a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80062a8:	460b      	mov	r3, r1
 80062aa:	4313      	orrs	r3, r2
 80062ac:	d03b      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062ba:	d01f      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80062bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062c0:	d818      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80062c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062c6:	d003      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80062c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062cc:	d007      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80062ce:	e011      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d0:	4b33      	ldr	r3, [pc, #204]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	4a32      	ldr	r2, [pc, #200]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062dc:	e00f      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	3328      	adds	r3, #40	@ 0x28
 80062e4:	2101      	movs	r1, #1
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fd98 	bl	8006e1c <RCCEx_PLL3_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80062f2:	e004      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062fa:	e000      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80062fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006306:	4b26      	ldr	r3, [pc, #152]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006316:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006318:	430b      	orrs	r3, r1
 800631a:	6553      	str	r3, [r2, #84]	@ 0x54
 800631c:	e003      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006332:	673b      	str	r3, [r7, #112]	@ 0x70
 8006334:	2300      	movs	r3, #0
 8006336:	677b      	str	r3, [r7, #116]	@ 0x74
 8006338:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800633c:	460b      	mov	r3, r1
 800633e:	4313      	orrs	r3, r2
 8006340:	d034      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006350:	d007      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006352:	e011      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006354:	4b12      	ldr	r3, [pc, #72]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006358:	4a11      	ldr	r2, [pc, #68]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800635a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800635e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006360:	e00e      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006366:	3308      	adds	r3, #8
 8006368:	2102      	movs	r1, #2
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fca4 	bl	8006cb8 <RCCEx_PLL2_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800637e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10d      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800638a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800638c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006396:	4a02      	ldr	r2, [pc, #8]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006398:	430b      	orrs	r3, r1
 800639a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800639c:	e006      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800639e:	bf00      	nop
 80063a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80063b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063ba:	2300      	movs	r3, #0
 80063bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80063c2:	460b      	mov	r3, r1
 80063c4:	4313      	orrs	r3, r2
 80063c6:	d00c      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063cc:	3328      	adds	r3, #40	@ 0x28
 80063ce:	2102      	movs	r1, #2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fd23 	bl	8006e1c <RCCEx_PLL3_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80063f0:	2300      	movs	r3, #0
 80063f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80063f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80063f8:	460b      	mov	r3, r1
 80063fa:	4313      	orrs	r3, r2
 80063fc:	d038      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800640a:	d018      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800640c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006410:	d811      	bhi.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006416:	d014      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800641c:	d80b      	bhi.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d011      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006426:	d106      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006428:	4bc3      	ldr	r3, [pc, #780]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800642a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642c:	4ac2      	ldr	r2, [pc, #776]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800642e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006434:	e008      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800643c:	e004      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800643e:	bf00      	nop
 8006440:	e002      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006442:	bf00      	nop
 8006444:	e000      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10b      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006450:	4bb9      	ldr	r3, [pc, #740]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006454:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006460:	4ab5      	ldr	r2, [pc, #724]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006462:	430b      	orrs	r3, r1
 8006464:	6553      	str	r3, [r2, #84]	@ 0x54
 8006466:	e003      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800646c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800647c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800647e:	2300      	movs	r3, #0
 8006480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006482:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800648c:	4baa      	ldr	r3, [pc, #680]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800648e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006490:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800649a:	4aa7      	ldr	r2, [pc, #668]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800649c:	430b      	orrs	r3, r1
 800649e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80064ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80064ae:	2300      	movs	r3, #0
 80064b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80064b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d00a      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064bc:	4b9e      	ldr	r3, [pc, #632]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80064cc:	4a9a      	ldr	r2, [pc, #616]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ce:	430b      	orrs	r3, r1
 80064d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80064de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e0:	2300      	movs	r3, #0
 80064e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80064e8:	460b      	mov	r3, r1
 80064ea:	4313      	orrs	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064ee:	4b92      	ldr	r3, [pc, #584]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064fc:	4a8e      	ldr	r2, [pc, #568]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064fe:	430b      	orrs	r3, r1
 8006500:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800650e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006510:	2300      	movs	r3, #0
 8006512:	647b      	str	r3, [r7, #68]	@ 0x44
 8006514:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006518:	460b      	mov	r3, r1
 800651a:	4313      	orrs	r3, r2
 800651c:	d00e      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800651e:	4b86      	ldr	r3, [pc, #536]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	4a85      	ldr	r2, [pc, #532]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006524:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006528:	6113      	str	r3, [r2, #16]
 800652a:	4b83      	ldr	r3, [pc, #524]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800652c:	6919      	ldr	r1, [r3, #16]
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006536:	4a80      	ldr	r2, [pc, #512]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006538:	430b      	orrs	r3, r1
 800653a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800653c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006548:	63bb      	str	r3, [r7, #56]	@ 0x38
 800654a:	2300      	movs	r3, #0
 800654c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006552:	460b      	mov	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	d009      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006558:	4b77      	ldr	r3, [pc, #476]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800655a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800655c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006566:	4a74      	ldr	r2, [pc, #464]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006568:	430b      	orrs	r3, r1
 800656a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006578:	633b      	str	r3, [r7, #48]	@ 0x30
 800657a:	2300      	movs	r3, #0
 800657c:	637b      	str	r3, [r7, #52]	@ 0x34
 800657e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006582:	460b      	mov	r3, r1
 8006584:	4313      	orrs	r3, r2
 8006586:	d00a      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006588:	4b6b      	ldr	r3, [pc, #428]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800658a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006598:	4a67      	ldr	r2, [pc, #412]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800659a:	430b      	orrs	r3, r1
 800659c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800659e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	2100      	movs	r1, #0
 80065a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80065b4:	460b      	mov	r3, r1
 80065b6:	4313      	orrs	r3, r2
 80065b8:	d011      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	3308      	adds	r3, #8
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fb78 	bl	8006cb8 <RCCEx_PLL2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	2100      	movs	r1, #0
 80065e8:	6239      	str	r1, [r7, #32]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065f4:	460b      	mov	r3, r1
 80065f6:	4313      	orrs	r3, r2
 80065f8:	d011      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fe:	3308      	adds	r3, #8
 8006600:	2101      	movs	r1, #1
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fb58 	bl	8006cb8 <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800660e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	2100      	movs	r1, #0
 8006628:	61b9      	str	r1, [r7, #24]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d011      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	3308      	adds	r3, #8
 8006640:	2102      	movs	r1, #2
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fb38 	bl	8006cb8 <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800664e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	2100      	movs	r1, #0
 8006668:	6139      	str	r1, [r7, #16]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006674:	460b      	mov	r3, r1
 8006676:	4313      	orrs	r3, r2
 8006678:	d011      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	3328      	adds	r3, #40	@ 0x28
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fbca 	bl	8006e1c <RCCEx_PLL3_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800668e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	2100      	movs	r1, #0
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	f003 0310 	and.w	r3, r3, #16
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d011      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	3328      	adds	r3, #40	@ 0x28
 80066c0:	2101      	movs	r1, #1
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fbaa 	bl	8006e1c <RCCEx_PLL3_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	2100      	movs	r1, #0
 80066e8:	6039      	str	r1, [r7, #0]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d011      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	3328      	adds	r3, #40	@ 0x28
 8006700:	2102      	movs	r1, #2
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fb8a 	bl	8006e1c <RCCEx_PLL3_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800670e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800671e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	e000      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
}
 800672c:	4618      	mov	r0, r3
 800672e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006732:	46bd      	mov	sp, r7
 8006734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006738:	58024400 	.word	0x58024400

0800673c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006740:	f7fe fd96 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 8006744:	4602      	mov	r2, r0
 8006746:	4b06      	ldr	r3, [pc, #24]	@ (8006760 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	4904      	ldr	r1, [pc, #16]	@ (8006764 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006752:	5ccb      	ldrb	r3, [r1, r3]
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd80      	pop	{r7, pc}
 8006760:	58024400 	.word	0x58024400
 8006764:	08009d34 	.word	0x08009d34

08006768 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006768:	b480      	push	{r7}
 800676a:	b089      	sub	sp, #36	@ 0x24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006770:	4ba1      	ldr	r3, [pc, #644]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006774:	f003 0303 	and.w	r3, r3, #3
 8006778:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800677a:	4b9f      	ldr	r3, [pc, #636]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677e:	0b1b      	lsrs	r3, r3, #12
 8006780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006784:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006786:	4b9c      	ldr	r3, [pc, #624]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006792:	4b99      	ldr	r3, [pc, #612]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	fb02 f303 	mul.w	r3, r2, r3
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8111 	beq.w	80069d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	f000 8083 	beq.w	80068c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	f200 80a1 	bhi.w	8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d056      	beq.n	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067d2:	e099      	b.n	8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067d4:	4b88      	ldr	r3, [pc, #544]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d02d      	beq.n	800683c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067e0:	4b85      	ldr	r3, [pc, #532]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	08db      	lsrs	r3, r3, #3
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	4a84      	ldr	r2, [pc, #528]	@ (80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
 80067f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	ee07 3a90 	vmov	s15, r3
 80067f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680a:	4b7b      	ldr	r3, [pc, #492]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681a:	ed97 6a03 	vldr	s12, [r7, #12]
 800681e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800682e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006836:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800683a:	e087      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006846:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800684a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684e:	4b6a      	ldr	r3, [pc, #424]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006862:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800687e:	e065      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800688e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006892:	4b59      	ldr	r3, [pc, #356]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068c2:	e043      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d6:	4b48      	ldr	r3, [pc, #288]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006906:	e021      	b.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691a:	4b37      	ldr	r3, [pc, #220]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	ed97 6a03 	vldr	s12, [r7, #12]
 800692e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800693e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800694a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800694c:	4b2a      	ldr	r3, [pc, #168]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006950:	0a5b      	lsrs	r3, r3, #9
 8006952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006966:	edd7 6a07 	vldr	s13, [r7, #28]
 800696a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006972:	ee17 2a90 	vmov	r2, s15
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800697a:	4b1f      	ldr	r3, [pc, #124]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697e:	0c1b      	lsrs	r3, r3, #16
 8006980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006984:	ee07 3a90 	vmov	s15, r3
 8006988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006990:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006994:	edd7 6a07 	vldr	s13, [r7, #28]
 8006998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800699c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069a0:	ee17 2a90 	vmov	r2, s15
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069a8:	4b13      	ldr	r3, [pc, #76]	@ (80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	0e1b      	lsrs	r3, r3, #24
 80069ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ce:	ee17 2a90 	vmov	r2, s15
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069d6:	e008      	b.n	80069ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	609a      	str	r2, [r3, #8]
}
 80069ea:	bf00      	nop
 80069ec:	3724      	adds	r7, #36	@ 0x24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	58024400 	.word	0x58024400
 80069fc:	03d09000 	.word	0x03d09000
 8006a00:	46000000 	.word	0x46000000
 8006a04:	4c742400 	.word	0x4c742400
 8006a08:	4a742400 	.word	0x4a742400
 8006a0c:	4bbebc20 	.word	0x4bbebc20

08006a10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b089      	sub	sp, #36	@ 0x24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a18:	4ba1      	ldr	r3, [pc, #644]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1c:	f003 0303 	and.w	r3, r3, #3
 8006a20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a22:	4b9f      	ldr	r3, [pc, #636]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	0d1b      	lsrs	r3, r3, #20
 8006a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a2e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a3a:	4b99      	ldr	r3, [pc, #612]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	08db      	lsrs	r3, r3, #3
 8006a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8111 	beq.w	8006c80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	f000 8083 	beq.w	8006b6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	f200 80a1 	bhi.w	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d056      	beq.n	8006b28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a7a:	e099      	b.n	8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a7c:	4b88      	ldr	r3, [pc, #544]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d02d      	beq.n	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a88:	4b85      	ldr	r3, [pc, #532]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	08db      	lsrs	r3, r3, #3
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	4a84      	ldr	r2, [pc, #528]	@ (8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
 8006a98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ade:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ae2:	e087      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af6:	4b6a      	ldr	r3, [pc, #424]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b26:	e065      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3a:	4b59      	ldr	r3, [pc, #356]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b6a:	e043      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7e:	4b48      	ldr	r3, [pc, #288]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bae:	e021      	b.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc2:	4b37      	ldr	r3, [pc, #220]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf8:	0a5b      	lsrs	r3, r3, #9
 8006bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1a:	ee17 2a90 	vmov	r2, s15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c22:	4b1f      	ldr	r3, [pc, #124]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c26:	0c1b      	lsrs	r3, r3, #16
 8006c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c2c:	ee07 3a90 	vmov	s15, r3
 8006c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c48:	ee17 2a90 	vmov	r2, s15
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c50:	4b13      	ldr	r3, [pc, #76]	@ (8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c54:	0e1b      	lsrs	r3, r3, #24
 8006c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c76:	ee17 2a90 	vmov	r2, s15
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c7e:	e008      	b.n	8006c92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	609a      	str	r2, [r3, #8]
}
 8006c92:	bf00      	nop
 8006c94:	3724      	adds	r7, #36	@ 0x24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	58024400 	.word	0x58024400
 8006ca4:	03d09000 	.word	0x03d09000
 8006ca8:	46000000 	.word	0x46000000
 8006cac:	4c742400 	.word	0x4c742400
 8006cb0:	4a742400 	.word	0x4a742400
 8006cb4:	4bbebc20 	.word	0x4bbebc20

08006cb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cc6:	4b53      	ldr	r3, [pc, #332]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d101      	bne.n	8006cd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e099      	b.n	8006e0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a4e      	ldr	r2, [pc, #312]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ce2:	f7fa fd6b 	bl	80017bc <HAL_GetTick>
 8006ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ce8:	e008      	b.n	8006cfc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cea:	f7fa fd67 	bl	80017bc <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e086      	b.n	8006e0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cfc:	4b45      	ldr	r3, [pc, #276]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f0      	bne.n	8006cea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d08:	4b42      	ldr	r3, [pc, #264]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	493f      	ldr	r1, [pc, #252]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	025b      	lsls	r3, r3, #9
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	431a      	orrs	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	041b      	lsls	r3, r3, #16
 8006d3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	061b      	lsls	r3, r3, #24
 8006d48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d4c:	4931      	ldr	r1, [pc, #196]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d52:	4b30      	ldr	r3, [pc, #192]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	492d      	ldr	r1, [pc, #180]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d64:	4b2b      	ldr	r3, [pc, #172]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	f023 0220 	bic.w	r2, r3, #32
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	4928      	ldr	r1, [pc, #160]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d76:	4b27      	ldr	r3, [pc, #156]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7a:	4a26      	ldr	r2, [pc, #152]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	f023 0310 	bic.w	r3, r3, #16
 8006d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d82:	4b24      	ldr	r3, [pc, #144]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d86:	4b24      	ldr	r3, [pc, #144]	@ (8006e18 <RCCEx_PLL2_Config+0x160>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	69d2      	ldr	r2, [r2, #28]
 8006d8e:	00d2      	lsls	r2, r2, #3
 8006d90:	4920      	ldr	r1, [pc, #128]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d96:	4b1f      	ldr	r3, [pc, #124]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	f043 0310 	orr.w	r3, r3, #16
 8006da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006da8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	4a19      	ldr	r2, [pc, #100]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006dae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006db2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006db4:	e00f      	b.n	8006dd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d106      	bne.n	8006dca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006dbc:	4b15      	ldr	r3, [pc, #84]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	4a14      	ldr	r2, [pc, #80]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006dc8:	e005      	b.n	8006dd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006dca:	4b12      	ldr	r3, [pc, #72]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dce:	4a11      	ldr	r2, [pc, #68]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006dd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a0e      	ldr	r2, [pc, #56]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de2:	f7fa fceb 	bl	80017bc <HAL_GetTick>
 8006de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006de8:	e008      	b.n	8006dfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dea:	f7fa fce7 	bl	80017bc <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e006      	b.n	8006e0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <RCCEx_PLL2_Config+0x15c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0f0      	beq.n	8006dea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	58024400 	.word	0x58024400
 8006e18:	ffff0007 	.word	0xffff0007

08006e1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e2a:	4b53      	ldr	r3, [pc, #332]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d101      	bne.n	8006e3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e099      	b.n	8006f6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a4e      	ldr	r2, [pc, #312]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e46:	f7fa fcb9 	bl	80017bc <HAL_GetTick>
 8006e4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e4c:	e008      	b.n	8006e60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e4e:	f7fa fcb5 	bl	80017bc <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e086      	b.n	8006f6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e60:	4b45      	ldr	r3, [pc, #276]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f0      	bne.n	8006e4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e6c:	4b42      	ldr	r3, [pc, #264]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	051b      	lsls	r3, r3, #20
 8006e7a:	493f      	ldr	r1, [pc, #252]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	025b      	lsls	r3, r3, #9
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	431a      	orrs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	041b      	lsls	r3, r3, #16
 8006e9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	061b      	lsls	r3, r3, #24
 8006eac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006eb0:	4931      	ldr	r1, [pc, #196]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006eb6:	4b30      	ldr	r3, [pc, #192]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	492d      	ldr	r1, [pc, #180]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	4928      	ldr	r1, [pc, #160]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006eda:	4b27      	ldr	r3, [pc, #156]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	4a26      	ldr	r2, [pc, #152]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ee6:	4b24      	ldr	r3, [pc, #144]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eea:	4b24      	ldr	r3, [pc, #144]	@ (8006f7c <RCCEx_PLL3_Config+0x160>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	69d2      	ldr	r2, [r2, #28]
 8006ef2:	00d2      	lsls	r2, r2, #3
 8006ef4:	4920      	ldr	r1, [pc, #128]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006efa:	4b1f      	ldr	r3, [pc, #124]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	4a1e      	ldr	r2, [pc, #120]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f10:	4a19      	ldr	r2, [pc, #100]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f18:	e00f      	b.n	8006f3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d106      	bne.n	8006f2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f20:	4b15      	ldr	r3, [pc, #84]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	4a14      	ldr	r2, [pc, #80]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f2c:	e005      	b.n	8006f3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f2e:	4b12      	ldr	r3, [pc, #72]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f32:	4a11      	ldr	r2, [pc, #68]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f46:	f7fa fc39 	bl	80017bc <HAL_GetTick>
 8006f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f4c:	e008      	b.n	8006f60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f4e:	f7fa fc35 	bl	80017bc <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e006      	b.n	8006f6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f60:	4b05      	ldr	r3, [pc, #20]	@ (8006f78 <RCCEx_PLL3_Config+0x15c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	ffff0007 	.word	0xffff0007

08006f80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e10f      	b.n	80071b2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a87      	ldr	r2, [pc, #540]	@ (80071bc <HAL_SPI_Init+0x23c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00f      	beq.n	8006fc2 <HAL_SPI_Init+0x42>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a86      	ldr	r2, [pc, #536]	@ (80071c0 <HAL_SPI_Init+0x240>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00a      	beq.n	8006fc2 <HAL_SPI_Init+0x42>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a84      	ldr	r2, [pc, #528]	@ (80071c4 <HAL_SPI_Init+0x244>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d005      	beq.n	8006fc2 <HAL_SPI_Init+0x42>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2b0f      	cmp	r3, #15
 8006fbc:	d901      	bls.n	8006fc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e0f7      	b.n	80071b2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fe04 	bl	8007bd0 <SPI_GetPacketSize>
 8006fc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a7b      	ldr	r2, [pc, #492]	@ (80071bc <HAL_SPI_Init+0x23c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00c      	beq.n	8006fee <HAL_SPI_Init+0x6e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a79      	ldr	r2, [pc, #484]	@ (80071c0 <HAL_SPI_Init+0x240>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <HAL_SPI_Init+0x6e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a78      	ldr	r2, [pc, #480]	@ (80071c4 <HAL_SPI_Init+0x244>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d002      	beq.n	8006fee <HAL_SPI_Init+0x6e>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d811      	bhi.n	8007012 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ff2:	4a72      	ldr	r2, [pc, #456]	@ (80071bc <HAL_SPI_Init+0x23c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d009      	beq.n	800700c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a70      	ldr	r2, [pc, #448]	@ (80071c0 <HAL_SPI_Init+0x240>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <HAL_SPI_Init+0x8c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a6f      	ldr	r2, [pc, #444]	@ (80071c4 <HAL_SPI_Init+0x244>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d104      	bne.n	8007016 <HAL_SPI_Init+0x96>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b10      	cmp	r3, #16
 8007010:	d901      	bls.n	8007016 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e0cd      	b.n	80071b2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7f9 ff9e 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0201 	bic.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007052:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800705c:	d119      	bne.n	8007092 <HAL_SPI_Init+0x112>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007066:	d103      	bne.n	8007070 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10c      	bne.n	8007092 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800707c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007080:	d107      	bne.n	8007092 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007090:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00f      	beq.n	80070be <HAL_SPI_Init+0x13e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2b06      	cmp	r3, #6
 80070a4:	d90b      	bls.n	80070be <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e007      	b.n	80070ce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	69da      	ldr	r2, [r3, #28]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e0:	ea42 0103 	orr.w	r1, r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800712e:	ea42 0103 	orr.w	r1, r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d113      	bne.n	800716e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007158:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800716c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40013000 	.word	0x40013000
 80071c0:	40003800 	.word	0x40003800
 80071c4:	40003c00 	.word	0x40003c00

080071c8 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_SPI_Transmit_IT+0x1a>
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e08b      	b.n	80072fe <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d001      	beq.n	80071f6 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
 80071f4:	e083      	b.n	80072fe <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_SPI_Transmit_IT+0x3c>
 8007200:	2302      	movs	r3, #2
 8007202:	e07c      	b.n	80072fe <HAL_SPI_Transmit_IT+0x136>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2203      	movs	r2, #3
 8007210:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	88fa      	ldrh	r2, [r7, #6]
 8007226:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	88fa      	ldrh	r2, [r7, #6]
 800722e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b0f      	cmp	r3, #15
 8007254:	d903      	bls.n	800725e <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4a2c      	ldr	r2, [pc, #176]	@ (800730c <HAL_SPI_Transmit_IT+0x144>)
 800725a:	675a      	str	r2, [r3, #116]	@ 0x74
 800725c:	e00a      	b.n	8007274 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	2b07      	cmp	r3, #7
 8007264:	d903      	bls.n	800726e <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a29      	ldr	r2, [pc, #164]	@ (8007310 <HAL_SPI_Transmit_IT+0x148>)
 800726a:	675a      	str	r2, [r3, #116]	@ 0x74
 800726c:	e002      	b.n	8007274 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a28      	ldr	r2, [pc, #160]	@ (8007314 <HAL_SPI_Transmit_IT+0x14c>)
 8007272:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800727c:	d108      	bne.n	8007290 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	e009      	b.n	80072a4 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80072a2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007318 <HAL_SPI_Transmit_IT+0x150>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	88f9      	ldrh	r1, [r7, #6]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6919      	ldr	r1, [r3, #16]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	f240 732a 	movw	r3, #1834	@ 0x72a
 80072de:	430b      	orrs	r3, r1
 80072e0:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072ea:	d107      	bne.n	80072fc <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	08007a37 	.word	0x08007a37
 8007310:	080079d9 	.word	0x080079d9
 8007314:	0800797f 	.word	0x0800797f
 8007318:	ffff0000 	.word	0xffff0000

0800731c <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b01      	cmp	r3, #1
 8007334:	d001      	beq.n	800733a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8007336:	2302      	movs	r3, #2
 8007338:	e08b      	b.n	8007452 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <HAL_SPI_Receive_IT+0x2a>
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e083      	b.n	8007452 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_SPI_Receive_IT+0x3c>
 8007354:	2302      	movs	r3, #2
 8007356:	e07c      	b.n	8007452 <HAL_SPI_Receive_IT+0x136>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2204      	movs	r2, #4
 8007364:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	88fa      	ldrh	r2, [r7, #6]
 800737a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b0f      	cmp	r3, #15
 80073a8:	d903      	bls.n	80073b2 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007460 <HAL_SPI_Receive_IT+0x144>)
 80073ae:	671a      	str	r2, [r3, #112]	@ 0x70
 80073b0:	e00a      	b.n	80073c8 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2b07      	cmp	r3, #7
 80073b8:	d903      	bls.n	80073c2 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4a29      	ldr	r2, [pc, #164]	@ (8007464 <HAL_SPI_Receive_IT+0x148>)
 80073be:	671a      	str	r2, [r3, #112]	@ 0x70
 80073c0:	e002      	b.n	80073c8 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a28      	ldr	r2, [pc, #160]	@ (8007468 <HAL_SPI_Receive_IT+0x14c>)
 80073c6:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80073d0:	d108      	bne.n	80073e4 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	e009      	b.n	80073f8 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80073f6:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	4b1b      	ldr	r3, [pc, #108]	@ (800746c <HAL_SPI_Receive_IT+0x150>)
 8007400:	4013      	ands	r3, r2
 8007402:	88f9      	ldrh	r1, [r7, #6]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	430b      	orrs	r3, r1
 800740a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6919      	ldr	r1, [r3, #16]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	f240 7349 	movw	r3, #1865	@ 0x749
 8007432:	430b      	orrs	r3, r1
 8007434:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800743e:	d107      	bne.n	8007450 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800744e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	08007927 	.word	0x08007927
 8007464:	080078c7 	.word	0x080078c7
 8007468:	08007869 	.word	0x08007869
 800746c:	ffff0000 	.word	0xffff0000

08007470 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08a      	sub	sp, #40	@ 0x28
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007488:	6a3a      	ldr	r2, [r7, #32]
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4013      	ands	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007498:	2300      	movs	r3, #0
 800749a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074a2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3330      	adds	r3, #48	@ 0x30
 80074aa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d010      	beq.n	80074d8 <HAL_SPI_IRQHandler+0x68>
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074ce:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9a5 	bl	8007820 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80074d6:	e192      	b.n	80077fe <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d113      	bne.n	800750a <HAL_SPI_IRQHandler+0x9a>
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10e      	bne.n	800750a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
    hspi->RxISR(hspi);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
    handled = 1UL;
 8007506:	2301      	movs	r3, #1
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10f      	bne.n	8007534 <HAL_SPI_IRQHandler+0xc4>
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007524:	2b00      	cmp	r3, #0
 8007526:	d105      	bne.n	8007534 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
    handled = 1UL;
 8007530:	2301      	movs	r3, #1
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10f      	bne.n	800755e <HAL_SPI_IRQHandler+0xee>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800754e:	2b00      	cmp	r3, #0
 8007550:	d105      	bne.n	800755e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
    handled = 1UL;
 800755a:	2301      	movs	r3, #1
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	f040 8147 	bne.w	80077f4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 808b 	beq.w	8007688 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0208 	orr.w	r2, r2, #8
 8007580:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699a      	ldr	r2, [r3, #24]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0210 	orr.w	r2, r2, #16
 8007590:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075a0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0208 	bic.w	r2, r2, #8
 80075b0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d13d      	bne.n	800763c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80075c0:	e036      	b.n	8007630 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	2b0f      	cmp	r3, #15
 80075c8:	d90b      	bls.n	80075e2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80075d4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075da:	1d1a      	adds	r2, r3, #4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	665a      	str	r2, [r3, #100]	@ 0x64
 80075e0:	e01d      	b.n	800761e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	2b07      	cmp	r3, #7
 80075e8:	d90b      	bls.n	8007602 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	8812      	ldrh	r2, [r2, #0]
 80075f2:	b292      	uxth	r2, r2
 80075f4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075fa:	1c9a      	adds	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	665a      	str	r2, [r3, #100]	@ 0x64
 8007600:	e00d      	b.n	800761e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1c2      	bne.n	80075c2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fa27 	bl	8007a90 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7f9 f98b 	bl	8000970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800765a:	e0d0      	b.n	80077fe <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800765c:	7cfb      	ldrb	r3, [r7, #19]
 800765e:	2b05      	cmp	r3, #5
 8007660:	d103      	bne.n	800766a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8d2 	bl	800780c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007668:	e0c6      	b.n	80077f8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800766a:	7cfb      	ldrb	r3, [r7, #19]
 800766c:	2b04      	cmp	r3, #4
 800766e:	d103      	bne.n	8007678 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7f9 f949 	bl	8000908 <HAL_SPI_RxCpltCallback>
    return;
 8007676:	e0bf      	b.n	80077f8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007678:	7cfb      	ldrb	r3, [r7, #19]
 800767a:	2b03      	cmp	r3, #3
 800767c:	f040 80bc 	bne.w	80077f8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7f9 f961 	bl	8000948 <HAL_SPI_TxCpltCallback>
    return;
 8007686:	e0b7      	b.n	80077f8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80b5 	beq.w	80077fe <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00f      	beq.n	80076be <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076a4:	f043 0204 	orr.w	r2, r3, #4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	699a      	ldr	r2, [r3, #24]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076bc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00f      	beq.n	80076e8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ce:	f043 0201 	orr.w	r2, r3, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076e6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00f      	beq.n	8007712 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f8:	f043 0208 	orr.w	r2, r3, #8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	699a      	ldr	r2, [r3, #24]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007710:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	f003 0320 	and.w	r3, r3, #32
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00f      	beq.n	800773c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007722:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0220 	orr.w	r2, r2, #32
 800773a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007742:	2b00      	cmp	r3, #0
 8007744:	d05a      	beq.n	80077fc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0201 	bic.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6919      	ldr	r1, [r3, #16]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	4b28      	ldr	r3, [pc, #160]	@ (8007804 <HAL_SPI_IRQHandler+0x394>)
 8007762:	400b      	ands	r3, r1
 8007764:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800776c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007770:	d138      	bne.n	80077e4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007780:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d013      	beq.n	80077b2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778e:	4a1e      	ldr	r2, [pc, #120]	@ (8007808 <HAL_SPI_IRQHandler+0x398>)
 8007790:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007796:	4618      	mov	r0, r3
 8007798:	f7fa f970 	bl	8001a7c <HAL_DMA_Abort_IT>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d020      	beq.n	80077fc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077be:	4a12      	ldr	r2, [pc, #72]	@ (8007808 <HAL_SPI_IRQHandler+0x398>)
 80077c0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fa f958 	bl	8001a7c <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d014      	beq.n	80077fc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077e2:	e00b      	b.n	80077fc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7f9 f8bf 	bl	8000970 <HAL_SPI_ErrorCallback>
    return;
 80077f2:	e003      	b.n	80077fc <HAL_SPI_IRQHandler+0x38c>
    return;
 80077f4:	bf00      	nop
 80077f6:	e002      	b.n	80077fe <HAL_SPI_IRQHandler+0x38e>
    return;
 80077f8:	bf00      	nop
 80077fa:	e000      	b.n	80077fe <HAL_SPI_IRQHandler+0x38e>
    return;
 80077fc:	bf00      	nop
  }
}
 80077fe:	3728      	adds	r7, #40	@ 0x28
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	fffffc94 	.word	0xfffffc94
 8007808:	08007835 	.word	0x08007835

0800780c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007840:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7f9 f888 	bl	8000970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800787c:	7812      	ldrb	r2, [r2, #0]
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d107      	bne.n	80078ba <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0201 	bic.w	r2, r2, #1
 80078b8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3330      	adds	r3, #48	@ 0x30
 80078d4:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	8812      	ldrh	r2, [r2, #0]
 80078de:	b292      	uxth	r2, r2
 80078e0:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e6:	1c9a      	adds	r2, r3, #2
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0201 	bic.w	r2, r2, #1
 8007918:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007936:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007938:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800793e:	1d1a      	adds	r2, r3, #4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d107      	bne.n	8007972 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0201 	bic.w	r2, r2, #1
 8007970:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3320      	adds	r3, #32
 8007990:	7812      	ldrb	r2, [r2, #0]
 8007992:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0202 	bic.w	r2, r2, #2
 80079ca:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3320      	adds	r3, #32
 80079e6:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ec:	881a      	ldrh	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f6:	1c9a      	adds	r2, r3, #2
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0202 	bic.w	r2, r2, #2
 8007a28:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6812      	ldr	r2, [r2, #0]
 8007a48:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a4e:	1d1a      	adds	r2, r3, #4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d107      	bne.n	8007a82 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0202 	bic.w	r2, r2, #2
 8007a80:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0208 	orr.w	r2, r2, #8
 8007aae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0210 	orr.w	r2, r2, #16
 8007abe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0201 	bic.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6919      	ldr	r1, [r3, #16]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	4b3c      	ldr	r3, [pc, #240]	@ (8007bcc <SPI_CloseTransfer+0x13c>)
 8007adc:	400b      	ands	r3, r1
 8007ade:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007aee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d014      	beq.n	8007b26 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00f      	beq.n	8007b26 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0220 	orr.w	r2, r2, #32
 8007b24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d014      	beq.n	8007b5c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00f      	beq.n	8007b5c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b42:	f043 0204 	orr.w	r2, r3, #4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b5a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00f      	beq.n	8007b86 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b6c:	f043 0201 	orr.w	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b84:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00f      	beq.n	8007bb0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b96:	f043 0208 	orr.w	r2, r3, #8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007bc0:	bf00      	nop
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	fffffc90 	.word	0xfffffc90

08007bd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	3301      	adds	r3, #1
 8007be8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	3307      	adds	r3, #7
 8007bee:	08db      	lsrs	r3, r3, #3
 8007bf0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e042      	b.n	8007c9e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f83b 	bl	8007ca6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2224      	movs	r2, #36	@ 0x24
 8007c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0201 	bic.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fe29 	bl	80088a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f8be 	bl	8007dd8 <UART_SetConfig>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e01b      	b.n	8007c9e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0201 	orr.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fea8 	bl	80089ec <UART_CheckIdleState>
 8007c9c:	4603      	mov	r3, r0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b08a      	sub	sp, #40	@ 0x28
 8007cbe:	af02      	add	r7, sp, #8
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	603b      	str	r3, [r7, #0]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d17b      	bne.n	8007dcc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <HAL_UART_Transmit+0x26>
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e074      	b.n	8007dce <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2221      	movs	r2, #33	@ 0x21
 8007cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cf4:	f7f9 fd62 	bl	80017bc <HAL_GetTick>
 8007cf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	88fa      	ldrh	r2, [r7, #6]
 8007cfe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	88fa      	ldrh	r2, [r7, #6]
 8007d06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d12:	d108      	bne.n	8007d26 <HAL_UART_Transmit+0x6c>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	e003      	b.n	8007d2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d2e:	e030      	b.n	8007d92 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2200      	movs	r2, #0
 8007d38:	2180      	movs	r1, #128	@ 0x80
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 ff00 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e03d      	b.n	8007dce <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	e007      	b.n	8007d80 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	781a      	ldrb	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1c8      	bne.n	8007d30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2200      	movs	r2, #0
 8007da6:	2140      	movs	r1, #64	@ 0x40
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 fec9 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e006      	b.n	8007dce <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e000      	b.n	8007dce <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007dcc:	2302      	movs	r3, #2
  }
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ddc:	b092      	sub	sp, #72	@ 0x48
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	431a      	orrs	r2, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4bbe      	ldr	r3, [pc, #760]	@ (8008100 <UART_SetConfig+0x328>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	6812      	ldr	r2, [r2, #0]
 8007e0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4ab3      	ldr	r2, [pc, #716]	@ (8008104 <UART_SetConfig+0x32c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d004      	beq.n	8007e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e40:	4313      	orrs	r3, r2
 8007e42:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	4baf      	ldr	r3, [pc, #700]	@ (8008108 <UART_SetConfig+0x330>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	6812      	ldr	r2, [r2, #0]
 8007e52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e54:	430b      	orrs	r3, r1
 8007e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5e:	f023 010f 	bic.w	r1, r3, #15
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4aa6      	ldr	r2, [pc, #664]	@ (800810c <UART_SetConfig+0x334>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d177      	bne.n	8007f68 <UART_SetConfig+0x190>
 8007e78:	4ba5      	ldr	r3, [pc, #660]	@ (8008110 <UART_SetConfig+0x338>)
 8007e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e80:	2b28      	cmp	r3, #40	@ 0x28
 8007e82:	d86d      	bhi.n	8007f60 <UART_SetConfig+0x188>
 8007e84:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <UART_SetConfig+0xb4>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007f31 	.word	0x08007f31
 8007e90:	08007f61 	.word	0x08007f61
 8007e94:	08007f61 	.word	0x08007f61
 8007e98:	08007f61 	.word	0x08007f61
 8007e9c:	08007f61 	.word	0x08007f61
 8007ea0:	08007f61 	.word	0x08007f61
 8007ea4:	08007f61 	.word	0x08007f61
 8007ea8:	08007f61 	.word	0x08007f61
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007f61 	.word	0x08007f61
 8007eb4:	08007f61 	.word	0x08007f61
 8007eb8:	08007f61 	.word	0x08007f61
 8007ebc:	08007f61 	.word	0x08007f61
 8007ec0:	08007f61 	.word	0x08007f61
 8007ec4:	08007f61 	.word	0x08007f61
 8007ec8:	08007f61 	.word	0x08007f61
 8007ecc:	08007f41 	.word	0x08007f41
 8007ed0:	08007f61 	.word	0x08007f61
 8007ed4:	08007f61 	.word	0x08007f61
 8007ed8:	08007f61 	.word	0x08007f61
 8007edc:	08007f61 	.word	0x08007f61
 8007ee0:	08007f61 	.word	0x08007f61
 8007ee4:	08007f61 	.word	0x08007f61
 8007ee8:	08007f61 	.word	0x08007f61
 8007eec:	08007f49 	.word	0x08007f49
 8007ef0:	08007f61 	.word	0x08007f61
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	08007f61 	.word	0x08007f61
 8007efc:	08007f61 	.word	0x08007f61
 8007f00:	08007f61 	.word	0x08007f61
 8007f04:	08007f61 	.word	0x08007f61
 8007f08:	08007f61 	.word	0x08007f61
 8007f0c:	08007f51 	.word	0x08007f51
 8007f10:	08007f61 	.word	0x08007f61
 8007f14:	08007f61 	.word	0x08007f61
 8007f18:	08007f61 	.word	0x08007f61
 8007f1c:	08007f61 	.word	0x08007f61
 8007f20:	08007f61 	.word	0x08007f61
 8007f24:	08007f61 	.word	0x08007f61
 8007f28:	08007f61 	.word	0x08007f61
 8007f2c:	08007f59 	.word	0x08007f59
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e222      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f38:	2304      	movs	r3, #4
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e21e      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f40:	2308      	movs	r3, #8
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e21a      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4e:	e216      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f50:	2320      	movs	r3, #32
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f56:	e212      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f58:	2340      	movs	r3, #64	@ 0x40
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5e:	e20e      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f60:	2380      	movs	r3, #128	@ 0x80
 8007f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f66:	e20a      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a69      	ldr	r2, [pc, #420]	@ (8008114 <UART_SetConfig+0x33c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d130      	bne.n	8007fd4 <UART_SetConfig+0x1fc>
 8007f72:	4b67      	ldr	r3, [pc, #412]	@ (8008110 <UART_SetConfig+0x338>)
 8007f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d826      	bhi.n	8007fcc <UART_SetConfig+0x1f4>
 8007f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f84 <UART_SetConfig+0x1ac>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007f9d 	.word	0x08007f9d
 8007f88:	08007fa5 	.word	0x08007fa5
 8007f8c:	08007fad 	.word	0x08007fad
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fc5 	.word	0x08007fc5
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa2:	e1ec      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007faa:	e1e8      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fac:	2308      	movs	r3, #8
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb2:	e1e4      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fba:	e1e0      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc2:	e1dc      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fc4:	2340      	movs	r3, #64	@ 0x40
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fca:	e1d8      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fcc:	2380      	movs	r3, #128	@ 0x80
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd2:	e1d4      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a4f      	ldr	r2, [pc, #316]	@ (8008118 <UART_SetConfig+0x340>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d130      	bne.n	8008040 <UART_SetConfig+0x268>
 8007fde:	4b4c      	ldr	r3, [pc, #304]	@ (8008110 <UART_SetConfig+0x338>)
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b05      	cmp	r3, #5
 8007fe8:	d826      	bhi.n	8008038 <UART_SetConfig+0x260>
 8007fea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <UART_SetConfig+0x218>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008009 	.word	0x08008009
 8007ff4:	08008011 	.word	0x08008011
 8007ff8:	08008019 	.word	0x08008019
 8007ffc:	08008021 	.word	0x08008021
 8008000:	08008029 	.word	0x08008029
 8008004:	08008031 	.word	0x08008031
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e1b6      	b.n	800837e <UART_SetConfig+0x5a6>
 8008010:	2304      	movs	r3, #4
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008016:	e1b2      	b.n	800837e <UART_SetConfig+0x5a6>
 8008018:	2308      	movs	r3, #8
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801e:	e1ae      	b.n	800837e <UART_SetConfig+0x5a6>
 8008020:	2310      	movs	r3, #16
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008026:	e1aa      	b.n	800837e <UART_SetConfig+0x5a6>
 8008028:	2320      	movs	r3, #32
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802e:	e1a6      	b.n	800837e <UART_SetConfig+0x5a6>
 8008030:	2340      	movs	r3, #64	@ 0x40
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008036:	e1a2      	b.n	800837e <UART_SetConfig+0x5a6>
 8008038:	2380      	movs	r3, #128	@ 0x80
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800803e:	e19e      	b.n	800837e <UART_SetConfig+0x5a6>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a35      	ldr	r2, [pc, #212]	@ (800811c <UART_SetConfig+0x344>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d130      	bne.n	80080ac <UART_SetConfig+0x2d4>
 800804a:	4b31      	ldr	r3, [pc, #196]	@ (8008110 <UART_SetConfig+0x338>)
 800804c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b05      	cmp	r3, #5
 8008054:	d826      	bhi.n	80080a4 <UART_SetConfig+0x2cc>
 8008056:	a201      	add	r2, pc, #4	@ (adr r2, 800805c <UART_SetConfig+0x284>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008075 	.word	0x08008075
 8008060:	0800807d 	.word	0x0800807d
 8008064:	08008085 	.word	0x08008085
 8008068:	0800808d 	.word	0x0800808d
 800806c:	08008095 	.word	0x08008095
 8008070:	0800809d 	.word	0x0800809d
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e180      	b.n	800837e <UART_SetConfig+0x5a6>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008082:	e17c      	b.n	800837e <UART_SetConfig+0x5a6>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808a:	e178      	b.n	800837e <UART_SetConfig+0x5a6>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008092:	e174      	b.n	800837e <UART_SetConfig+0x5a6>
 8008094:	2320      	movs	r3, #32
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e170      	b.n	800837e <UART_SetConfig+0x5a6>
 800809c:	2340      	movs	r3, #64	@ 0x40
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e16c      	b.n	800837e <UART_SetConfig+0x5a6>
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080aa:	e168      	b.n	800837e <UART_SetConfig+0x5a6>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008120 <UART_SetConfig+0x348>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d142      	bne.n	800813c <UART_SetConfig+0x364>
 80080b6:	4b16      	ldr	r3, [pc, #88]	@ (8008110 <UART_SetConfig+0x338>)
 80080b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d838      	bhi.n	8008134 <UART_SetConfig+0x35c>
 80080c2:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <UART_SetConfig+0x2f0>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e1 	.word	0x080080e1
 80080cc:	080080e9 	.word	0x080080e9
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008125 	.word	0x08008125
 80080dc:	0800812d 	.word	0x0800812d
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e14a      	b.n	800837e <UART_SetConfig+0x5a6>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ee:	e146      	b.n	800837e <UART_SetConfig+0x5a6>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e142      	b.n	800837e <UART_SetConfig+0x5a6>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fe:	e13e      	b.n	800837e <UART_SetConfig+0x5a6>
 8008100:	cfff69f3 	.word	0xcfff69f3
 8008104:	58000c00 	.word	0x58000c00
 8008108:	11fff4ff 	.word	0x11fff4ff
 800810c:	40011000 	.word	0x40011000
 8008110:	58024400 	.word	0x58024400
 8008114:	40004400 	.word	0x40004400
 8008118:	40004800 	.word	0x40004800
 800811c:	40004c00 	.word	0x40004c00
 8008120:	40005000 	.word	0x40005000
 8008124:	2320      	movs	r3, #32
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812a:	e128      	b.n	800837e <UART_SetConfig+0x5a6>
 800812c:	2340      	movs	r3, #64	@ 0x40
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008132:	e124      	b.n	800837e <UART_SetConfig+0x5a6>
 8008134:	2380      	movs	r3, #128	@ 0x80
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800813a:	e120      	b.n	800837e <UART_SetConfig+0x5a6>
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4acb      	ldr	r2, [pc, #812]	@ (8008470 <UART_SetConfig+0x698>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d176      	bne.n	8008234 <UART_SetConfig+0x45c>
 8008146:	4bcb      	ldr	r3, [pc, #812]	@ (8008474 <UART_SetConfig+0x69c>)
 8008148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800814e:	2b28      	cmp	r3, #40	@ 0x28
 8008150:	d86c      	bhi.n	800822c <UART_SetConfig+0x454>
 8008152:	a201      	add	r2, pc, #4	@ (adr r2, 8008158 <UART_SetConfig+0x380>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	080081fd 	.word	0x080081fd
 800815c:	0800822d 	.word	0x0800822d
 8008160:	0800822d 	.word	0x0800822d
 8008164:	0800822d 	.word	0x0800822d
 8008168:	0800822d 	.word	0x0800822d
 800816c:	0800822d 	.word	0x0800822d
 8008170:	0800822d 	.word	0x0800822d
 8008174:	0800822d 	.word	0x0800822d
 8008178:	08008205 	.word	0x08008205
 800817c:	0800822d 	.word	0x0800822d
 8008180:	0800822d 	.word	0x0800822d
 8008184:	0800822d 	.word	0x0800822d
 8008188:	0800822d 	.word	0x0800822d
 800818c:	0800822d 	.word	0x0800822d
 8008190:	0800822d 	.word	0x0800822d
 8008194:	0800822d 	.word	0x0800822d
 8008198:	0800820d 	.word	0x0800820d
 800819c:	0800822d 	.word	0x0800822d
 80081a0:	0800822d 	.word	0x0800822d
 80081a4:	0800822d 	.word	0x0800822d
 80081a8:	0800822d 	.word	0x0800822d
 80081ac:	0800822d 	.word	0x0800822d
 80081b0:	0800822d 	.word	0x0800822d
 80081b4:	0800822d 	.word	0x0800822d
 80081b8:	08008215 	.word	0x08008215
 80081bc:	0800822d 	.word	0x0800822d
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	0800822d 	.word	0x0800822d
 80081c8:	0800822d 	.word	0x0800822d
 80081cc:	0800822d 	.word	0x0800822d
 80081d0:	0800822d 	.word	0x0800822d
 80081d4:	0800822d 	.word	0x0800822d
 80081d8:	0800821d 	.word	0x0800821d
 80081dc:	0800822d 	.word	0x0800822d
 80081e0:	0800822d 	.word	0x0800822d
 80081e4:	0800822d 	.word	0x0800822d
 80081e8:	0800822d 	.word	0x0800822d
 80081ec:	0800822d 	.word	0x0800822d
 80081f0:	0800822d 	.word	0x0800822d
 80081f4:	0800822d 	.word	0x0800822d
 80081f8:	08008225 	.word	0x08008225
 80081fc:	2301      	movs	r3, #1
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e0bc      	b.n	800837e <UART_SetConfig+0x5a6>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e0b8      	b.n	800837e <UART_SetConfig+0x5a6>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008212:	e0b4      	b.n	800837e <UART_SetConfig+0x5a6>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821a:	e0b0      	b.n	800837e <UART_SetConfig+0x5a6>
 800821c:	2320      	movs	r3, #32
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008222:	e0ac      	b.n	800837e <UART_SetConfig+0x5a6>
 8008224:	2340      	movs	r3, #64	@ 0x40
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822a:	e0a8      	b.n	800837e <UART_SetConfig+0x5a6>
 800822c:	2380      	movs	r3, #128	@ 0x80
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008232:	e0a4      	b.n	800837e <UART_SetConfig+0x5a6>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a8f      	ldr	r2, [pc, #572]	@ (8008478 <UART_SetConfig+0x6a0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d130      	bne.n	80082a0 <UART_SetConfig+0x4c8>
 800823e:	4b8d      	ldr	r3, [pc, #564]	@ (8008474 <UART_SetConfig+0x69c>)
 8008240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b05      	cmp	r3, #5
 8008248:	d826      	bhi.n	8008298 <UART_SetConfig+0x4c0>
 800824a:	a201      	add	r2, pc, #4	@ (adr r2, 8008250 <UART_SetConfig+0x478>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008269 	.word	0x08008269
 8008254:	08008271 	.word	0x08008271
 8008258:	08008279 	.word	0x08008279
 800825c:	08008281 	.word	0x08008281
 8008260:	08008289 	.word	0x08008289
 8008264:	08008291 	.word	0x08008291
 8008268:	2300      	movs	r3, #0
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e086      	b.n	800837e <UART_SetConfig+0x5a6>
 8008270:	2304      	movs	r3, #4
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e082      	b.n	800837e <UART_SetConfig+0x5a6>
 8008278:	2308      	movs	r3, #8
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e07e      	b.n	800837e <UART_SetConfig+0x5a6>
 8008280:	2310      	movs	r3, #16
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e07a      	b.n	800837e <UART_SetConfig+0x5a6>
 8008288:	2320      	movs	r3, #32
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e076      	b.n	800837e <UART_SetConfig+0x5a6>
 8008290:	2340      	movs	r3, #64	@ 0x40
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008296:	e072      	b.n	800837e <UART_SetConfig+0x5a6>
 8008298:	2380      	movs	r3, #128	@ 0x80
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829e:	e06e      	b.n	800837e <UART_SetConfig+0x5a6>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a75      	ldr	r2, [pc, #468]	@ (800847c <UART_SetConfig+0x6a4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d130      	bne.n	800830c <UART_SetConfig+0x534>
 80082aa:	4b72      	ldr	r3, [pc, #456]	@ (8008474 <UART_SetConfig+0x69c>)
 80082ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d826      	bhi.n	8008304 <UART_SetConfig+0x52c>
 80082b6:	a201      	add	r2, pc, #4	@ (adr r2, 80082bc <UART_SetConfig+0x4e4>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082d5 	.word	0x080082d5
 80082c0:	080082dd 	.word	0x080082dd
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e050      	b.n	800837e <UART_SetConfig+0x5a6>
 80082dc:	2304      	movs	r3, #4
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e04c      	b.n	800837e <UART_SetConfig+0x5a6>
 80082e4:	2308      	movs	r3, #8
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e048      	b.n	800837e <UART_SetConfig+0x5a6>
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f2:	e044      	b.n	800837e <UART_SetConfig+0x5a6>
 80082f4:	2320      	movs	r3, #32
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fa:	e040      	b.n	800837e <UART_SetConfig+0x5a6>
 80082fc:	2340      	movs	r3, #64	@ 0x40
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008302:	e03c      	b.n	800837e <UART_SetConfig+0x5a6>
 8008304:	2380      	movs	r3, #128	@ 0x80
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830a:	e038      	b.n	800837e <UART_SetConfig+0x5a6>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a5b      	ldr	r2, [pc, #364]	@ (8008480 <UART_SetConfig+0x6a8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d130      	bne.n	8008378 <UART_SetConfig+0x5a0>
 8008316:	4b57      	ldr	r3, [pc, #348]	@ (8008474 <UART_SetConfig+0x69c>)
 8008318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	2b05      	cmp	r3, #5
 8008320:	d826      	bhi.n	8008370 <UART_SetConfig+0x598>
 8008322:	a201      	add	r2, pc, #4	@ (adr r2, 8008328 <UART_SetConfig+0x550>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008341 	.word	0x08008341
 800832c:	08008349 	.word	0x08008349
 8008330:	08008351 	.word	0x08008351
 8008334:	08008359 	.word	0x08008359
 8008338:	08008361 	.word	0x08008361
 800833c:	08008369 	.word	0x08008369
 8008340:	2302      	movs	r3, #2
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e01a      	b.n	800837e <UART_SetConfig+0x5a6>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834e:	e016      	b.n	800837e <UART_SetConfig+0x5a6>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008356:	e012      	b.n	800837e <UART_SetConfig+0x5a6>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835e:	e00e      	b.n	800837e <UART_SetConfig+0x5a6>
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e00a      	b.n	800837e <UART_SetConfig+0x5a6>
 8008368:	2340      	movs	r3, #64	@ 0x40
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e006      	b.n	800837e <UART_SetConfig+0x5a6>
 8008370:	2380      	movs	r3, #128	@ 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008376:	e002      	b.n	800837e <UART_SetConfig+0x5a6>
 8008378:	2380      	movs	r3, #128	@ 0x80
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a3f      	ldr	r2, [pc, #252]	@ (8008480 <UART_SetConfig+0x6a8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	f040 80f8 	bne.w	800857a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800838a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800838e:	2b20      	cmp	r3, #32
 8008390:	dc46      	bgt.n	8008420 <UART_SetConfig+0x648>
 8008392:	2b02      	cmp	r3, #2
 8008394:	f2c0 8082 	blt.w	800849c <UART_SetConfig+0x6c4>
 8008398:	3b02      	subs	r3, #2
 800839a:	2b1e      	cmp	r3, #30
 800839c:	d87e      	bhi.n	800849c <UART_SetConfig+0x6c4>
 800839e:	a201      	add	r2, pc, #4	@ (adr r2, 80083a4 <UART_SetConfig+0x5cc>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	08008427 	.word	0x08008427
 80083a8:	0800849d 	.word	0x0800849d
 80083ac:	0800842f 	.word	0x0800842f
 80083b0:	0800849d 	.word	0x0800849d
 80083b4:	0800849d 	.word	0x0800849d
 80083b8:	0800849d 	.word	0x0800849d
 80083bc:	0800843f 	.word	0x0800843f
 80083c0:	0800849d 	.word	0x0800849d
 80083c4:	0800849d 	.word	0x0800849d
 80083c8:	0800849d 	.word	0x0800849d
 80083cc:	0800849d 	.word	0x0800849d
 80083d0:	0800849d 	.word	0x0800849d
 80083d4:	0800849d 	.word	0x0800849d
 80083d8:	0800849d 	.word	0x0800849d
 80083dc:	0800844f 	.word	0x0800844f
 80083e0:	0800849d 	.word	0x0800849d
 80083e4:	0800849d 	.word	0x0800849d
 80083e8:	0800849d 	.word	0x0800849d
 80083ec:	0800849d 	.word	0x0800849d
 80083f0:	0800849d 	.word	0x0800849d
 80083f4:	0800849d 	.word	0x0800849d
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	0800849d 	.word	0x0800849d
 8008400:	0800849d 	.word	0x0800849d
 8008404:	0800849d 	.word	0x0800849d
 8008408:	0800849d 	.word	0x0800849d
 800840c:	0800849d 	.word	0x0800849d
 8008410:	0800849d 	.word	0x0800849d
 8008414:	0800849d 	.word	0x0800849d
 8008418:	0800849d 	.word	0x0800849d
 800841c:	0800848f 	.word	0x0800848f
 8008420:	2b40      	cmp	r3, #64	@ 0x40
 8008422:	d037      	beq.n	8008494 <UART_SetConfig+0x6bc>
 8008424:	e03a      	b.n	800849c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008426:	f7fe f989 	bl	800673c <HAL_RCCEx_GetD3PCLK1Freq>
 800842a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800842c:	e03c      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe f998 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800843c:	e034      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843e:	f107 0318 	add.w	r3, r7, #24
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fae4 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800844c:	e02c      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800844e:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <UART_SetConfig+0x69c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d016      	beq.n	8008488 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800845a:	4b06      	ldr	r3, [pc, #24]	@ (8008474 <UART_SetConfig+0x69c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	08db      	lsrs	r3, r3, #3
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	4a07      	ldr	r2, [pc, #28]	@ (8008484 <UART_SetConfig+0x6ac>)
 8008466:	fa22 f303 	lsr.w	r3, r2, r3
 800846a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800846c:	e01c      	b.n	80084a8 <UART_SetConfig+0x6d0>
 800846e:	bf00      	nop
 8008470:	40011400 	.word	0x40011400
 8008474:	58024400 	.word	0x58024400
 8008478:	40007800 	.word	0x40007800
 800847c:	40007c00 	.word	0x40007c00
 8008480:	58000c00 	.word	0x58000c00
 8008484:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008488:	4b9d      	ldr	r3, [pc, #628]	@ (8008700 <UART_SetConfig+0x928>)
 800848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800848c:	e00c      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800848e:	4b9d      	ldr	r3, [pc, #628]	@ (8008704 <UART_SetConfig+0x92c>)
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008492:	e009      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008494:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800849a:	e005      	b.n	80084a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80084a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 81de 	beq.w	800886c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b4:	4a94      	ldr	r2, [pc, #592]	@ (8008708 <UART_SetConfig+0x930>)
 80084b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ba:	461a      	mov	r2, r3
 80084bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084be:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	4413      	add	r3, r2
 80084ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d305      	bcc.n	80084e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084dc:	429a      	cmp	r2, r3
 80084de:	d903      	bls.n	80084e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084e6:	e1c1      	b.n	800886c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ea:	2200      	movs	r2, #0
 80084ec:	60bb      	str	r3, [r7, #8]
 80084ee:	60fa      	str	r2, [r7, #12]
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f4:	4a84      	ldr	r2, [pc, #528]	@ (8008708 <UART_SetConfig+0x930>)
 80084f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2200      	movs	r2, #0
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	607a      	str	r2, [r7, #4]
 8008502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800850a:	f7f7 ff39 	bl	8000380 <__aeabi_uldivmod>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4610      	mov	r0, r2
 8008514:	4619      	mov	r1, r3
 8008516:	f04f 0200 	mov.w	r2, #0
 800851a:	f04f 0300 	mov.w	r3, #0
 800851e:	020b      	lsls	r3, r1, #8
 8008520:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008524:	0202      	lsls	r2, r0, #8
 8008526:	6979      	ldr	r1, [r7, #20]
 8008528:	6849      	ldr	r1, [r1, #4]
 800852a:	0849      	lsrs	r1, r1, #1
 800852c:	2000      	movs	r0, #0
 800852e:	460c      	mov	r4, r1
 8008530:	4605      	mov	r5, r0
 8008532:	eb12 0804 	adds.w	r8, r2, r4
 8008536:	eb43 0905 	adc.w	r9, r3, r5
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	469a      	mov	sl, r3
 8008542:	4693      	mov	fp, r2
 8008544:	4652      	mov	r2, sl
 8008546:	465b      	mov	r3, fp
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f7 ff18 	bl	8000380 <__aeabi_uldivmod>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4613      	mov	r3, r2
 8008556:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800855e:	d308      	bcc.n	8008572 <UART_SetConfig+0x79a>
 8008560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008566:	d204      	bcs.n	8008572 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800856e:	60da      	str	r2, [r3, #12]
 8008570:	e17c      	b.n	800886c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008578:	e178      	b.n	800886c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008582:	f040 80c5 	bne.w	8008710 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008586:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800858a:	2b20      	cmp	r3, #32
 800858c:	dc48      	bgt.n	8008620 <UART_SetConfig+0x848>
 800858e:	2b00      	cmp	r3, #0
 8008590:	db7b      	blt.n	800868a <UART_SetConfig+0x8b2>
 8008592:	2b20      	cmp	r3, #32
 8008594:	d879      	bhi.n	800868a <UART_SetConfig+0x8b2>
 8008596:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <UART_SetConfig+0x7c4>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	08008627 	.word	0x08008627
 80085a0:	0800862f 	.word	0x0800862f
 80085a4:	0800868b 	.word	0x0800868b
 80085a8:	0800868b 	.word	0x0800868b
 80085ac:	08008637 	.word	0x08008637
 80085b0:	0800868b 	.word	0x0800868b
 80085b4:	0800868b 	.word	0x0800868b
 80085b8:	0800868b 	.word	0x0800868b
 80085bc:	08008647 	.word	0x08008647
 80085c0:	0800868b 	.word	0x0800868b
 80085c4:	0800868b 	.word	0x0800868b
 80085c8:	0800868b 	.word	0x0800868b
 80085cc:	0800868b 	.word	0x0800868b
 80085d0:	0800868b 	.word	0x0800868b
 80085d4:	0800868b 	.word	0x0800868b
 80085d8:	0800868b 	.word	0x0800868b
 80085dc:	08008657 	.word	0x08008657
 80085e0:	0800868b 	.word	0x0800868b
 80085e4:	0800868b 	.word	0x0800868b
 80085e8:	0800868b 	.word	0x0800868b
 80085ec:	0800868b 	.word	0x0800868b
 80085f0:	0800868b 	.word	0x0800868b
 80085f4:	0800868b 	.word	0x0800868b
 80085f8:	0800868b 	.word	0x0800868b
 80085fc:	0800868b 	.word	0x0800868b
 8008600:	0800868b 	.word	0x0800868b
 8008604:	0800868b 	.word	0x0800868b
 8008608:	0800868b 	.word	0x0800868b
 800860c:	0800868b 	.word	0x0800868b
 8008610:	0800868b 	.word	0x0800868b
 8008614:	0800868b 	.word	0x0800868b
 8008618:	0800868b 	.word	0x0800868b
 800861c:	0800867d 	.word	0x0800867d
 8008620:	2b40      	cmp	r3, #64	@ 0x40
 8008622:	d02e      	beq.n	8008682 <UART_SetConfig+0x8aa>
 8008624:	e031      	b.n	800868a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008626:	f7fc fe53 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 800862a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800862c:	e033      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800862e:	f7fc fe65 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 8008632:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008634:	e02f      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe f894 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008644:	e027      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008646:	f107 0318 	add.w	r3, r7, #24
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe f9e0 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e01f      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008656:	4b2d      	ldr	r3, [pc, #180]	@ (800870c <UART_SetConfig+0x934>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008662:	4b2a      	ldr	r3, [pc, #168]	@ (800870c <UART_SetConfig+0x934>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	08db      	lsrs	r3, r3, #3
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	4a24      	ldr	r2, [pc, #144]	@ (8008700 <UART_SetConfig+0x928>)
 800866e:	fa22 f303 	lsr.w	r3, r2, r3
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008674:	e00f      	b.n	8008696 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008676:	4b22      	ldr	r3, [pc, #136]	@ (8008700 <UART_SetConfig+0x928>)
 8008678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867a:	e00c      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800867c:	4b21      	ldr	r3, [pc, #132]	@ (8008704 <UART_SetConfig+0x92c>)
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008680:	e009      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008688:	e005      	b.n	8008696 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 80e7 	beq.w	800886c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a2:	4a19      	ldr	r2, [pc, #100]	@ (8008708 <UART_SetConfig+0x930>)
 80086a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a8:	461a      	mov	r2, r3
 80086aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b0:	005a      	lsls	r2, r3, #1
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	085b      	lsrs	r3, r3, #1
 80086b8:	441a      	add	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d916      	bls.n	80086f8 <UART_SetConfig+0x920>
 80086ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086d0:	d212      	bcs.n	80086f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f023 030f 	bic.w	r3, r3, #15
 80086da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086ea:	4313      	orrs	r3, r2
 80086ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80086f4:	60da      	str	r2, [r3, #12]
 80086f6:	e0b9      	b.n	800886c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80086fe:	e0b5      	b.n	800886c <UART_SetConfig+0xa94>
 8008700:	03d09000 	.word	0x03d09000
 8008704:	003d0900 	.word	0x003d0900
 8008708:	08009d50 	.word	0x08009d50
 800870c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008710:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008714:	2b20      	cmp	r3, #32
 8008716:	dc49      	bgt.n	80087ac <UART_SetConfig+0x9d4>
 8008718:	2b00      	cmp	r3, #0
 800871a:	db7c      	blt.n	8008816 <UART_SetConfig+0xa3e>
 800871c:	2b20      	cmp	r3, #32
 800871e:	d87a      	bhi.n	8008816 <UART_SetConfig+0xa3e>
 8008720:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <UART_SetConfig+0x950>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	080087b3 	.word	0x080087b3
 800872c:	080087bb 	.word	0x080087bb
 8008730:	08008817 	.word	0x08008817
 8008734:	08008817 	.word	0x08008817
 8008738:	080087c3 	.word	0x080087c3
 800873c:	08008817 	.word	0x08008817
 8008740:	08008817 	.word	0x08008817
 8008744:	08008817 	.word	0x08008817
 8008748:	080087d3 	.word	0x080087d3
 800874c:	08008817 	.word	0x08008817
 8008750:	08008817 	.word	0x08008817
 8008754:	08008817 	.word	0x08008817
 8008758:	08008817 	.word	0x08008817
 800875c:	08008817 	.word	0x08008817
 8008760:	08008817 	.word	0x08008817
 8008764:	08008817 	.word	0x08008817
 8008768:	080087e3 	.word	0x080087e3
 800876c:	08008817 	.word	0x08008817
 8008770:	08008817 	.word	0x08008817
 8008774:	08008817 	.word	0x08008817
 8008778:	08008817 	.word	0x08008817
 800877c:	08008817 	.word	0x08008817
 8008780:	08008817 	.word	0x08008817
 8008784:	08008817 	.word	0x08008817
 8008788:	08008817 	.word	0x08008817
 800878c:	08008817 	.word	0x08008817
 8008790:	08008817 	.word	0x08008817
 8008794:	08008817 	.word	0x08008817
 8008798:	08008817 	.word	0x08008817
 800879c:	08008817 	.word	0x08008817
 80087a0:	08008817 	.word	0x08008817
 80087a4:	08008817 	.word	0x08008817
 80087a8:	08008809 	.word	0x08008809
 80087ac:	2b40      	cmp	r3, #64	@ 0x40
 80087ae:	d02e      	beq.n	800880e <UART_SetConfig+0xa36>
 80087b0:	e031      	b.n	8008816 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b2:	f7fc fd8d 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 80087b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087b8:	e033      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087ba:	f7fc fd9f 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 80087be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087c0:	e02f      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fd ffce 	bl	8006768 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d0:	e027      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d2:	f107 0318 	add.w	r3, r7, #24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe f91a 	bl	8006a10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e0:	e01f      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008898 <UART_SetConfig+0xac0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087ee:	4b2a      	ldr	r3, [pc, #168]	@ (8008898 <UART_SetConfig+0xac0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	4a28      	ldr	r2, [pc, #160]	@ (800889c <UART_SetConfig+0xac4>)
 80087fa:	fa22 f303 	lsr.w	r3, r2, r3
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008800:	e00f      	b.n	8008822 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008802:	4b26      	ldr	r3, [pc, #152]	@ (800889c <UART_SetConfig+0xac4>)
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008806:	e00c      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008808:	4b25      	ldr	r3, [pc, #148]	@ (80088a0 <UART_SetConfig+0xac8>)
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880c:	e009      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008820:	bf00      	nop
    }

    if (pclk != 0U)
 8008822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d021      	beq.n	800886c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882c:	4a1d      	ldr	r2, [pc, #116]	@ (80088a4 <UART_SetConfig+0xacc>)
 800882e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008832:	461a      	mov	r2, r3
 8008834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008836:	fbb3 f2f2 	udiv	r2, r3, r2
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	441a      	add	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	fbb2 f3f3 	udiv	r3, r2, r3
 800884a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800884c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884e:	2b0f      	cmp	r3, #15
 8008850:	d909      	bls.n	8008866 <UART_SetConfig+0xa8e>
 8008852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008858:	d205      	bcs.n	8008866 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800885a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885c:	b29a      	uxth	r2, r3
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60da      	str	r2, [r3, #12]
 8008864:	e002      	b.n	800886c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2201      	movs	r2, #1
 8008870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2201      	movs	r2, #1
 8008878:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2200      	movs	r2, #0
 8008880:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2200      	movs	r2, #0
 8008886:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008888:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800888c:	4618      	mov	r0, r3
 800888e:	3748      	adds	r7, #72	@ 0x48
 8008890:	46bd      	mov	sp, r7
 8008892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008896:	bf00      	nop
 8008898:	58024400 	.word	0x58024400
 800889c:	03d09000 	.word	0x03d09000
 80088a0:	003d0900 	.word	0x003d0900
 80088a4:	08009d50 	.word	0x08009d50

080088a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01a      	beq.n	80089be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089a6:	d10a      	bne.n	80089be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	605a      	str	r2, [r3, #4]
  }
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b098      	sub	sp, #96	@ 0x60
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089fc:	f7f8 fede 	bl	80017bc <HAL_GetTick>
 8008a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d12f      	bne.n	8008a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f88e 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d022      	beq.n	8008a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e063      	b.n	8008b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d149      	bne.n	8008b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a86:	2200      	movs	r2, #0
 8008a88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f857 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d03c      	beq.n	8008b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e6      	bne.n	8008a98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aea:	61fa      	str	r2, [r7, #28]
 8008aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	69b9      	ldr	r1, [r7, #24]
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	617b      	str	r3, [r7, #20]
   return(result);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e012      	b.n	8008b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3758      	adds	r7, #88	@ 0x58
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b50:	e04f      	b.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b58:	d04b      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b5a:	f7f8 fe2f 	bl	80017bc <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d302      	bcc.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e04e      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d037      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b80      	cmp	r3, #128	@ 0x80
 8008b86:	d034      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b40      	cmp	r3, #64	@ 0x40
 8008b8c:	d031      	beq.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d110      	bne.n	8008bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f839 	bl	8008c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2208      	movs	r2, #8
 8008bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e029      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bcc:	d111      	bne.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f81f 	bl	8008c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e00f      	b.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	bf0c      	ite	eq
 8008c02:	2301      	moveq	r3, #1
 8008c04:	2300      	movne	r3, #0
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d0a0      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b095      	sub	sp, #84	@ 0x54
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e6      	bne.n	8008c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	4b1e      	ldr	r3, [pc, #120]	@ (8008ce4 <UART_EndRxTransfer+0xc8>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3308      	adds	r3, #8
 8008c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e5      	bne.n	8008c56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d118      	bne.n	8008cc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	e853 3f00 	ldrex	r3, [r3]
 8008c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f023 0310 	bic.w	r3, r3, #16
 8008ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6979      	ldr	r1, [r7, #20]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e6      	bne.n	8008c92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008cd8:	bf00      	nop
 8008cda:	3754      	adds	r7, #84	@ 0x54
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	effffffe 	.word	0xeffffffe

08008ce8 <std>:
 8008ce8:	2300      	movs	r3, #0
 8008cea:	b510      	push	{r4, lr}
 8008cec:	4604      	mov	r4, r0
 8008cee:	e9c0 3300 	strd	r3, r3, [r0]
 8008cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cf6:	6083      	str	r3, [r0, #8]
 8008cf8:	8181      	strh	r1, [r0, #12]
 8008cfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cfc:	81c2      	strh	r2, [r0, #14]
 8008cfe:	6183      	str	r3, [r0, #24]
 8008d00:	4619      	mov	r1, r3
 8008d02:	2208      	movs	r2, #8
 8008d04:	305c      	adds	r0, #92	@ 0x5c
 8008d06:	f000 f929 	bl	8008f5c <memset>
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d40 <std+0x58>)
 8008d0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d44 <std+0x5c>)
 8008d10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d12:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <std+0x60>)
 8008d14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d16:	4b0d      	ldr	r3, [pc, #52]	@ (8008d4c <std+0x64>)
 8008d18:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d50 <std+0x68>)
 8008d1c:	6224      	str	r4, [r4, #32]
 8008d1e:	429c      	cmp	r4, r3
 8008d20:	d006      	beq.n	8008d30 <std+0x48>
 8008d22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d26:	4294      	cmp	r4, r2
 8008d28:	d002      	beq.n	8008d30 <std+0x48>
 8008d2a:	33d0      	adds	r3, #208	@ 0xd0
 8008d2c:	429c      	cmp	r4, r3
 8008d2e:	d105      	bne.n	8008d3c <std+0x54>
 8008d30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d38:	f000 b942 	b.w	8008fc0 <__retarget_lock_init_recursive>
 8008d3c:	bd10      	pop	{r4, pc}
 8008d3e:	bf00      	nop
 8008d40:	08009819 	.word	0x08009819
 8008d44:	0800983b 	.word	0x0800983b
 8008d48:	08009873 	.word	0x08009873
 8008d4c:	08009897 	.word	0x08009897
 8008d50:	24000240 	.word	0x24000240

08008d54 <stdio_exit_handler>:
 8008d54:	4a02      	ldr	r2, [pc, #8]	@ (8008d60 <stdio_exit_handler+0xc>)
 8008d56:	4903      	ldr	r1, [pc, #12]	@ (8008d64 <stdio_exit_handler+0x10>)
 8008d58:	4803      	ldr	r0, [pc, #12]	@ (8008d68 <stdio_exit_handler+0x14>)
 8008d5a:	f000 b869 	b.w	8008e30 <_fwalk_sglue>
 8008d5e:	bf00      	nop
 8008d60:	24000030 	.word	0x24000030
 8008d64:	080097b1 	.word	0x080097b1
 8008d68:	24000040 	.word	0x24000040

08008d6c <cleanup_stdio>:
 8008d6c:	6841      	ldr	r1, [r0, #4]
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008da0 <cleanup_stdio+0x34>)
 8008d70:	4299      	cmp	r1, r3
 8008d72:	b510      	push	{r4, lr}
 8008d74:	4604      	mov	r4, r0
 8008d76:	d001      	beq.n	8008d7c <cleanup_stdio+0x10>
 8008d78:	f000 fd1a 	bl	80097b0 <_fflush_r>
 8008d7c:	68a1      	ldr	r1, [r4, #8]
 8008d7e:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <cleanup_stdio+0x38>)
 8008d80:	4299      	cmp	r1, r3
 8008d82:	d002      	beq.n	8008d8a <cleanup_stdio+0x1e>
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fd13 	bl	80097b0 <_fflush_r>
 8008d8a:	68e1      	ldr	r1, [r4, #12]
 8008d8c:	4b06      	ldr	r3, [pc, #24]	@ (8008da8 <cleanup_stdio+0x3c>)
 8008d8e:	4299      	cmp	r1, r3
 8008d90:	d004      	beq.n	8008d9c <cleanup_stdio+0x30>
 8008d92:	4620      	mov	r0, r4
 8008d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d98:	f000 bd0a 	b.w	80097b0 <_fflush_r>
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop
 8008da0:	24000240 	.word	0x24000240
 8008da4:	240002a8 	.word	0x240002a8
 8008da8:	24000310 	.word	0x24000310

08008dac <global_stdio_init.part.0>:
 8008dac:	b510      	push	{r4, lr}
 8008dae:	4b0b      	ldr	r3, [pc, #44]	@ (8008ddc <global_stdio_init.part.0+0x30>)
 8008db0:	4c0b      	ldr	r4, [pc, #44]	@ (8008de0 <global_stdio_init.part.0+0x34>)
 8008db2:	4a0c      	ldr	r2, [pc, #48]	@ (8008de4 <global_stdio_init.part.0+0x38>)
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	4620      	mov	r0, r4
 8008db8:	2200      	movs	r2, #0
 8008dba:	2104      	movs	r1, #4
 8008dbc:	f7ff ff94 	bl	8008ce8 <std>
 8008dc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	2109      	movs	r1, #9
 8008dc8:	f7ff ff8e 	bl	8008ce8 <std>
 8008dcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd6:	2112      	movs	r1, #18
 8008dd8:	f7ff bf86 	b.w	8008ce8 <std>
 8008ddc:	24000378 	.word	0x24000378
 8008de0:	24000240 	.word	0x24000240
 8008de4:	08008d55 	.word	0x08008d55

08008de8 <__sfp_lock_acquire>:
 8008de8:	4801      	ldr	r0, [pc, #4]	@ (8008df0 <__sfp_lock_acquire+0x8>)
 8008dea:	f000 b8ea 	b.w	8008fc2 <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	2400037d 	.word	0x2400037d

08008df4 <__sfp_lock_release>:
 8008df4:	4801      	ldr	r0, [pc, #4]	@ (8008dfc <__sfp_lock_release+0x8>)
 8008df6:	f000 b8e5 	b.w	8008fc4 <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	2400037d 	.word	0x2400037d

08008e00 <__sinit>:
 8008e00:	b510      	push	{r4, lr}
 8008e02:	4604      	mov	r4, r0
 8008e04:	f7ff fff0 	bl	8008de8 <__sfp_lock_acquire>
 8008e08:	6a23      	ldr	r3, [r4, #32]
 8008e0a:	b11b      	cbz	r3, 8008e14 <__sinit+0x14>
 8008e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e10:	f7ff bff0 	b.w	8008df4 <__sfp_lock_release>
 8008e14:	4b04      	ldr	r3, [pc, #16]	@ (8008e28 <__sinit+0x28>)
 8008e16:	6223      	str	r3, [r4, #32]
 8008e18:	4b04      	ldr	r3, [pc, #16]	@ (8008e2c <__sinit+0x2c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1f5      	bne.n	8008e0c <__sinit+0xc>
 8008e20:	f7ff ffc4 	bl	8008dac <global_stdio_init.part.0>
 8008e24:	e7f2      	b.n	8008e0c <__sinit+0xc>
 8008e26:	bf00      	nop
 8008e28:	08008d6d 	.word	0x08008d6d
 8008e2c:	24000378 	.word	0x24000378

08008e30 <_fwalk_sglue>:
 8008e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e34:	4607      	mov	r7, r0
 8008e36:	4688      	mov	r8, r1
 8008e38:	4614      	mov	r4, r2
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e40:	f1b9 0901 	subs.w	r9, r9, #1
 8008e44:	d505      	bpl.n	8008e52 <_fwalk_sglue+0x22>
 8008e46:	6824      	ldr	r4, [r4, #0]
 8008e48:	2c00      	cmp	r4, #0
 8008e4a:	d1f7      	bne.n	8008e3c <_fwalk_sglue+0xc>
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d907      	bls.n	8008e68 <_fwalk_sglue+0x38>
 8008e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	d003      	beq.n	8008e68 <_fwalk_sglue+0x38>
 8008e60:	4629      	mov	r1, r5
 8008e62:	4638      	mov	r0, r7
 8008e64:	47c0      	blx	r8
 8008e66:	4306      	orrs	r6, r0
 8008e68:	3568      	adds	r5, #104	@ 0x68
 8008e6a:	e7e9      	b.n	8008e40 <_fwalk_sglue+0x10>

08008e6c <iprintf>:
 8008e6c:	b40f      	push	{r0, r1, r2, r3}
 8008e6e:	b507      	push	{r0, r1, r2, lr}
 8008e70:	4906      	ldr	r1, [pc, #24]	@ (8008e8c <iprintf+0x20>)
 8008e72:	ab04      	add	r3, sp, #16
 8008e74:	6808      	ldr	r0, [r1, #0]
 8008e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7a:	6881      	ldr	r1, [r0, #8]
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	f000 f8cb 	bl	8009018 <_vfiprintf_r>
 8008e82:	b003      	add	sp, #12
 8008e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e88:	b004      	add	sp, #16
 8008e8a:	4770      	bx	lr
 8008e8c:	2400003c 	.word	0x2400003c

08008e90 <putchar>:
 8008e90:	4b02      	ldr	r3, [pc, #8]	@ (8008e9c <putchar+0xc>)
 8008e92:	4601      	mov	r1, r0
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	6882      	ldr	r2, [r0, #8]
 8008e98:	f000 bdf8 	b.w	8009a8c <_putc_r>
 8008e9c:	2400003c 	.word	0x2400003c

08008ea0 <_puts_r>:
 8008ea0:	6a03      	ldr	r3, [r0, #32]
 8008ea2:	b570      	push	{r4, r5, r6, lr}
 8008ea4:	6884      	ldr	r4, [r0, #8]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	460e      	mov	r6, r1
 8008eaa:	b90b      	cbnz	r3, 8008eb0 <_puts_r+0x10>
 8008eac:	f7ff ffa8 	bl	8008e00 <__sinit>
 8008eb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eb2:	07db      	lsls	r3, r3, #31
 8008eb4:	d405      	bmi.n	8008ec2 <_puts_r+0x22>
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	0598      	lsls	r0, r3, #22
 8008eba:	d402      	bmi.n	8008ec2 <_puts_r+0x22>
 8008ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ebe:	f000 f880 	bl	8008fc2 <__retarget_lock_acquire_recursive>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	0719      	lsls	r1, r3, #28
 8008ec6:	d502      	bpl.n	8008ece <_puts_r+0x2e>
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d135      	bne.n	8008f3a <_puts_r+0x9a>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 fd23 	bl	800991c <__swsetup_r>
 8008ed6:	b380      	cbz	r0, 8008f3a <_puts_r+0x9a>
 8008ed8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008edc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ede:	07da      	lsls	r2, r3, #31
 8008ee0:	d405      	bmi.n	8008eee <_puts_r+0x4e>
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	059b      	lsls	r3, r3, #22
 8008ee6:	d402      	bmi.n	8008eee <_puts_r+0x4e>
 8008ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eea:	f000 f86b 	bl	8008fc4 <__retarget_lock_release_recursive>
 8008eee:	4628      	mov	r0, r5
 8008ef0:	bd70      	pop	{r4, r5, r6, pc}
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	da04      	bge.n	8008f00 <_puts_r+0x60>
 8008ef6:	69a2      	ldr	r2, [r4, #24]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	dc17      	bgt.n	8008f2c <_puts_r+0x8c>
 8008efc:	290a      	cmp	r1, #10
 8008efe:	d015      	beq.n	8008f2c <_puts_r+0x8c>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	6022      	str	r2, [r4, #0]
 8008f06:	7019      	strb	r1, [r3, #0]
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	60a3      	str	r3, [r4, #8]
 8008f12:	2900      	cmp	r1, #0
 8008f14:	d1ed      	bne.n	8008ef2 <_puts_r+0x52>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	da11      	bge.n	8008f3e <_puts_r+0x9e>
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	210a      	movs	r1, #10
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 fcbd 	bl	800989e <__swbuf_r>
 8008f24:	3001      	adds	r0, #1
 8008f26:	d0d7      	beq.n	8008ed8 <_puts_r+0x38>
 8008f28:	250a      	movs	r5, #10
 8008f2a:	e7d7      	b.n	8008edc <_puts_r+0x3c>
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 fcb5 	bl	800989e <__swbuf_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d1e7      	bne.n	8008f08 <_puts_r+0x68>
 8008f38:	e7ce      	b.n	8008ed8 <_puts_r+0x38>
 8008f3a:	3e01      	subs	r6, #1
 8008f3c:	e7e4      	b.n	8008f08 <_puts_r+0x68>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	6022      	str	r2, [r4, #0]
 8008f44:	220a      	movs	r2, #10
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	e7ee      	b.n	8008f28 <_puts_r+0x88>
	...

08008f4c <puts>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	@ (8008f58 <puts+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f7ff bfa5 	b.w	8008ea0 <_puts_r>
 8008f56:	bf00      	nop
 8008f58:	2400003c 	.word	0x2400003c

08008f5c <memset>:
 8008f5c:	4402      	add	r2, r0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d100      	bne.n	8008f66 <memset+0xa>
 8008f64:	4770      	bx	lr
 8008f66:	f803 1b01 	strb.w	r1, [r3], #1
 8008f6a:	e7f9      	b.n	8008f60 <memset+0x4>

08008f6c <__errno>:
 8008f6c:	4b01      	ldr	r3, [pc, #4]	@ (8008f74 <__errno+0x8>)
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	2400003c 	.word	0x2400003c

08008f78 <__libc_init_array>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	4d0d      	ldr	r5, [pc, #52]	@ (8008fb0 <__libc_init_array+0x38>)
 8008f7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008fb4 <__libc_init_array+0x3c>)
 8008f7e:	1b64      	subs	r4, r4, r5
 8008f80:	10a4      	asrs	r4, r4, #2
 8008f82:	2600      	movs	r6, #0
 8008f84:	42a6      	cmp	r6, r4
 8008f86:	d109      	bne.n	8008f9c <__libc_init_array+0x24>
 8008f88:	4d0b      	ldr	r5, [pc, #44]	@ (8008fb8 <__libc_init_array+0x40>)
 8008f8a:	4c0c      	ldr	r4, [pc, #48]	@ (8008fbc <__libc_init_array+0x44>)
 8008f8c:	f000 fe74 	bl	8009c78 <_init>
 8008f90:	1b64      	subs	r4, r4, r5
 8008f92:	10a4      	asrs	r4, r4, #2
 8008f94:	2600      	movs	r6, #0
 8008f96:	42a6      	cmp	r6, r4
 8008f98:	d105      	bne.n	8008fa6 <__libc_init_array+0x2e>
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa0:	4798      	blx	r3
 8008fa2:	3601      	adds	r6, #1
 8008fa4:	e7ee      	b.n	8008f84 <__libc_init_array+0xc>
 8008fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008faa:	4798      	blx	r3
 8008fac:	3601      	adds	r6, #1
 8008fae:	e7f2      	b.n	8008f96 <__libc_init_array+0x1e>
 8008fb0:	08009da4 	.word	0x08009da4
 8008fb4:	08009da4 	.word	0x08009da4
 8008fb8:	08009da4 	.word	0x08009da4
 8008fbc:	08009da8 	.word	0x08009da8

08008fc0 <__retarget_lock_init_recursive>:
 8008fc0:	4770      	bx	lr

08008fc2 <__retarget_lock_acquire_recursive>:
 8008fc2:	4770      	bx	lr

08008fc4 <__retarget_lock_release_recursive>:
 8008fc4:	4770      	bx	lr

08008fc6 <__sfputc_r>:
 8008fc6:	6893      	ldr	r3, [r2, #8]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	b410      	push	{r4}
 8008fce:	6093      	str	r3, [r2, #8]
 8008fd0:	da08      	bge.n	8008fe4 <__sfputc_r+0x1e>
 8008fd2:	6994      	ldr	r4, [r2, #24]
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	db01      	blt.n	8008fdc <__sfputc_r+0x16>
 8008fd8:	290a      	cmp	r1, #10
 8008fda:	d103      	bne.n	8008fe4 <__sfputc_r+0x1e>
 8008fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe0:	f000 bc5d 	b.w	800989e <__swbuf_r>
 8008fe4:	6813      	ldr	r3, [r2, #0]
 8008fe6:	1c58      	adds	r0, r3, #1
 8008fe8:	6010      	str	r0, [r2, #0]
 8008fea:	7019      	strb	r1, [r3, #0]
 8008fec:	4608      	mov	r0, r1
 8008fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <__sfputs_r>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	4614      	mov	r4, r2
 8008ffc:	18d5      	adds	r5, r2, r3
 8008ffe:	42ac      	cmp	r4, r5
 8009000:	d101      	bne.n	8009006 <__sfputs_r+0x12>
 8009002:	2000      	movs	r0, #0
 8009004:	e007      	b.n	8009016 <__sfputs_r+0x22>
 8009006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900a:	463a      	mov	r2, r7
 800900c:	4630      	mov	r0, r6
 800900e:	f7ff ffda 	bl	8008fc6 <__sfputc_r>
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	d1f3      	bne.n	8008ffe <__sfputs_r+0xa>
 8009016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009018 <_vfiprintf_r>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	460d      	mov	r5, r1
 800901e:	b09d      	sub	sp, #116	@ 0x74
 8009020:	4614      	mov	r4, r2
 8009022:	4698      	mov	r8, r3
 8009024:	4606      	mov	r6, r0
 8009026:	b118      	cbz	r0, 8009030 <_vfiprintf_r+0x18>
 8009028:	6a03      	ldr	r3, [r0, #32]
 800902a:	b90b      	cbnz	r3, 8009030 <_vfiprintf_r+0x18>
 800902c:	f7ff fee8 	bl	8008e00 <__sinit>
 8009030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009032:	07d9      	lsls	r1, r3, #31
 8009034:	d405      	bmi.n	8009042 <_vfiprintf_r+0x2a>
 8009036:	89ab      	ldrh	r3, [r5, #12]
 8009038:	059a      	lsls	r2, r3, #22
 800903a:	d402      	bmi.n	8009042 <_vfiprintf_r+0x2a>
 800903c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800903e:	f7ff ffc0 	bl	8008fc2 <__retarget_lock_acquire_recursive>
 8009042:	89ab      	ldrh	r3, [r5, #12]
 8009044:	071b      	lsls	r3, r3, #28
 8009046:	d501      	bpl.n	800904c <_vfiprintf_r+0x34>
 8009048:	692b      	ldr	r3, [r5, #16]
 800904a:	b99b      	cbnz	r3, 8009074 <_vfiprintf_r+0x5c>
 800904c:	4629      	mov	r1, r5
 800904e:	4630      	mov	r0, r6
 8009050:	f000 fc64 	bl	800991c <__swsetup_r>
 8009054:	b170      	cbz	r0, 8009074 <_vfiprintf_r+0x5c>
 8009056:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009058:	07dc      	lsls	r4, r3, #31
 800905a:	d504      	bpl.n	8009066 <_vfiprintf_r+0x4e>
 800905c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009060:	b01d      	add	sp, #116	@ 0x74
 8009062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009066:	89ab      	ldrh	r3, [r5, #12]
 8009068:	0598      	lsls	r0, r3, #22
 800906a:	d4f7      	bmi.n	800905c <_vfiprintf_r+0x44>
 800906c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800906e:	f7ff ffa9 	bl	8008fc4 <__retarget_lock_release_recursive>
 8009072:	e7f3      	b.n	800905c <_vfiprintf_r+0x44>
 8009074:	2300      	movs	r3, #0
 8009076:	9309      	str	r3, [sp, #36]	@ 0x24
 8009078:	2320      	movs	r3, #32
 800907a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800907e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009082:	2330      	movs	r3, #48	@ 0x30
 8009084:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009234 <_vfiprintf_r+0x21c>
 8009088:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800908c:	f04f 0901 	mov.w	r9, #1
 8009090:	4623      	mov	r3, r4
 8009092:	469a      	mov	sl, r3
 8009094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009098:	b10a      	cbz	r2, 800909e <_vfiprintf_r+0x86>
 800909a:	2a25      	cmp	r2, #37	@ 0x25
 800909c:	d1f9      	bne.n	8009092 <_vfiprintf_r+0x7a>
 800909e:	ebba 0b04 	subs.w	fp, sl, r4
 80090a2:	d00b      	beq.n	80090bc <_vfiprintf_r+0xa4>
 80090a4:	465b      	mov	r3, fp
 80090a6:	4622      	mov	r2, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	4630      	mov	r0, r6
 80090ac:	f7ff ffa2 	bl	8008ff4 <__sfputs_r>
 80090b0:	3001      	adds	r0, #1
 80090b2:	f000 80a7 	beq.w	8009204 <_vfiprintf_r+0x1ec>
 80090b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090b8:	445a      	add	r2, fp
 80090ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80090bc:	f89a 3000 	ldrb.w	r3, [sl]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 809f 	beq.w	8009204 <_vfiprintf_r+0x1ec>
 80090c6:	2300      	movs	r3, #0
 80090c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090d0:	f10a 0a01 	add.w	sl, sl, #1
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	9307      	str	r3, [sp, #28]
 80090d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80090de:	4654      	mov	r4, sl
 80090e0:	2205      	movs	r2, #5
 80090e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e6:	4853      	ldr	r0, [pc, #332]	@ (8009234 <_vfiprintf_r+0x21c>)
 80090e8:	f7f7 f8fa 	bl	80002e0 <memchr>
 80090ec:	9a04      	ldr	r2, [sp, #16]
 80090ee:	b9d8      	cbnz	r0, 8009128 <_vfiprintf_r+0x110>
 80090f0:	06d1      	lsls	r1, r2, #27
 80090f2:	bf44      	itt	mi
 80090f4:	2320      	movmi	r3, #32
 80090f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090fa:	0713      	lsls	r3, r2, #28
 80090fc:	bf44      	itt	mi
 80090fe:	232b      	movmi	r3, #43	@ 0x2b
 8009100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009104:	f89a 3000 	ldrb.w	r3, [sl]
 8009108:	2b2a      	cmp	r3, #42	@ 0x2a
 800910a:	d015      	beq.n	8009138 <_vfiprintf_r+0x120>
 800910c:	9a07      	ldr	r2, [sp, #28]
 800910e:	4654      	mov	r4, sl
 8009110:	2000      	movs	r0, #0
 8009112:	f04f 0c0a 	mov.w	ip, #10
 8009116:	4621      	mov	r1, r4
 8009118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800911c:	3b30      	subs	r3, #48	@ 0x30
 800911e:	2b09      	cmp	r3, #9
 8009120:	d94b      	bls.n	80091ba <_vfiprintf_r+0x1a2>
 8009122:	b1b0      	cbz	r0, 8009152 <_vfiprintf_r+0x13a>
 8009124:	9207      	str	r2, [sp, #28]
 8009126:	e014      	b.n	8009152 <_vfiprintf_r+0x13a>
 8009128:	eba0 0308 	sub.w	r3, r0, r8
 800912c:	fa09 f303 	lsl.w	r3, r9, r3
 8009130:	4313      	orrs	r3, r2
 8009132:	9304      	str	r3, [sp, #16]
 8009134:	46a2      	mov	sl, r4
 8009136:	e7d2      	b.n	80090de <_vfiprintf_r+0xc6>
 8009138:	9b03      	ldr	r3, [sp, #12]
 800913a:	1d19      	adds	r1, r3, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	9103      	str	r1, [sp, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	bfbb      	ittet	lt
 8009144:	425b      	neglt	r3, r3
 8009146:	f042 0202 	orrlt.w	r2, r2, #2
 800914a:	9307      	strge	r3, [sp, #28]
 800914c:	9307      	strlt	r3, [sp, #28]
 800914e:	bfb8      	it	lt
 8009150:	9204      	strlt	r2, [sp, #16]
 8009152:	7823      	ldrb	r3, [r4, #0]
 8009154:	2b2e      	cmp	r3, #46	@ 0x2e
 8009156:	d10a      	bne.n	800916e <_vfiprintf_r+0x156>
 8009158:	7863      	ldrb	r3, [r4, #1]
 800915a:	2b2a      	cmp	r3, #42	@ 0x2a
 800915c:	d132      	bne.n	80091c4 <_vfiprintf_r+0x1ac>
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	1d1a      	adds	r2, r3, #4
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	9203      	str	r2, [sp, #12]
 8009166:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800916a:	3402      	adds	r4, #2
 800916c:	9305      	str	r3, [sp, #20]
 800916e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009244 <_vfiprintf_r+0x22c>
 8009172:	7821      	ldrb	r1, [r4, #0]
 8009174:	2203      	movs	r2, #3
 8009176:	4650      	mov	r0, sl
 8009178:	f7f7 f8b2 	bl	80002e0 <memchr>
 800917c:	b138      	cbz	r0, 800918e <_vfiprintf_r+0x176>
 800917e:	9b04      	ldr	r3, [sp, #16]
 8009180:	eba0 000a 	sub.w	r0, r0, sl
 8009184:	2240      	movs	r2, #64	@ 0x40
 8009186:	4082      	lsls	r2, r0
 8009188:	4313      	orrs	r3, r2
 800918a:	3401      	adds	r4, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009192:	4829      	ldr	r0, [pc, #164]	@ (8009238 <_vfiprintf_r+0x220>)
 8009194:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009198:	2206      	movs	r2, #6
 800919a:	f7f7 f8a1 	bl	80002e0 <memchr>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d03f      	beq.n	8009222 <_vfiprintf_r+0x20a>
 80091a2:	4b26      	ldr	r3, [pc, #152]	@ (800923c <_vfiprintf_r+0x224>)
 80091a4:	bb1b      	cbnz	r3, 80091ee <_vfiprintf_r+0x1d6>
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	3307      	adds	r3, #7
 80091aa:	f023 0307 	bic.w	r3, r3, #7
 80091ae:	3308      	adds	r3, #8
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b4:	443b      	add	r3, r7
 80091b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b8:	e76a      	b.n	8009090 <_vfiprintf_r+0x78>
 80091ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80091be:	460c      	mov	r4, r1
 80091c0:	2001      	movs	r0, #1
 80091c2:	e7a8      	b.n	8009116 <_vfiprintf_r+0xfe>
 80091c4:	2300      	movs	r3, #0
 80091c6:	3401      	adds	r4, #1
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	4619      	mov	r1, r3
 80091cc:	f04f 0c0a 	mov.w	ip, #10
 80091d0:	4620      	mov	r0, r4
 80091d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d6:	3a30      	subs	r2, #48	@ 0x30
 80091d8:	2a09      	cmp	r2, #9
 80091da:	d903      	bls.n	80091e4 <_vfiprintf_r+0x1cc>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0c6      	beq.n	800916e <_vfiprintf_r+0x156>
 80091e0:	9105      	str	r1, [sp, #20]
 80091e2:	e7c4      	b.n	800916e <_vfiprintf_r+0x156>
 80091e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e8:	4604      	mov	r4, r0
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7f0      	b.n	80091d0 <_vfiprintf_r+0x1b8>
 80091ee:	ab03      	add	r3, sp, #12
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	462a      	mov	r2, r5
 80091f4:	4b12      	ldr	r3, [pc, #72]	@ (8009240 <_vfiprintf_r+0x228>)
 80091f6:	a904      	add	r1, sp, #16
 80091f8:	4630      	mov	r0, r6
 80091fa:	f3af 8000 	nop.w
 80091fe:	4607      	mov	r7, r0
 8009200:	1c78      	adds	r0, r7, #1
 8009202:	d1d6      	bne.n	80091b2 <_vfiprintf_r+0x19a>
 8009204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009206:	07d9      	lsls	r1, r3, #31
 8009208:	d405      	bmi.n	8009216 <_vfiprintf_r+0x1fe>
 800920a:	89ab      	ldrh	r3, [r5, #12]
 800920c:	059a      	lsls	r2, r3, #22
 800920e:	d402      	bmi.n	8009216 <_vfiprintf_r+0x1fe>
 8009210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009212:	f7ff fed7 	bl	8008fc4 <__retarget_lock_release_recursive>
 8009216:	89ab      	ldrh	r3, [r5, #12]
 8009218:	065b      	lsls	r3, r3, #25
 800921a:	f53f af1f 	bmi.w	800905c <_vfiprintf_r+0x44>
 800921e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009220:	e71e      	b.n	8009060 <_vfiprintf_r+0x48>
 8009222:	ab03      	add	r3, sp, #12
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	462a      	mov	r2, r5
 8009228:	4b05      	ldr	r3, [pc, #20]	@ (8009240 <_vfiprintf_r+0x228>)
 800922a:	a904      	add	r1, sp, #16
 800922c:	4630      	mov	r0, r6
 800922e:	f000 f91b 	bl	8009468 <_printf_i>
 8009232:	e7e4      	b.n	80091fe <_vfiprintf_r+0x1e6>
 8009234:	08009d68 	.word	0x08009d68
 8009238:	08009d72 	.word	0x08009d72
 800923c:	00000000 	.word	0x00000000
 8009240:	08008ff5 	.word	0x08008ff5
 8009244:	08009d6e 	.word	0x08009d6e

08009248 <sbrk_aligned>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	4e0f      	ldr	r6, [pc, #60]	@ (8009288 <sbrk_aligned+0x40>)
 800924c:	460c      	mov	r4, r1
 800924e:	6831      	ldr	r1, [r6, #0]
 8009250:	4605      	mov	r5, r0
 8009252:	b911      	cbnz	r1, 800925a <sbrk_aligned+0x12>
 8009254:	f000 fca4 	bl	8009ba0 <_sbrk_r>
 8009258:	6030      	str	r0, [r6, #0]
 800925a:	4621      	mov	r1, r4
 800925c:	4628      	mov	r0, r5
 800925e:	f000 fc9f 	bl	8009ba0 <_sbrk_r>
 8009262:	1c43      	adds	r3, r0, #1
 8009264:	d103      	bne.n	800926e <sbrk_aligned+0x26>
 8009266:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800926a:	4620      	mov	r0, r4
 800926c:	bd70      	pop	{r4, r5, r6, pc}
 800926e:	1cc4      	adds	r4, r0, #3
 8009270:	f024 0403 	bic.w	r4, r4, #3
 8009274:	42a0      	cmp	r0, r4
 8009276:	d0f8      	beq.n	800926a <sbrk_aligned+0x22>
 8009278:	1a21      	subs	r1, r4, r0
 800927a:	4628      	mov	r0, r5
 800927c:	f000 fc90 	bl	8009ba0 <_sbrk_r>
 8009280:	3001      	adds	r0, #1
 8009282:	d1f2      	bne.n	800926a <sbrk_aligned+0x22>
 8009284:	e7ef      	b.n	8009266 <sbrk_aligned+0x1e>
 8009286:	bf00      	nop
 8009288:	24000380 	.word	0x24000380

0800928c <_malloc_r>:
 800928c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009290:	1ccd      	adds	r5, r1, #3
 8009292:	f025 0503 	bic.w	r5, r5, #3
 8009296:	3508      	adds	r5, #8
 8009298:	2d0c      	cmp	r5, #12
 800929a:	bf38      	it	cc
 800929c:	250c      	movcc	r5, #12
 800929e:	2d00      	cmp	r5, #0
 80092a0:	4606      	mov	r6, r0
 80092a2:	db01      	blt.n	80092a8 <_malloc_r+0x1c>
 80092a4:	42a9      	cmp	r1, r5
 80092a6:	d904      	bls.n	80092b2 <_malloc_r+0x26>
 80092a8:	230c      	movs	r3, #12
 80092aa:	6033      	str	r3, [r6, #0]
 80092ac:	2000      	movs	r0, #0
 80092ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009388 <_malloc_r+0xfc>
 80092b6:	f000 faa3 	bl	8009800 <__malloc_lock>
 80092ba:	f8d8 3000 	ldr.w	r3, [r8]
 80092be:	461c      	mov	r4, r3
 80092c0:	bb44      	cbnz	r4, 8009314 <_malloc_r+0x88>
 80092c2:	4629      	mov	r1, r5
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff ffbf 	bl	8009248 <sbrk_aligned>
 80092ca:	1c43      	adds	r3, r0, #1
 80092cc:	4604      	mov	r4, r0
 80092ce:	d158      	bne.n	8009382 <_malloc_r+0xf6>
 80092d0:	f8d8 4000 	ldr.w	r4, [r8]
 80092d4:	4627      	mov	r7, r4
 80092d6:	2f00      	cmp	r7, #0
 80092d8:	d143      	bne.n	8009362 <_malloc_r+0xd6>
 80092da:	2c00      	cmp	r4, #0
 80092dc:	d04b      	beq.n	8009376 <_malloc_r+0xea>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	4639      	mov	r1, r7
 80092e2:	4630      	mov	r0, r6
 80092e4:	eb04 0903 	add.w	r9, r4, r3
 80092e8:	f000 fc5a 	bl	8009ba0 <_sbrk_r>
 80092ec:	4581      	cmp	r9, r0
 80092ee:	d142      	bne.n	8009376 <_malloc_r+0xea>
 80092f0:	6821      	ldr	r1, [r4, #0]
 80092f2:	1a6d      	subs	r5, r5, r1
 80092f4:	4629      	mov	r1, r5
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7ff ffa6 	bl	8009248 <sbrk_aligned>
 80092fc:	3001      	adds	r0, #1
 80092fe:	d03a      	beq.n	8009376 <_malloc_r+0xea>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	442b      	add	r3, r5
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	f8d8 3000 	ldr.w	r3, [r8]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	bb62      	cbnz	r2, 8009368 <_malloc_r+0xdc>
 800930e:	f8c8 7000 	str.w	r7, [r8]
 8009312:	e00f      	b.n	8009334 <_malloc_r+0xa8>
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	1b52      	subs	r2, r2, r5
 8009318:	d420      	bmi.n	800935c <_malloc_r+0xd0>
 800931a:	2a0b      	cmp	r2, #11
 800931c:	d917      	bls.n	800934e <_malloc_r+0xc2>
 800931e:	1961      	adds	r1, r4, r5
 8009320:	42a3      	cmp	r3, r4
 8009322:	6025      	str	r5, [r4, #0]
 8009324:	bf18      	it	ne
 8009326:	6059      	strne	r1, [r3, #4]
 8009328:	6863      	ldr	r3, [r4, #4]
 800932a:	bf08      	it	eq
 800932c:	f8c8 1000 	streq.w	r1, [r8]
 8009330:	5162      	str	r2, [r4, r5]
 8009332:	604b      	str	r3, [r1, #4]
 8009334:	4630      	mov	r0, r6
 8009336:	f000 fa69 	bl	800980c <__malloc_unlock>
 800933a:	f104 000b 	add.w	r0, r4, #11
 800933e:	1d23      	adds	r3, r4, #4
 8009340:	f020 0007 	bic.w	r0, r0, #7
 8009344:	1ac2      	subs	r2, r0, r3
 8009346:	bf1c      	itt	ne
 8009348:	1a1b      	subne	r3, r3, r0
 800934a:	50a3      	strne	r3, [r4, r2]
 800934c:	e7af      	b.n	80092ae <_malloc_r+0x22>
 800934e:	6862      	ldr	r2, [r4, #4]
 8009350:	42a3      	cmp	r3, r4
 8009352:	bf0c      	ite	eq
 8009354:	f8c8 2000 	streq.w	r2, [r8]
 8009358:	605a      	strne	r2, [r3, #4]
 800935a:	e7eb      	b.n	8009334 <_malloc_r+0xa8>
 800935c:	4623      	mov	r3, r4
 800935e:	6864      	ldr	r4, [r4, #4]
 8009360:	e7ae      	b.n	80092c0 <_malloc_r+0x34>
 8009362:	463c      	mov	r4, r7
 8009364:	687f      	ldr	r7, [r7, #4]
 8009366:	e7b6      	b.n	80092d6 <_malloc_r+0x4a>
 8009368:	461a      	mov	r2, r3
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	42a3      	cmp	r3, r4
 800936e:	d1fb      	bne.n	8009368 <_malloc_r+0xdc>
 8009370:	2300      	movs	r3, #0
 8009372:	6053      	str	r3, [r2, #4]
 8009374:	e7de      	b.n	8009334 <_malloc_r+0xa8>
 8009376:	230c      	movs	r3, #12
 8009378:	6033      	str	r3, [r6, #0]
 800937a:	4630      	mov	r0, r6
 800937c:	f000 fa46 	bl	800980c <__malloc_unlock>
 8009380:	e794      	b.n	80092ac <_malloc_r+0x20>
 8009382:	6005      	str	r5, [r0, #0]
 8009384:	e7d6      	b.n	8009334 <_malloc_r+0xa8>
 8009386:	bf00      	nop
 8009388:	24000384 	.word	0x24000384

0800938c <_printf_common>:
 800938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	4616      	mov	r6, r2
 8009392:	4698      	mov	r8, r3
 8009394:	688a      	ldr	r2, [r1, #8]
 8009396:	690b      	ldr	r3, [r1, #16]
 8009398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800939c:	4293      	cmp	r3, r2
 800939e:	bfb8      	it	lt
 80093a0:	4613      	movlt	r3, r2
 80093a2:	6033      	str	r3, [r6, #0]
 80093a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093a8:	4607      	mov	r7, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	b10a      	cbz	r2, 80093b2 <_printf_common+0x26>
 80093ae:	3301      	adds	r3, #1
 80093b0:	6033      	str	r3, [r6, #0]
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	0699      	lsls	r1, r3, #26
 80093b6:	bf42      	ittt	mi
 80093b8:	6833      	ldrmi	r3, [r6, #0]
 80093ba:	3302      	addmi	r3, #2
 80093bc:	6033      	strmi	r3, [r6, #0]
 80093be:	6825      	ldr	r5, [r4, #0]
 80093c0:	f015 0506 	ands.w	r5, r5, #6
 80093c4:	d106      	bne.n	80093d4 <_printf_common+0x48>
 80093c6:	f104 0a19 	add.w	sl, r4, #25
 80093ca:	68e3      	ldr	r3, [r4, #12]
 80093cc:	6832      	ldr	r2, [r6, #0]
 80093ce:	1a9b      	subs	r3, r3, r2
 80093d0:	42ab      	cmp	r3, r5
 80093d2:	dc26      	bgt.n	8009422 <_printf_common+0x96>
 80093d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	3b00      	subs	r3, #0
 80093dc:	bf18      	it	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	0692      	lsls	r2, r2, #26
 80093e2:	d42b      	bmi.n	800943c <_printf_common+0xb0>
 80093e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093e8:	4641      	mov	r1, r8
 80093ea:	4638      	mov	r0, r7
 80093ec:	47c8      	blx	r9
 80093ee:	3001      	adds	r0, #1
 80093f0:	d01e      	beq.n	8009430 <_printf_common+0xa4>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	6922      	ldr	r2, [r4, #16]
 80093f6:	f003 0306 	and.w	r3, r3, #6
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	bf02      	ittt	eq
 80093fe:	68e5      	ldreq	r5, [r4, #12]
 8009400:	6833      	ldreq	r3, [r6, #0]
 8009402:	1aed      	subeq	r5, r5, r3
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	bf0c      	ite	eq
 8009408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800940c:	2500      	movne	r5, #0
 800940e:	4293      	cmp	r3, r2
 8009410:	bfc4      	itt	gt
 8009412:	1a9b      	subgt	r3, r3, r2
 8009414:	18ed      	addgt	r5, r5, r3
 8009416:	2600      	movs	r6, #0
 8009418:	341a      	adds	r4, #26
 800941a:	42b5      	cmp	r5, r6
 800941c:	d11a      	bne.n	8009454 <_printf_common+0xc8>
 800941e:	2000      	movs	r0, #0
 8009420:	e008      	b.n	8009434 <_printf_common+0xa8>
 8009422:	2301      	movs	r3, #1
 8009424:	4652      	mov	r2, sl
 8009426:	4641      	mov	r1, r8
 8009428:	4638      	mov	r0, r7
 800942a:	47c8      	blx	r9
 800942c:	3001      	adds	r0, #1
 800942e:	d103      	bne.n	8009438 <_printf_common+0xac>
 8009430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009438:	3501      	adds	r5, #1
 800943a:	e7c6      	b.n	80093ca <_printf_common+0x3e>
 800943c:	18e1      	adds	r1, r4, r3
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	2030      	movs	r0, #48	@ 0x30
 8009442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009446:	4422      	add	r2, r4
 8009448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800944c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009450:	3302      	adds	r3, #2
 8009452:	e7c7      	b.n	80093e4 <_printf_common+0x58>
 8009454:	2301      	movs	r3, #1
 8009456:	4622      	mov	r2, r4
 8009458:	4641      	mov	r1, r8
 800945a:	4638      	mov	r0, r7
 800945c:	47c8      	blx	r9
 800945e:	3001      	adds	r0, #1
 8009460:	d0e6      	beq.n	8009430 <_printf_common+0xa4>
 8009462:	3601      	adds	r6, #1
 8009464:	e7d9      	b.n	800941a <_printf_common+0x8e>
	...

08009468 <_printf_i>:
 8009468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	7e0f      	ldrb	r7, [r1, #24]
 800946e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009470:	2f78      	cmp	r7, #120	@ 0x78
 8009472:	4691      	mov	r9, r2
 8009474:	4680      	mov	r8, r0
 8009476:	460c      	mov	r4, r1
 8009478:	469a      	mov	sl, r3
 800947a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800947e:	d807      	bhi.n	8009490 <_printf_i+0x28>
 8009480:	2f62      	cmp	r7, #98	@ 0x62
 8009482:	d80a      	bhi.n	800949a <_printf_i+0x32>
 8009484:	2f00      	cmp	r7, #0
 8009486:	f000 80d2 	beq.w	800962e <_printf_i+0x1c6>
 800948a:	2f58      	cmp	r7, #88	@ 0x58
 800948c:	f000 80b9 	beq.w	8009602 <_printf_i+0x19a>
 8009490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009498:	e03a      	b.n	8009510 <_printf_i+0xa8>
 800949a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800949e:	2b15      	cmp	r3, #21
 80094a0:	d8f6      	bhi.n	8009490 <_printf_i+0x28>
 80094a2:	a101      	add	r1, pc, #4	@ (adr r1, 80094a8 <_printf_i+0x40>)
 80094a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094a8:	08009501 	.word	0x08009501
 80094ac:	08009515 	.word	0x08009515
 80094b0:	08009491 	.word	0x08009491
 80094b4:	08009491 	.word	0x08009491
 80094b8:	08009491 	.word	0x08009491
 80094bc:	08009491 	.word	0x08009491
 80094c0:	08009515 	.word	0x08009515
 80094c4:	08009491 	.word	0x08009491
 80094c8:	08009491 	.word	0x08009491
 80094cc:	08009491 	.word	0x08009491
 80094d0:	08009491 	.word	0x08009491
 80094d4:	08009615 	.word	0x08009615
 80094d8:	0800953f 	.word	0x0800953f
 80094dc:	080095cf 	.word	0x080095cf
 80094e0:	08009491 	.word	0x08009491
 80094e4:	08009491 	.word	0x08009491
 80094e8:	08009637 	.word	0x08009637
 80094ec:	08009491 	.word	0x08009491
 80094f0:	0800953f 	.word	0x0800953f
 80094f4:	08009491 	.word	0x08009491
 80094f8:	08009491 	.word	0x08009491
 80094fc:	080095d7 	.word	0x080095d7
 8009500:	6833      	ldr	r3, [r6, #0]
 8009502:	1d1a      	adds	r2, r3, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6032      	str	r2, [r6, #0]
 8009508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800950c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009510:	2301      	movs	r3, #1
 8009512:	e09d      	b.n	8009650 <_printf_i+0x1e8>
 8009514:	6833      	ldr	r3, [r6, #0]
 8009516:	6820      	ldr	r0, [r4, #0]
 8009518:	1d19      	adds	r1, r3, #4
 800951a:	6031      	str	r1, [r6, #0]
 800951c:	0606      	lsls	r6, r0, #24
 800951e:	d501      	bpl.n	8009524 <_printf_i+0xbc>
 8009520:	681d      	ldr	r5, [r3, #0]
 8009522:	e003      	b.n	800952c <_printf_i+0xc4>
 8009524:	0645      	lsls	r5, r0, #25
 8009526:	d5fb      	bpl.n	8009520 <_printf_i+0xb8>
 8009528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800952c:	2d00      	cmp	r5, #0
 800952e:	da03      	bge.n	8009538 <_printf_i+0xd0>
 8009530:	232d      	movs	r3, #45	@ 0x2d
 8009532:	426d      	negs	r5, r5
 8009534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009538:	4859      	ldr	r0, [pc, #356]	@ (80096a0 <_printf_i+0x238>)
 800953a:	230a      	movs	r3, #10
 800953c:	e011      	b.n	8009562 <_printf_i+0xfa>
 800953e:	6821      	ldr	r1, [r4, #0]
 8009540:	6833      	ldr	r3, [r6, #0]
 8009542:	0608      	lsls	r0, r1, #24
 8009544:	f853 5b04 	ldr.w	r5, [r3], #4
 8009548:	d402      	bmi.n	8009550 <_printf_i+0xe8>
 800954a:	0649      	lsls	r1, r1, #25
 800954c:	bf48      	it	mi
 800954e:	b2ad      	uxthmi	r5, r5
 8009550:	2f6f      	cmp	r7, #111	@ 0x6f
 8009552:	4853      	ldr	r0, [pc, #332]	@ (80096a0 <_printf_i+0x238>)
 8009554:	6033      	str	r3, [r6, #0]
 8009556:	bf14      	ite	ne
 8009558:	230a      	movne	r3, #10
 800955a:	2308      	moveq	r3, #8
 800955c:	2100      	movs	r1, #0
 800955e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009562:	6866      	ldr	r6, [r4, #4]
 8009564:	60a6      	str	r6, [r4, #8]
 8009566:	2e00      	cmp	r6, #0
 8009568:	bfa2      	ittt	ge
 800956a:	6821      	ldrge	r1, [r4, #0]
 800956c:	f021 0104 	bicge.w	r1, r1, #4
 8009570:	6021      	strge	r1, [r4, #0]
 8009572:	b90d      	cbnz	r5, 8009578 <_printf_i+0x110>
 8009574:	2e00      	cmp	r6, #0
 8009576:	d04b      	beq.n	8009610 <_printf_i+0x1a8>
 8009578:	4616      	mov	r6, r2
 800957a:	fbb5 f1f3 	udiv	r1, r5, r3
 800957e:	fb03 5711 	mls	r7, r3, r1, r5
 8009582:	5dc7      	ldrb	r7, [r0, r7]
 8009584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009588:	462f      	mov	r7, r5
 800958a:	42bb      	cmp	r3, r7
 800958c:	460d      	mov	r5, r1
 800958e:	d9f4      	bls.n	800957a <_printf_i+0x112>
 8009590:	2b08      	cmp	r3, #8
 8009592:	d10b      	bne.n	80095ac <_printf_i+0x144>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	07df      	lsls	r7, r3, #31
 8009598:	d508      	bpl.n	80095ac <_printf_i+0x144>
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	6861      	ldr	r1, [r4, #4]
 800959e:	4299      	cmp	r1, r3
 80095a0:	bfde      	ittt	le
 80095a2:	2330      	movle	r3, #48	@ 0x30
 80095a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80095ac:	1b92      	subs	r2, r2, r6
 80095ae:	6122      	str	r2, [r4, #16]
 80095b0:	f8cd a000 	str.w	sl, [sp]
 80095b4:	464b      	mov	r3, r9
 80095b6:	aa03      	add	r2, sp, #12
 80095b8:	4621      	mov	r1, r4
 80095ba:	4640      	mov	r0, r8
 80095bc:	f7ff fee6 	bl	800938c <_printf_common>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d14a      	bne.n	800965a <_printf_i+0x1f2>
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095c8:	b004      	add	sp, #16
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	f043 0320 	orr.w	r3, r3, #32
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	4833      	ldr	r0, [pc, #204]	@ (80096a4 <_printf_i+0x23c>)
 80095d8:	2778      	movs	r7, #120	@ 0x78
 80095da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	6831      	ldr	r1, [r6, #0]
 80095e2:	061f      	lsls	r7, r3, #24
 80095e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80095e8:	d402      	bmi.n	80095f0 <_printf_i+0x188>
 80095ea:	065f      	lsls	r7, r3, #25
 80095ec:	bf48      	it	mi
 80095ee:	b2ad      	uxthmi	r5, r5
 80095f0:	6031      	str	r1, [r6, #0]
 80095f2:	07d9      	lsls	r1, r3, #31
 80095f4:	bf44      	itt	mi
 80095f6:	f043 0320 	orrmi.w	r3, r3, #32
 80095fa:	6023      	strmi	r3, [r4, #0]
 80095fc:	b11d      	cbz	r5, 8009606 <_printf_i+0x19e>
 80095fe:	2310      	movs	r3, #16
 8009600:	e7ac      	b.n	800955c <_printf_i+0xf4>
 8009602:	4827      	ldr	r0, [pc, #156]	@ (80096a0 <_printf_i+0x238>)
 8009604:	e7e9      	b.n	80095da <_printf_i+0x172>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	f023 0320 	bic.w	r3, r3, #32
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	e7f6      	b.n	80095fe <_printf_i+0x196>
 8009610:	4616      	mov	r6, r2
 8009612:	e7bd      	b.n	8009590 <_printf_i+0x128>
 8009614:	6833      	ldr	r3, [r6, #0]
 8009616:	6825      	ldr	r5, [r4, #0]
 8009618:	6961      	ldr	r1, [r4, #20]
 800961a:	1d18      	adds	r0, r3, #4
 800961c:	6030      	str	r0, [r6, #0]
 800961e:	062e      	lsls	r6, r5, #24
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	d501      	bpl.n	8009628 <_printf_i+0x1c0>
 8009624:	6019      	str	r1, [r3, #0]
 8009626:	e002      	b.n	800962e <_printf_i+0x1c6>
 8009628:	0668      	lsls	r0, r5, #25
 800962a:	d5fb      	bpl.n	8009624 <_printf_i+0x1bc>
 800962c:	8019      	strh	r1, [r3, #0]
 800962e:	2300      	movs	r3, #0
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	4616      	mov	r6, r2
 8009634:	e7bc      	b.n	80095b0 <_printf_i+0x148>
 8009636:	6833      	ldr	r3, [r6, #0]
 8009638:	1d1a      	adds	r2, r3, #4
 800963a:	6032      	str	r2, [r6, #0]
 800963c:	681e      	ldr	r6, [r3, #0]
 800963e:	6862      	ldr	r2, [r4, #4]
 8009640:	2100      	movs	r1, #0
 8009642:	4630      	mov	r0, r6
 8009644:	f7f6 fe4c 	bl	80002e0 <memchr>
 8009648:	b108      	cbz	r0, 800964e <_printf_i+0x1e6>
 800964a:	1b80      	subs	r0, r0, r6
 800964c:	6060      	str	r0, [r4, #4]
 800964e:	6863      	ldr	r3, [r4, #4]
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	2300      	movs	r3, #0
 8009654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009658:	e7aa      	b.n	80095b0 <_printf_i+0x148>
 800965a:	6923      	ldr	r3, [r4, #16]
 800965c:	4632      	mov	r2, r6
 800965e:	4649      	mov	r1, r9
 8009660:	4640      	mov	r0, r8
 8009662:	47d0      	blx	sl
 8009664:	3001      	adds	r0, #1
 8009666:	d0ad      	beq.n	80095c4 <_printf_i+0x15c>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	079b      	lsls	r3, r3, #30
 800966c:	d413      	bmi.n	8009696 <_printf_i+0x22e>
 800966e:	68e0      	ldr	r0, [r4, #12]
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	4298      	cmp	r0, r3
 8009674:	bfb8      	it	lt
 8009676:	4618      	movlt	r0, r3
 8009678:	e7a6      	b.n	80095c8 <_printf_i+0x160>
 800967a:	2301      	movs	r3, #1
 800967c:	4632      	mov	r2, r6
 800967e:	4649      	mov	r1, r9
 8009680:	4640      	mov	r0, r8
 8009682:	47d0      	blx	sl
 8009684:	3001      	adds	r0, #1
 8009686:	d09d      	beq.n	80095c4 <_printf_i+0x15c>
 8009688:	3501      	adds	r5, #1
 800968a:	68e3      	ldr	r3, [r4, #12]
 800968c:	9903      	ldr	r1, [sp, #12]
 800968e:	1a5b      	subs	r3, r3, r1
 8009690:	42ab      	cmp	r3, r5
 8009692:	dcf2      	bgt.n	800967a <_printf_i+0x212>
 8009694:	e7eb      	b.n	800966e <_printf_i+0x206>
 8009696:	2500      	movs	r5, #0
 8009698:	f104 0619 	add.w	r6, r4, #25
 800969c:	e7f5      	b.n	800968a <_printf_i+0x222>
 800969e:	bf00      	nop
 80096a0:	08009d79 	.word	0x08009d79
 80096a4:	08009d8a 	.word	0x08009d8a

080096a8 <__sflush_r>:
 80096a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b0:	0716      	lsls	r6, r2, #28
 80096b2:	4605      	mov	r5, r0
 80096b4:	460c      	mov	r4, r1
 80096b6:	d454      	bmi.n	8009762 <__sflush_r+0xba>
 80096b8:	684b      	ldr	r3, [r1, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	dc02      	bgt.n	80096c4 <__sflush_r+0x1c>
 80096be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dd48      	ble.n	8009756 <__sflush_r+0xae>
 80096c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096c6:	2e00      	cmp	r6, #0
 80096c8:	d045      	beq.n	8009756 <__sflush_r+0xae>
 80096ca:	2300      	movs	r3, #0
 80096cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80096d0:	682f      	ldr	r7, [r5, #0]
 80096d2:	6a21      	ldr	r1, [r4, #32]
 80096d4:	602b      	str	r3, [r5, #0]
 80096d6:	d030      	beq.n	800973a <__sflush_r+0x92>
 80096d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	0759      	lsls	r1, r3, #29
 80096de:	d505      	bpl.n	80096ec <__sflush_r+0x44>
 80096e0:	6863      	ldr	r3, [r4, #4]
 80096e2:	1ad2      	subs	r2, r2, r3
 80096e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096e6:	b10b      	cbz	r3, 80096ec <__sflush_r+0x44>
 80096e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096ea:	1ad2      	subs	r2, r2, r3
 80096ec:	2300      	movs	r3, #0
 80096ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096f0:	6a21      	ldr	r1, [r4, #32]
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b0      	blx	r6
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	d106      	bne.n	800970a <__sflush_r+0x62>
 80096fc:	6829      	ldr	r1, [r5, #0]
 80096fe:	291d      	cmp	r1, #29
 8009700:	d82b      	bhi.n	800975a <__sflush_r+0xb2>
 8009702:	4a2a      	ldr	r2, [pc, #168]	@ (80097ac <__sflush_r+0x104>)
 8009704:	410a      	asrs	r2, r1
 8009706:	07d6      	lsls	r6, r2, #31
 8009708:	d427      	bmi.n	800975a <__sflush_r+0xb2>
 800970a:	2200      	movs	r2, #0
 800970c:	6062      	str	r2, [r4, #4]
 800970e:	04d9      	lsls	r1, r3, #19
 8009710:	6922      	ldr	r2, [r4, #16]
 8009712:	6022      	str	r2, [r4, #0]
 8009714:	d504      	bpl.n	8009720 <__sflush_r+0x78>
 8009716:	1c42      	adds	r2, r0, #1
 8009718:	d101      	bne.n	800971e <__sflush_r+0x76>
 800971a:	682b      	ldr	r3, [r5, #0]
 800971c:	b903      	cbnz	r3, 8009720 <__sflush_r+0x78>
 800971e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009722:	602f      	str	r7, [r5, #0]
 8009724:	b1b9      	cbz	r1, 8009756 <__sflush_r+0xae>
 8009726:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800972a:	4299      	cmp	r1, r3
 800972c:	d002      	beq.n	8009734 <__sflush_r+0x8c>
 800972e:	4628      	mov	r0, r5
 8009730:	f000 fa58 	bl	8009be4 <_free_r>
 8009734:	2300      	movs	r3, #0
 8009736:	6363      	str	r3, [r4, #52]	@ 0x34
 8009738:	e00d      	b.n	8009756 <__sflush_r+0xae>
 800973a:	2301      	movs	r3, #1
 800973c:	4628      	mov	r0, r5
 800973e:	47b0      	blx	r6
 8009740:	4602      	mov	r2, r0
 8009742:	1c50      	adds	r0, r2, #1
 8009744:	d1c9      	bne.n	80096da <__sflush_r+0x32>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d0c6      	beq.n	80096da <__sflush_r+0x32>
 800974c:	2b1d      	cmp	r3, #29
 800974e:	d001      	beq.n	8009754 <__sflush_r+0xac>
 8009750:	2b16      	cmp	r3, #22
 8009752:	d11e      	bne.n	8009792 <__sflush_r+0xea>
 8009754:	602f      	str	r7, [r5, #0]
 8009756:	2000      	movs	r0, #0
 8009758:	e022      	b.n	80097a0 <__sflush_r+0xf8>
 800975a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800975e:	b21b      	sxth	r3, r3
 8009760:	e01b      	b.n	800979a <__sflush_r+0xf2>
 8009762:	690f      	ldr	r7, [r1, #16]
 8009764:	2f00      	cmp	r7, #0
 8009766:	d0f6      	beq.n	8009756 <__sflush_r+0xae>
 8009768:	0793      	lsls	r3, r2, #30
 800976a:	680e      	ldr	r6, [r1, #0]
 800976c:	bf08      	it	eq
 800976e:	694b      	ldreq	r3, [r1, #20]
 8009770:	600f      	str	r7, [r1, #0]
 8009772:	bf18      	it	ne
 8009774:	2300      	movne	r3, #0
 8009776:	eba6 0807 	sub.w	r8, r6, r7
 800977a:	608b      	str	r3, [r1, #8]
 800977c:	f1b8 0f00 	cmp.w	r8, #0
 8009780:	dde9      	ble.n	8009756 <__sflush_r+0xae>
 8009782:	6a21      	ldr	r1, [r4, #32]
 8009784:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009786:	4643      	mov	r3, r8
 8009788:	463a      	mov	r2, r7
 800978a:	4628      	mov	r0, r5
 800978c:	47b0      	blx	r6
 800978e:	2800      	cmp	r0, #0
 8009790:	dc08      	bgt.n	80097a4 <__sflush_r+0xfc>
 8009792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800979a:	81a3      	strh	r3, [r4, #12]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a4:	4407      	add	r7, r0
 80097a6:	eba8 0800 	sub.w	r8, r8, r0
 80097aa:	e7e7      	b.n	800977c <__sflush_r+0xd4>
 80097ac:	dfbffffe 	.word	0xdfbffffe

080097b0 <_fflush_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	690b      	ldr	r3, [r1, #16]
 80097b4:	4605      	mov	r5, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	b913      	cbnz	r3, 80097c0 <_fflush_r+0x10>
 80097ba:	2500      	movs	r5, #0
 80097bc:	4628      	mov	r0, r5
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	b118      	cbz	r0, 80097ca <_fflush_r+0x1a>
 80097c2:	6a03      	ldr	r3, [r0, #32]
 80097c4:	b90b      	cbnz	r3, 80097ca <_fflush_r+0x1a>
 80097c6:	f7ff fb1b 	bl	8008e00 <__sinit>
 80097ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d0f3      	beq.n	80097ba <_fflush_r+0xa>
 80097d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80097d4:	07d0      	lsls	r0, r2, #31
 80097d6:	d404      	bmi.n	80097e2 <_fflush_r+0x32>
 80097d8:	0599      	lsls	r1, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_fflush_r+0x32>
 80097dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097de:	f7ff fbf0 	bl	8008fc2 <__retarget_lock_acquire_recursive>
 80097e2:	4628      	mov	r0, r5
 80097e4:	4621      	mov	r1, r4
 80097e6:	f7ff ff5f 	bl	80096a8 <__sflush_r>
 80097ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097ec:	07da      	lsls	r2, r3, #31
 80097ee:	4605      	mov	r5, r0
 80097f0:	d4e4      	bmi.n	80097bc <_fflush_r+0xc>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	059b      	lsls	r3, r3, #22
 80097f6:	d4e1      	bmi.n	80097bc <_fflush_r+0xc>
 80097f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097fa:	f7ff fbe3 	bl	8008fc4 <__retarget_lock_release_recursive>
 80097fe:	e7dd      	b.n	80097bc <_fflush_r+0xc>

08009800 <__malloc_lock>:
 8009800:	4801      	ldr	r0, [pc, #4]	@ (8009808 <__malloc_lock+0x8>)
 8009802:	f7ff bbde 	b.w	8008fc2 <__retarget_lock_acquire_recursive>
 8009806:	bf00      	nop
 8009808:	2400037c 	.word	0x2400037c

0800980c <__malloc_unlock>:
 800980c:	4801      	ldr	r0, [pc, #4]	@ (8009814 <__malloc_unlock+0x8>)
 800980e:	f7ff bbd9 	b.w	8008fc4 <__retarget_lock_release_recursive>
 8009812:	bf00      	nop
 8009814:	2400037c 	.word	0x2400037c

08009818 <__sread>:
 8009818:	b510      	push	{r4, lr}
 800981a:	460c      	mov	r4, r1
 800981c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009820:	f000 f9ac 	bl	8009b7c <_read_r>
 8009824:	2800      	cmp	r0, #0
 8009826:	bfab      	itete	ge
 8009828:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800982a:	89a3      	ldrhlt	r3, [r4, #12]
 800982c:	181b      	addge	r3, r3, r0
 800982e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009832:	bfac      	ite	ge
 8009834:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009836:	81a3      	strhlt	r3, [r4, #12]
 8009838:	bd10      	pop	{r4, pc}

0800983a <__swrite>:
 800983a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800983e:	461f      	mov	r7, r3
 8009840:	898b      	ldrh	r3, [r1, #12]
 8009842:	05db      	lsls	r3, r3, #23
 8009844:	4605      	mov	r5, r0
 8009846:	460c      	mov	r4, r1
 8009848:	4616      	mov	r6, r2
 800984a:	d505      	bpl.n	8009858 <__swrite+0x1e>
 800984c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009850:	2302      	movs	r3, #2
 8009852:	2200      	movs	r2, #0
 8009854:	f000 f980 	bl	8009b58 <_lseek_r>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800985e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	4632      	mov	r2, r6
 8009866:	463b      	mov	r3, r7
 8009868:	4628      	mov	r0, r5
 800986a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800986e:	f000 b9a7 	b.w	8009bc0 <_write_r>

08009872 <__sseek>:
 8009872:	b510      	push	{r4, lr}
 8009874:	460c      	mov	r4, r1
 8009876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987a:	f000 f96d 	bl	8009b58 <_lseek_r>
 800987e:	1c43      	adds	r3, r0, #1
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	bf15      	itete	ne
 8009884:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800988a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800988e:	81a3      	strheq	r3, [r4, #12]
 8009890:	bf18      	it	ne
 8009892:	81a3      	strhne	r3, [r4, #12]
 8009894:	bd10      	pop	{r4, pc}

08009896 <__sclose>:
 8009896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800989a:	f000 b92b 	b.w	8009af4 <_close_r>

0800989e <__swbuf_r>:
 800989e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a0:	460e      	mov	r6, r1
 80098a2:	4614      	mov	r4, r2
 80098a4:	4605      	mov	r5, r0
 80098a6:	b118      	cbz	r0, 80098b0 <__swbuf_r+0x12>
 80098a8:	6a03      	ldr	r3, [r0, #32]
 80098aa:	b90b      	cbnz	r3, 80098b0 <__swbuf_r+0x12>
 80098ac:	f7ff faa8 	bl	8008e00 <__sinit>
 80098b0:	69a3      	ldr	r3, [r4, #24]
 80098b2:	60a3      	str	r3, [r4, #8]
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	071a      	lsls	r2, r3, #28
 80098b8:	d501      	bpl.n	80098be <__swbuf_r+0x20>
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	b943      	cbnz	r3, 80098d0 <__swbuf_r+0x32>
 80098be:	4621      	mov	r1, r4
 80098c0:	4628      	mov	r0, r5
 80098c2:	f000 f82b 	bl	800991c <__swsetup_r>
 80098c6:	b118      	cbz	r0, 80098d0 <__swbuf_r+0x32>
 80098c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80098cc:	4638      	mov	r0, r7
 80098ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	6922      	ldr	r2, [r4, #16]
 80098d4:	1a98      	subs	r0, r3, r2
 80098d6:	6963      	ldr	r3, [r4, #20]
 80098d8:	b2f6      	uxtb	r6, r6
 80098da:	4283      	cmp	r3, r0
 80098dc:	4637      	mov	r7, r6
 80098de:	dc05      	bgt.n	80098ec <__swbuf_r+0x4e>
 80098e0:	4621      	mov	r1, r4
 80098e2:	4628      	mov	r0, r5
 80098e4:	f7ff ff64 	bl	80097b0 <_fflush_r>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1ed      	bne.n	80098c8 <__swbuf_r+0x2a>
 80098ec:	68a3      	ldr	r3, [r4, #8]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	60a3      	str	r3, [r4, #8]
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	6022      	str	r2, [r4, #0]
 80098f8:	701e      	strb	r6, [r3, #0]
 80098fa:	6962      	ldr	r2, [r4, #20]
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	429a      	cmp	r2, r3
 8009900:	d004      	beq.n	800990c <__swbuf_r+0x6e>
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	07db      	lsls	r3, r3, #31
 8009906:	d5e1      	bpl.n	80098cc <__swbuf_r+0x2e>
 8009908:	2e0a      	cmp	r6, #10
 800990a:	d1df      	bne.n	80098cc <__swbuf_r+0x2e>
 800990c:	4621      	mov	r1, r4
 800990e:	4628      	mov	r0, r5
 8009910:	f7ff ff4e 	bl	80097b0 <_fflush_r>
 8009914:	2800      	cmp	r0, #0
 8009916:	d0d9      	beq.n	80098cc <__swbuf_r+0x2e>
 8009918:	e7d6      	b.n	80098c8 <__swbuf_r+0x2a>
	...

0800991c <__swsetup_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4b29      	ldr	r3, [pc, #164]	@ (80099c4 <__swsetup_r+0xa8>)
 8009920:	4605      	mov	r5, r0
 8009922:	6818      	ldr	r0, [r3, #0]
 8009924:	460c      	mov	r4, r1
 8009926:	b118      	cbz	r0, 8009930 <__swsetup_r+0x14>
 8009928:	6a03      	ldr	r3, [r0, #32]
 800992a:	b90b      	cbnz	r3, 8009930 <__swsetup_r+0x14>
 800992c:	f7ff fa68 	bl	8008e00 <__sinit>
 8009930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009934:	0719      	lsls	r1, r3, #28
 8009936:	d422      	bmi.n	800997e <__swsetup_r+0x62>
 8009938:	06da      	lsls	r2, r3, #27
 800993a:	d407      	bmi.n	800994c <__swsetup_r+0x30>
 800993c:	2209      	movs	r2, #9
 800993e:	602a      	str	r2, [r5, #0]
 8009940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800994a:	e033      	b.n	80099b4 <__swsetup_r+0x98>
 800994c:	0758      	lsls	r0, r3, #29
 800994e:	d512      	bpl.n	8009976 <__swsetup_r+0x5a>
 8009950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009952:	b141      	cbz	r1, 8009966 <__swsetup_r+0x4a>
 8009954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009958:	4299      	cmp	r1, r3
 800995a:	d002      	beq.n	8009962 <__swsetup_r+0x46>
 800995c:	4628      	mov	r0, r5
 800995e:	f000 f941 	bl	8009be4 <_free_r>
 8009962:	2300      	movs	r3, #0
 8009964:	6363      	str	r3, [r4, #52]	@ 0x34
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	2300      	movs	r3, #0
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f043 0308 	orr.w	r3, r3, #8
 800997c:	81a3      	strh	r3, [r4, #12]
 800997e:	6923      	ldr	r3, [r4, #16]
 8009980:	b94b      	cbnz	r3, 8009996 <__swsetup_r+0x7a>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800998c:	d003      	beq.n	8009996 <__swsetup_r+0x7a>
 800998e:	4621      	mov	r1, r4
 8009990:	4628      	mov	r0, r5
 8009992:	f000 f83f 	bl	8009a14 <__smakebuf_r>
 8009996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999a:	f013 0201 	ands.w	r2, r3, #1
 800999e:	d00a      	beq.n	80099b6 <__swsetup_r+0x9a>
 80099a0:	2200      	movs	r2, #0
 80099a2:	60a2      	str	r2, [r4, #8]
 80099a4:	6962      	ldr	r2, [r4, #20]
 80099a6:	4252      	negs	r2, r2
 80099a8:	61a2      	str	r2, [r4, #24]
 80099aa:	6922      	ldr	r2, [r4, #16]
 80099ac:	b942      	cbnz	r2, 80099c0 <__swsetup_r+0xa4>
 80099ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099b2:	d1c5      	bne.n	8009940 <__swsetup_r+0x24>
 80099b4:	bd38      	pop	{r3, r4, r5, pc}
 80099b6:	0799      	lsls	r1, r3, #30
 80099b8:	bf58      	it	pl
 80099ba:	6962      	ldrpl	r2, [r4, #20]
 80099bc:	60a2      	str	r2, [r4, #8]
 80099be:	e7f4      	b.n	80099aa <__swsetup_r+0x8e>
 80099c0:	2000      	movs	r0, #0
 80099c2:	e7f7      	b.n	80099b4 <__swsetup_r+0x98>
 80099c4:	2400003c 	.word	0x2400003c

080099c8 <__swhatbuf_r>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	460c      	mov	r4, r1
 80099cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d0:	2900      	cmp	r1, #0
 80099d2:	b096      	sub	sp, #88	@ 0x58
 80099d4:	4615      	mov	r5, r2
 80099d6:	461e      	mov	r6, r3
 80099d8:	da0d      	bge.n	80099f6 <__swhatbuf_r+0x2e>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099e0:	f04f 0100 	mov.w	r1, #0
 80099e4:	bf14      	ite	ne
 80099e6:	2340      	movne	r3, #64	@ 0x40
 80099e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099ec:	2000      	movs	r0, #0
 80099ee:	6031      	str	r1, [r6, #0]
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	b016      	add	sp, #88	@ 0x58
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
 80099f6:	466a      	mov	r2, sp
 80099f8:	f000 f88c 	bl	8009b14 <_fstat_r>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	dbec      	blt.n	80099da <__swhatbuf_r+0x12>
 8009a00:	9901      	ldr	r1, [sp, #4]
 8009a02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a0a:	4259      	negs	r1, r3
 8009a0c:	4159      	adcs	r1, r3
 8009a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a12:	e7eb      	b.n	80099ec <__swhatbuf_r+0x24>

08009a14 <__smakebuf_r>:
 8009a14:	898b      	ldrh	r3, [r1, #12]
 8009a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a18:	079d      	lsls	r5, r3, #30
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	d507      	bpl.n	8009a30 <__smakebuf_r+0x1c>
 8009a20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	2301      	movs	r3, #1
 8009a2a:	6163      	str	r3, [r4, #20]
 8009a2c:	b003      	add	sp, #12
 8009a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a30:	ab01      	add	r3, sp, #4
 8009a32:	466a      	mov	r2, sp
 8009a34:	f7ff ffc8 	bl	80099c8 <__swhatbuf_r>
 8009a38:	9f00      	ldr	r7, [sp, #0]
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f7ff fc24 	bl	800928c <_malloc_r>
 8009a44:	b948      	cbnz	r0, 8009a5a <__smakebuf_r+0x46>
 8009a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4a:	059a      	lsls	r2, r3, #22
 8009a4c:	d4ee      	bmi.n	8009a2c <__smakebuf_r+0x18>
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	f043 0302 	orr.w	r3, r3, #2
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	e7e2      	b.n	8009a20 <__smakebuf_r+0xc>
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	6020      	str	r0, [r4, #0]
 8009a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a62:	81a3      	strh	r3, [r4, #12]
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a6a:	b15b      	cbz	r3, 8009a84 <__smakebuf_r+0x70>
 8009a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a70:	4630      	mov	r0, r6
 8009a72:	f000 f861 	bl	8009b38 <_isatty_r>
 8009a76:	b128      	cbz	r0, 8009a84 <__smakebuf_r+0x70>
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f023 0303 	bic.w	r3, r3, #3
 8009a7e:	f043 0301 	orr.w	r3, r3, #1
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	431d      	orrs	r5, r3
 8009a88:	81a5      	strh	r5, [r4, #12]
 8009a8a:	e7cf      	b.n	8009a2c <__smakebuf_r+0x18>

08009a8c <_putc_r>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	460d      	mov	r5, r1
 8009a90:	4614      	mov	r4, r2
 8009a92:	4606      	mov	r6, r0
 8009a94:	b118      	cbz	r0, 8009a9e <_putc_r+0x12>
 8009a96:	6a03      	ldr	r3, [r0, #32]
 8009a98:	b90b      	cbnz	r3, 8009a9e <_putc_r+0x12>
 8009a9a:	f7ff f9b1 	bl	8008e00 <__sinit>
 8009a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aa0:	07d8      	lsls	r0, r3, #31
 8009aa2:	d405      	bmi.n	8009ab0 <_putc_r+0x24>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	0599      	lsls	r1, r3, #22
 8009aa8:	d402      	bmi.n	8009ab0 <_putc_r+0x24>
 8009aaa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aac:	f7ff fa89 	bl	8008fc2 <__retarget_lock_acquire_recursive>
 8009ab0:	68a3      	ldr	r3, [r4, #8]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	60a3      	str	r3, [r4, #8]
 8009ab8:	da05      	bge.n	8009ac6 <_putc_r+0x3a>
 8009aba:	69a2      	ldr	r2, [r4, #24]
 8009abc:	4293      	cmp	r3, r2
 8009abe:	db12      	blt.n	8009ae6 <_putc_r+0x5a>
 8009ac0:	b2eb      	uxtb	r3, r5
 8009ac2:	2b0a      	cmp	r3, #10
 8009ac4:	d00f      	beq.n	8009ae6 <_putc_r+0x5a>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	6022      	str	r2, [r4, #0]
 8009acc:	701d      	strb	r5, [r3, #0]
 8009ace:	b2ed      	uxtb	r5, r5
 8009ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ad2:	07da      	lsls	r2, r3, #31
 8009ad4:	d405      	bmi.n	8009ae2 <_putc_r+0x56>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	059b      	lsls	r3, r3, #22
 8009ada:	d402      	bmi.n	8009ae2 <_putc_r+0x56>
 8009adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ade:	f7ff fa71 	bl	8008fc4 <__retarget_lock_release_recursive>
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	bd70      	pop	{r4, r5, r6, pc}
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff fed7 	bl	800989e <__swbuf_r>
 8009af0:	4605      	mov	r5, r0
 8009af2:	e7ed      	b.n	8009ad0 <_putc_r+0x44>

08009af4 <_close_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d06      	ldr	r5, [pc, #24]	@ (8009b10 <_close_r+0x1c>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	f7f7 fb31 	bl	8001166 <_close>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_close_r+0x1a>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_close_r+0x1a>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	24000388 	.word	0x24000388

08009b14 <_fstat_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d07      	ldr	r5, [pc, #28]	@ (8009b34 <_fstat_r+0x20>)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	4611      	mov	r1, r2
 8009b20:	602b      	str	r3, [r5, #0]
 8009b22:	f7f7 fb2c 	bl	800117e <_fstat>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	d102      	bne.n	8009b30 <_fstat_r+0x1c>
 8009b2a:	682b      	ldr	r3, [r5, #0]
 8009b2c:	b103      	cbz	r3, 8009b30 <_fstat_r+0x1c>
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	bd38      	pop	{r3, r4, r5, pc}
 8009b32:	bf00      	nop
 8009b34:	24000388 	.word	0x24000388

08009b38 <_isatty_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d06      	ldr	r5, [pc, #24]	@ (8009b54 <_isatty_r+0x1c>)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4608      	mov	r0, r1
 8009b42:	602b      	str	r3, [r5, #0]
 8009b44:	f7f7 fb2b 	bl	800119e <_isatty>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_isatty_r+0x1a>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_isatty_r+0x1a>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	24000388 	.word	0x24000388

08009b58 <_lseek_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	@ (8009b78 <_lseek_r+0x20>)
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4611      	mov	r1, r2
 8009b62:	2200      	movs	r2, #0
 8009b64:	602a      	str	r2, [r5, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f7f7 fb24 	bl	80011b4 <_lseek>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d102      	bne.n	8009b76 <_lseek_r+0x1e>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	b103      	cbz	r3, 8009b76 <_lseek_r+0x1e>
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	24000388 	.word	0x24000388

08009b7c <_read_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d07      	ldr	r5, [pc, #28]	@ (8009b9c <_read_r+0x20>)
 8009b80:	4604      	mov	r4, r0
 8009b82:	4608      	mov	r0, r1
 8009b84:	4611      	mov	r1, r2
 8009b86:	2200      	movs	r2, #0
 8009b88:	602a      	str	r2, [r5, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f7f7 fab2 	bl	80010f4 <_read>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	d102      	bne.n	8009b9a <_read_r+0x1e>
 8009b94:	682b      	ldr	r3, [r5, #0]
 8009b96:	b103      	cbz	r3, 8009b9a <_read_r+0x1e>
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	24000388 	.word	0x24000388

08009ba0 <_sbrk_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d06      	ldr	r5, [pc, #24]	@ (8009bbc <_sbrk_r+0x1c>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f7 fb10 	bl	80011d0 <_sbrk>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_sbrk_r+0x1a>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_sbrk_r+0x1a>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	24000388 	.word	0x24000388

08009bc0 <_write_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4d07      	ldr	r5, [pc, #28]	@ (8009be0 <_write_r+0x20>)
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	4611      	mov	r1, r2
 8009bca:	2200      	movs	r2, #0
 8009bcc:	602a      	str	r2, [r5, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f7f7 faad 	bl	800112e <_write>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_write_r+0x1e>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_write_r+0x1e>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	24000388 	.word	0x24000388

08009be4 <_free_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4605      	mov	r5, r0
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d041      	beq.n	8009c70 <_free_r+0x8c>
 8009bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf0:	1f0c      	subs	r4, r1, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	bfb8      	it	lt
 8009bf6:	18e4      	addlt	r4, r4, r3
 8009bf8:	f7ff fe02 	bl	8009800 <__malloc_lock>
 8009bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009c74 <_free_r+0x90>)
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	b933      	cbnz	r3, 8009c10 <_free_r+0x2c>
 8009c02:	6063      	str	r3, [r4, #4]
 8009c04:	6014      	str	r4, [r2, #0]
 8009c06:	4628      	mov	r0, r5
 8009c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c0c:	f7ff bdfe 	b.w	800980c <__malloc_unlock>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d908      	bls.n	8009c26 <_free_r+0x42>
 8009c14:	6820      	ldr	r0, [r4, #0]
 8009c16:	1821      	adds	r1, r4, r0
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	bf01      	itttt	eq
 8009c1c:	6819      	ldreq	r1, [r3, #0]
 8009c1e:	685b      	ldreq	r3, [r3, #4]
 8009c20:	1809      	addeq	r1, r1, r0
 8009c22:	6021      	streq	r1, [r4, #0]
 8009c24:	e7ed      	b.n	8009c02 <_free_r+0x1e>
 8009c26:	461a      	mov	r2, r3
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	b10b      	cbz	r3, 8009c30 <_free_r+0x4c>
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	d9fa      	bls.n	8009c26 <_free_r+0x42>
 8009c30:	6811      	ldr	r1, [r2, #0]
 8009c32:	1850      	adds	r0, r2, r1
 8009c34:	42a0      	cmp	r0, r4
 8009c36:	d10b      	bne.n	8009c50 <_free_r+0x6c>
 8009c38:	6820      	ldr	r0, [r4, #0]
 8009c3a:	4401      	add	r1, r0
 8009c3c:	1850      	adds	r0, r2, r1
 8009c3e:	4283      	cmp	r3, r0
 8009c40:	6011      	str	r1, [r2, #0]
 8009c42:	d1e0      	bne.n	8009c06 <_free_r+0x22>
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	6053      	str	r3, [r2, #4]
 8009c4a:	4408      	add	r0, r1
 8009c4c:	6010      	str	r0, [r2, #0]
 8009c4e:	e7da      	b.n	8009c06 <_free_r+0x22>
 8009c50:	d902      	bls.n	8009c58 <_free_r+0x74>
 8009c52:	230c      	movs	r3, #12
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	e7d6      	b.n	8009c06 <_free_r+0x22>
 8009c58:	6820      	ldr	r0, [r4, #0]
 8009c5a:	1821      	adds	r1, r4, r0
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf04      	itt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	bf04      	itt	eq
 8009c68:	1809      	addeq	r1, r1, r0
 8009c6a:	6021      	streq	r1, [r4, #0]
 8009c6c:	6054      	str	r4, [r2, #4]
 8009c6e:	e7ca      	b.n	8009c06 <_free_r+0x22>
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	bf00      	nop
 8009c74:	24000384 	.word	0x24000384

08009c78 <_init>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	bf00      	nop
 8009c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7e:	bc08      	pop	{r3}
 8009c80:	469e      	mov	lr, r3
 8009c82:	4770      	bx	lr

08009c84 <_fini>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	bf00      	nop
 8009c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8a:	bc08      	pop	{r3}
 8009c8c:	469e      	mov	lr, r3
 8009c8e:	4770      	bx	lr
